<?xml version="1.0"?>
<project name="AEMDemo" default="default" basedir=".">
	<!-- The conf/build-personal.properties file can be created to store your own values without touching the default build.xml file released with new demo machines -->
	<property file="conf/build-personal.properties"/>
	<!-- The build.properties file contains the default configuration value -->
	<property file="build.properties"/>
	<!-- Setting some global properties for this build -->
	<property name="dist" location="./dist"/>
	<property name="ant" location="./ant"/>
	<property name="packages" location="./dist/packages"/>
	<property name="hotfixes" location="./dist/hotfixes"/>
	<property name="demos" location="./demos"/>
	<property name="logs" location="./logs/${demo.build}"/>
	<property name="validation" location="./logs/validation"/>
	<property name="infralogs" location="./logs"/>
	<property name="mongodb" location="./mongodb"/>
	<property name="mysql" location="./mysql"/>
	<property name="ffmpeg" location="./ffmpeg"/>
	<property name="solr" location="./solr"/>
	<property name="java" location="./java"/>
	<property name="james" location="./james"/>
	<property name="archives" location="./archives"/>
	<property name="bin" location="./bin"/>
	<!-- This file requires the ant-contrib-1.0b3.jar file to be in the ant/lib folder -->
	<taskdef resource="net/sf/antcontrib/antcontrib.properties"/>
	<description>
        This is the AEM Demo Machine. Comprensive toolkit for running and configuring integrated AEM demos.
    </description>
	<condition property="isWindows">
		<os family="windows"/>
	</condition>
	<condition property="isUnix">
		<os family="unix"/>
	</condition>
	<condition property="isMac">
		<os family="mac"/>
	</condition>
	<!-- build classpath for Java tools -->
	<path id="demo.classpath">
		<fileset dir="${java}/libs">
			<include name="**/*.jar"/>
		</fileset>
		<fileset dir="${ant}/lib">
			<include name="**/*.jar"/>
		</fileset>
		<pathelement location="${java}/bin"/>
	</path>
	<!-- Target for creating a new demo environment out of the demo.addon properties -->
	<target name="create">
		<antcall target="install"/>
		<if>
			<equals arg1="${demo.addons.1.packages}" arg2="true" casesensitive="false"/>
			<then>
				<antcall target="packages"/>
			</then>
		</if>
		<!-- Configure needs to happen after the packages are uploade (e.g. cloud services) -->
		<antcall target="configure"/>
		<if>
			<equals arg1="${demo.addons.2.sites}" arg2="true" casesensitive="false"/>
			<then>
				<antcall target="sites"/>
			</then>
		</if>
		<if>
			<equals arg1="${demo.addons.3.assets}" arg2="true" casesensitive="false"/>
			<then>
				<antcall target="assets"/>
			</then>
		</if>
		<if>
			<equals arg1="${demo.addons.4.communities}" arg2="true" casesensitive="false"/>
			<then>
				<antcall target="communities"/>
			</then>
		</if>
		<if>
			<equals arg1="${demo.addons.5.apps}" arg2="true" casesensitive="false"/>
			<then>
				<antcall target="apps"/>
			</then>
		</if>
		<if>
			<equals arg1="${demo.addons.6.forms}" arg2="true" casesensitive="false"/>
			<then>
				<antcall target="forms"/>
			</then>
		</if>
		<if>
			<equals arg1="${demo.addons.7.commerce}" arg2="true" casesensitive="false"/>
			<then>
				<antcall target="commerce"/>
			</then>
		</if>
		<if>
			<equals arg1="${demo.addons.8.weretail}" arg2="true" casesensitive="false"/>
			<then>
				<antcall target="weretail"/>
			</then>
		</if>
	</target>
	<!-- Target for installing then configuring a new baseline demo -->
	<target name="demo">
		<antcall target="install"/>
		<antcall target="packages"/>
		<antcall target="configure"/>
	</target>
	<!-- Target for installing then configuring a new baseline demo for AEM Communities -->
	<target name="demo_communities">
		<antcall target="demo"/>
		<antcall target="communities"/>
	</target>
	<!-- Target for installing then configuring a new baseline demo for AEM Forms -->
	<target name="demo_forms">
		<antcall target="demo"/>
		<antcall target="forms"/>
	</target>
	<!-- Target for installing then configuring a new baseline demo for AEM Sites -->
	<target name="demo_sites">
		<antcall target="demo"/>
		<antcall target="sites"/>
	</target>
	<!-- Target for installing then configuring a new baseline demo for AEM Commerce -->
	<target name="demo_commerce">
		<antcall target="demo"/>
		<antcall target="commerce"/>
	</target>
	<!-- Target for installing then configuring a new baseline demo for AEM Assets -->
	<target name="demo_assets">
		<antcall target="demo"/>
		<antcall target="assets"/>
	</target>
	<!-- Target for installing then configuring a new baseline demo for AEM Apps -->
	<target name="demo_apps">
		<antcall target="demo"/>
		<antcall target="apps"/>
	</target>
	<!-- Target for installing then configuring EVERYTHING -->
	<target name="demo_kitchensink">
		<antcall target="demo"/>
		<antcall target="communities"/>
		<antcall target="sites"/>
		<antcall target="apps"/>
		<antcall target="assets"/>
		<antcall target="forms"/>
	</target>
	<!-- Target for getting some information about a particular demo environment -->
	<target name="details" depends="version, configuration">
		<if>
			<resourceexists>
				<file file="${demos}/${demo.build}/demomachine.properties"/>
			</resourceexists>
			<then>
				<antcall target="demo_settings"/>
			</then>
			<else>
				<echo message="This demo environment is not available. Please rebuild first."/>
			</else>
		</if>
	</target>
	<!-- Target for loading the persisted demo machine configuration -->
	<target name="configuration">
		<if>
			<resourceexists>
				<file file="${demos}/${demo.build}/demomachine.properties"/>
			</resourceexists>
			<then>
				<property file="${demos}/${demo.build}/demomachine.properties"/>
				<if>
					<not>
						<isset property="demomachine.jvmargs"/>
					</not>
					<then>
						<property name="demomachine.jvmargs" value=""/>
					</then>
				</if>
				<if>
					<not>
						<isset property="demomachine.jvmdebug"/>
					</not>
					<then>
						<property name="demomachine.jvmdebug" value="${AdobeAEM.jvmdebug}"/>
					</then>
				</if>
				<if>
					<not>
						<isset property="demomachine.authorport"/>
					</not>
					<then>
						<property name="demomachine.authorport" value="${AdobeAEM.authorport}"/>
					</then>
				</if>
				<if>
					<not>
						<isset property="demomachine.publishport"/>
					</not>
					<then>
						<property name="demomachine.publishport" value="${AdobeAEM.publishport}"/>
					</then>
				</if>
				<if>
					<not>
						<isset property="demomachine.farmport"/>
					</not>
					<then>
						<property name="demomachine.farmport" value="${AdobeAEM.farmport}"/>
					</then>
				</if>
				<if>
					<not>
						<isset property="demomachine.dynamicmedia"/>
					</not>
					<then>
						<property name="demomachine.dynamicmedia" value="${demo.dynamicmedia}"/>
					</then>
				</if>
			</then>
			<else>
				<property name="demomachine.srp" value="${demo.srp}"/>
				<property name="demomachine.type" value="${demo.type}"/>
				<property name="demomachine.store" value="${demo.store}"/>
				<property name="demomachine.jvmargs" value="${AdobeAEM.jvmargs}"/>
				<property name="demomachine.jvmdebug" value="${AdobeAEM.jvmdebug}"/>
				<property name="demomachine.dynamicmedia" value="${demo.dynamicmedia}"/>
				<property name="demomachine.authorport" value="${AdobeAEM.authorport}"/>
				<property name="demomachine.publishport" value="${AdobeAEM.publishport}"/>
				<property name="demomachine.farmport" value="${AdobeAEM.farmport}"/>
				<property name="demomachine.communities.enablement" value="${demo.communities.enablement}"/>
			</else>
		</if>
	</target>
	<target name="demo_settings">
		<echo message="Demo Folder: ${demos}/${demo.build}"/>
		<echo message="Demo SRP: ${demomachine.srp}"/>
		<echo message="Demo Type: ${demomachine.type}"/>
		<echo message="Demo Store: ${demomachine.store}"/>
		<echo message="Demo Author Port: ${demomachine.authorport}"/>
		<echo message="Demo Publish Port: ${demomachine.publishport}"/>
		<echo message="Demo Dynamic Media: ${demomachine.dynamicmedia}"/>
		<echo message="Demo JVM debug: ${demomachine.jvmdebug}"/>
		<echo message="Demo JVM args: ${demomachine.jvmargs}"/>
	</target>
	<!-- Target for installing and starting the default AUTHOR and PUBLISH servers -->
	<target name="install">
		<antcall target="cleanup"/>
		<echo message="Installing the build ${demo.build}..."/>
		<antcall target="demomachine_analytics_install"/>
		<mkdir dir="${demos}/${demo.build}"/>
		<mkdir dir="${logs}"/>
		<echo message="Persisting runtime options in demomachine.properties"/>
		<propertyfile file="${demos}/${demo.build}/demomachine.properties" comment="Demo Machine Instance">
			<entry key="demomachine.srp" value="${demo.srp}"/>
			<entry key="demomachine.type" value="${demo.type}"/>
			<entry key="demomachine.store" value="${demo.store}"/>
			<entry key="demomachine.dynamicmedia" value="${demo.dynamicmedia}"/>
			<entry key="demomachine.authorport" value="${AdobeAEM.authorport}"/>
			<entry key="demomachine.publishport" value="${AdobeAEM.publishport}"/>
			<entry key="demomachine.farmport" value="${AdobeAEM.farmport}"/>
			<entry key="demomachine.jvmdebug" value="${AdobeAEM.jvmdebug}"/>
			<entry key="demomachine.jvmargs" value="${AdobeAEM.jvmargs}"/>
			<entry key="demomachine.communities.enablement" value="${demo.communities.enablement}"/>
		</propertyfile>
		<property file="${demos}/${demo.build}/demomachine.properties"/>
		<if>
			<not>
				<resourceexists>
					<file file="${demos}/${demo.build}/demobuild.properties"/>
				</resourceexists>
			</not>
			<then>
				<echo message="Persisting build options in demobuild.properties"/>
				<echoproperties destfile="${demos}/${demo.build}/demobuild.properties"/>
			</then>
		</if>
		<property name="demo.spfile" value="${dist}/bin/${demo.jar}-sp.zip"/>
		<echo message="AEM JAR to use: ${demo.jar}.jar"/>
		<echo message="AEM SRP to use: ${demomachine.srp}"/>
		<echo message="AEM Store to use: ${demomachine.store}"/>
		<if>
			<resourceexists>
				<file file="${dist}/bin/${demo.jar}.jar"/>
			</resourceexists>
			<then>
				<if>
					<or>
						<equals arg1="${demomachine.srp}" arg2="msrp" casesensitive="false"/>
						<equals arg1="${demomachine.srp}" arg2="dsrp" casesensitive="false"/>
					</or>
					<then>
						<!-- Making sure we configure Solr with a new core for this demo build  -->
						<antcall target="solr_stop"/>
						<if>
							<resourceexists>
								<file file="${solr}/bin/solr"/>
							</resourceexists>
							<then>
								<copy todir="${solr}/example/solr/${demo.build}" overwrite="true">
									<fileset dir="${solr}/example/solr/collection1">
										<include name="**/*"/>
									</fileset>
								</copy>
								<replace file="${solr}/example/solr/${demo.build}/core.properties" token="collection1" value="${demo.build}"/>
							</then>
						</if>
					</then>
				</if>
				<antcall target="install_instance">
					<param name="demo.instance" value="author"/>
					<param name="demo.mode" value="author"/>
					<param name="demo.port" value="${demomachine.authorport}"/>
					<param name="demo.portdebug" value="${AdobeAEM.authorportdebug}"/>
				</antcall>
				<if>
					<not>
						<equals arg1="${demomachine.type}" arg2="author" casesensitive="false"/>
					</not>
					<then>
						<antcall target="install_instance">
							<param name="demo.instance" value="publish"/>
							<param name="demo.mode" value="publish"/>
							<param name="demo.port" value="${demomachine.publishport}"/>
							<param name="demo.portdebug" value="${AdobeAEM.publishportdebug}"/>
						</antcall>
					</then>
				</if>
				<if>
					<equals arg1="${demomachine.type}" arg2="farm" casesensitive="false"/>
					<then>
						<antcall target="install_instance">
							<param name="demo.instance" value="farm"/>
							<param name="demo.mode" value="publish"/>
							<param name="demo.port" value="${demomachine.farmport}"/>
							<param name="demo.portdebug" value="${AdobeAEM.farmportdebug}"/>
						</antcall>
					</then>
				</if>
			</then>
			<else>
				<fail message="FATAL: File ${demo.jar}.jar does not exist"/>
			</else>
		</if>
		<antcall target="start"/>
		<!--
		<antcall target="crypto"/>
		-->
		<!-- Installing the ACS tools and commons on Author and Publish only -->
		<antcall target="acs_instance">
			<param name="port" value="${demomachine.authorport}"/>
		</antcall>
		<if>
			<socket server="${demo.host}" port="${demomachine.publishport}"/>
			<then>
				<antcall target="acs_instance">
					<param name="port" value="${demomachine.publishport}"/>
				</antcall>
			</then>
		</if>
	</target>
	<!-- Crypto support -->
	<target name="crypto" if="aem63orlater" depends="version,configuration">
		<!-- For now, TarMK on 6.3 requires a restart so enforce the /etc/keys to be loaded from JCR -->
		<if>
			<equals arg1="${demomachine.store}" arg2="crx3" casesensitive="false"/>
			<then>
				<echo message="Updating crypto keys on file system for TarMK"/>
				<antcall target="findandreplace">
					<param name="search.sourcefolder" value="${demos}/${demo.build}/author/crx-quickstart/launchpad/felix"/>
					<param name="search.targetfolder" value="${demos}/${demo.build}/publish/crx-quickstart/launchpad/felix"/>
					<param name="search.filename" value="hmac"/>
				</antcall>
				<antcall target="findandreplace">
					<param name="search.sourcefolder" value="${demos}/${demo.build}/author/crx-quickstart/launchpad/felix"/>
					<param name="search.targetfolder" value="${demos}/${demo.build}/publish/crx-quickstart/launchpad/felix"/>
					<param name="search.filename" value="master"/>
				</antcall>
				<antcall target="findandreplace">
					<param name="search.sourcefolder" value="${demos}/${demo.build}/author/crx-quickstart/launchpad/felix"/>
					<param name="search.targetfolder" value="${demos}/${demo.build}/farm/crx-quickstart/launchpad/felix"/>
					<param name="search.filename" value="hmac"/>
				</antcall>
				<antcall target="findandreplace">
					<param name="search.sourcefolder" value="${demos}/${demo.build}/author/crx-quickstart/launchpad/felix"/>
					<param name="search.targetfolder" value="${demos}/${demo.build}/farm/crx-quickstart/launchpad/felix"/>
					<param name="search.filename" value="master"/>
				</antcall>
				<antcall target="restart"/>
			</then>
		</if>
	</target>
	<!-- Searching and replacing a file from a folder to another one -->
	<target name="findandreplace">
		<if>
			<and>
				<available file="${search.sourcefolder}" type="dir"/>
				<available file="${search.targetfolder}" type="dir"/>
			</and>
			<then>
				<first id="sourcefile">
					<fileset dir="${search.sourcefolder}" includes="**/${search.filename}"/>
				</first>
				<first id="targetfile">
					<fileset dir="${search.targetfolder}" includes="**/${search.filename}"/>
				</first>
				<copy file="${toString:sourcefile}" tofile="${toString:targetfile}" overwrite="true"/>
			</then>
		</if>
	</target>
	<!-- Target for setting permissions on bin folder -->
	<target name="permissions">
		<chmod dir="${bin}" perm="ugo+rx" includes="*.sh"/>
	</target>
	<!-- Target for deploying the hotfixes before the first startup -->
	<target name="hotfix_package_instance" depends="version,configuration">
		<if>
			<and>
				<equals arg1="${demo.hotfixes}" arg2="true" casesensitive="false"/>
				<available file="${dist}/hotfixes" type="dir"/>
			</and>
			<then>
				<echo message="Configuring the ${demo.instance} instance"/>
				<foreach target="hotfix_package" param="package">
					<path id="hotfix.packages">
						<fileset dir="${hotfixes}" casesensitive="yes">
							<include name="all/*.zip"/>
							<include name="all/*.jar"/>
							<include name="${demo.packages}/*.zip"/>
							<include name="${demo.packages}/*.jar"/>
						</fileset>
					</path>
				</foreach>
			</then>
		</if>
	</target>
	<target name="hotfix_package">
		<basename property="hotfixname" file="${package}"/>
		<echo message="Adding hotfix package ${hotfixname} to ${demo.instance}"/>
		<copy file="${package}" todir="${demos}/${demo.build}/${demo.instance}/crx-quickstart/install"/>
	</target>
	<!-- Target to install a new instance -->
	<target name="install_instance">
		<echo message="Installing a new demo instance of type ${demo.mode} named ${demo.instance}..."/>
		<mkdir dir="${demos}/${demo.build}/${demo.instance}"/>
		<copy file="${dist}/license/license-${demo.license}.properties" tofile="${demos}/${demo.build}/${demo.instance}/license.properties"/>
		<copy file="${dist}/bin/${demo.jar}.jar" tofile="${demos}/${demo.build}/${demo.instance}/aem-${demo.mode}-p${demo.port}.jar"/>
		<java dir="${demos}/${demo.build}/${demo.instance}" jar="${demos}/${demo.build}/${demo.instance}/aem-${demo.mode}-p${demo.port}.jar" output="${logs}/${demo.port}_${demo.instance}_unpack.txt" fork="true" spawn="false">
			<arg line="-unpack"/>
			<jvmarg value="-Djava.awt.headless=true"/>
		</java>
		<if>
			<not>
				<resourceexists>
					<file file="${demos}/${demo.build}/${demo.instance}/crx-quickstart"/>
				</resourceexists>
			</not>
			<then>
				<fail message="Invalid ${demo.jar}.jar file, please double check the file integrity"/>
			</then>
		</if>
		<if>
			<and>
				<resourceexists>
					<file file="${demo.spfile}"/>
				</resourceexists>
				<equals arg1="${demo.servicepack}" arg2="true" casesensitive="false"/>
			</and>
			<then>
				<echo message="INFO: Installing a service pack for this build"/>
				<copy file="${demo.spfile}" tofile="${demos}/${demo.build}/${demo.instance}/crx-quickstart/install/sp.zip"/>
			</then>
		</if>
		<if>
			<!-- Checking if mysql is to be used -->
			<or>
				<equals arg1="${demomachine.store}" arg2="crx3,crx3rdb" casesensitive="false"/>
				<equals arg1="${demo.communities.enablement}" arg2="true" casesensitive="false"/>
				<equals arg1="${demomachine.srp}" arg2="dsrp" casesensitive="false"/>
			</or>
			<then>
				<!-- Installing the OSGI driver for MySQL -->
				<unzip src="${dist}/rdb/mysql.zip" dest="${demos}/${demo.build}/${demo.instance}/crx-quickstart/install"/>
				<!-- Need to reset the schemas if already there -->
				<antcall target="mysql_start"/>
				<if>
					<and>
						<equals arg1="${demo.mysql.external}" arg2="false" casesensitive="false"/>
						<resourceexists>
							<file file="${mysql}/bin/mysql"/>
						</resourceexists>
					</and>
					<then>
						<property name="mysql.exec" value="${mysql}/bin/mysql"/>
					</then>
					<else>
						<property name="mysql.exec" value="${demo.mysql.path}"/>
					</else>
				</if>
				<copy file="${dist}/rdb/drop_schemas.sql" tofile="${dist}/rdb/drop_schemas_${demo.build}.sql" overwrite="true"/>
				<propertyregex property="mysql.prefix" input="${demo.build}" regexp="-" replace="" global="true" defaultvalue="${demo.build}"/>
				<echo message="Dropping the MySQL schemas ${mysql.prefix} for DSRP, SCORM and Reporting..."/>
				<replace file="${dist}/rdb/drop_schemas_${demo.build}.sql" token="enablementdb" value="${mysql.prefix}reporting"/>
				<replace file="${dist}/rdb/drop_schemas_${demo.build}.sql" token="ScormEngineDB" value="${mysql.prefix}scorm"/>
				<replace file="${dist}/rdb/drop_schemas_${demo.build}.sql" token="DSRP" value="${mysql.prefix}dsrp"/>
				<replace file="${dist}/rdb/drop_schemas_${demo.build}.sql" token="author" value="${mysql.prefix}author"/>
				<replace file="${dist}/rdb/drop_schemas_${demo.build}.sql" token="publish" value="${mysql.prefix}publish"/>
				<exec executable="${mysql.exec}" spawn="false">
					<arg line="-u ${demo.mysql.user} --host=${demo.mysql.host} --port=${demo.mysql.port} --port=${demo.mysql.port} --password=${demo.mysql.password} -e 'source ${dist}/rdb/drop_schemas_${demo.build}.sql'"/>
				</exec>
				<delete file="${dist}/rdb/drop_schemas_${demo.build}.sql"/>
				<!-- Creating the Schema and the datasource for RDBMK -->
				<if>
					<equals arg1="${demomachine.store}" arg2="crx3,crx3rdb" casesensitive="false"/>
					<then>
						<copy file="${dist}/rdb/mysql.sql" tofile="${dist}/rdb/mysql_${demo.instance}${demo.build}.sql" overwrite="true"/>
						<replace file="${dist}/rdb/mysql_${demo.instance}${demo.build}.sql" token="@schema@" value="${mysql.prefix}${demo.instance}"/>
						<if>
							<resourceexists>
								<file file="${mysql.exec}"/>
							</resourceexists>
							<then>
								<exec executable="${mysql.exec}" spawn="false" failonerror="false">
									<arg line="-u ${demo.mysql.user} --host=${demo.mysql.host} --port=${demo.mysql.port} --port=${demo.mysql.port} --password=${demo.mysql.password} -e 'source ${dist}/rdb/mysql_${demo.instance}${demo.build}.sql'"/>
								</exec>
							</then>
						</if>
						<delete file="${dist}/rdb/mysql_${demo.instance}${demo.build}.sql"/>
						<replace file="${demos}/${demo.build}/${demo.instance}/crx-quickstart/install/org.apache.sling.datasource.DataSourceFactory-oak.cfg" token="@@SCHEMA@@" value="${mysql.prefix}${demo.instance}"/>
						<replace file="${demos}/${demo.build}/${demo.instance}/crx-quickstart/install/org.apache.sling.datasource.DataSourceFactory-oak.cfg" token="@@HOST@@" value="${demo.mysql.host}"/>
						<replace file="${demos}/${demo.build}/${demo.instance}/crx-quickstart/install/org.apache.sling.datasource.DataSourceFactory-oak.cfg" token="@@PORT@@" value="${demo.mysql.port}"/>
						<replace file="${demos}/${demo.build}/${demo.instance}/crx-quickstart/install/org.apache.sling.datasource.DataSourceFactory-oak.cfg" token="@@USER@@" value="${demo.mysql.user}"/>
						<replace file="${demos}/${demo.build}/${demo.instance}/crx-quickstart/install/org.apache.sling.datasource.DataSourceFactory-oak.cfg" token="@@PASSWORD@@" value="${demo.mysql.password}"/>
					</then>
					<else>
						<!-- For the enablement use case alone, we don't need the OAK datasource to be configured -->
						<delete file="${demos}/${demo.build}/${demo.instance}/crx-quickstart/install/org.apache.sling.datasource.DataSourceFactory-oak.cfg"/>
					</else>
				</if>
			</then>
		</if>
		<antcall target="osgi_instance"/>
		<antcall target="hotfix_osgi_instance"/>
		<antcall target="hotfix_package_instance"/>
		<antcall target="community_instance"/>
		<antcall target="email_instance"/>
	</target>
	<!-- Target for starting the default AUTHOR and PUBLISH servers -->
	<target name="start" depends="version,configuration,details">
		<echo message="Starting the build for demo ${demo.build}..."/>
		<antcall target="prerequisites"/>
		<antcall target="javaversion"/>
		<antcall target="demomachine_analytics_start"/>
		<if>
			<equals arg1="${demo.emailserver}" arg2="true" casesensitive="false"/>
			<then>
				<!-- Making sure we start James SMTP server -->
				<antcall target="james_start"/>
			</then>
		</if>
		<if>
			<or>
				<equals arg1="${demomachine.store}" arg2="crx3,crx3mongo" casesensitive="false"/>
				<equals arg1="${demomachine.srp}" arg2="msrp" casesensitive="false"/>
			</or>
			<then>
				<!-- Making sure we start Mongo with the right data path -->
				<antcall target="mongo_start"/>
			</then>
		</if>
		<if>
			<or>
				<equals arg1="${demomachine.srp}" arg2="msrp" casesensitive="false"/>
				<equals arg1="${demomachine.srp}" arg2="dsrp" casesensitive="false"/>
			</or>
			<then>
				<!-- Making sure we start Solr  -->
				<antcall target="solr_start"/>
			</then>
		</if>
		<if>
			<or>
				<equals arg1="${demomachine.communities.enablement}" arg2="true" casesensitive="false"/>
				<equals arg1="${demomachine.store}" arg2="crx3,crx3rdb" casesensitive="false"/>
				<equals arg1="${demomachine.srp}" arg2="DSRP" casesensitive="false"/>
			</or>
			<then>
				<!-- Making sure we start MySQL  -->
				<antcall target="mysql_start"/>
			</then>
		</if>
		<if>
			<resourceexists>
				<file file="${demos}/${demo.build}/author/aem-author-p${demomachine.authorport}.jar"/>
			</resourceexists>
			<then>
				<echo message="Starting the AUTHOR instance..."/>
				<antcall target="aem_start">
					<param name="demo.instance" value="author"/>
					<param name="demo.mode" value="author"/>
					<param name="demo.port" value="${demomachine.authorport}"/>
					<param name="demo.portdebug" value="${AdobeAEM.authorportdebug}"/>
				</antcall>
			</then>
			<else>
				<fail message="FATAL: There is no demo build named ${demo.build} to start"/>
			</else>
		</if>
		<if>
			<resourceexists>
				<file file="${demos}/${demo.build}/publish/aem-publish-p${demomachine.publishport}.jar"/>
			</resourceexists>
			<then>
				<echo message="Starting the PUBLISH instance..."/>
				<antcall target="aem_start">
					<param name="demo.instance" value="publish"/>
					<param name="demo.mode" value="publish"/>
					<param name="demo.port" value="${demomachine.publishport}"/>
					<param name="demo.portdebug" value="${AdobeAEM.publishportdebug}"/>
				</antcall>
			</then>
		</if>
		<echo message="Waiting for the Author instance to be started..."/>
		<waitfor maxwait="600" maxwaitunit="second" checkevery="5" checkeveryunit="second">
			<and>
				<socket server="${demo.host}" port="${demomachine.authorport}"/>
				<resourcecontains resource="${demos}/${demo.build}/author/crx-quickstart/logs/stderr.log" substring="Quickstart started"/>
			</and>
		</waitfor>
		<if>
			<resourceexists>
				<file file="${demos}/${demo.build}/publish/aem-publish-p${demomachine.publishport}.jar"/>
			</resourceexists>
			<then>
				<echo message="Waiting for the Publish instance to be started..."/>
				<waitfor maxwait="600" maxwaitunit="second" checkevery="5" checkeveryunit="second">
					<and>
						<socket server="${demo.host}" port="${demomachine.publishport}"/>
						<resourcecontains resource="${demos}/${demo.build}/publish/crx-quickstart/logs/stderr.log" substring="Quickstart started"/>
					</and>
				</waitfor>
			</then>
		</if>
		<if>
			<resourceexists>
				<file file="${demos}/${demo.build}/farm/aem-publish-p${demomachine.farmport}.jar"/>
			</resourceexists>
			<then>
				<echo message="Starting the FARM instance..."/>
				<antcall target="aem_start">
					<param name="demo.instance" value="farm"/>
					<param name="demo.mode" value="publish"/>
					<param name="demo.port" value="${demomachine.farmport}"/>
					<param name="demo.portdebug" value="${AdobeAEM.farmportdebug}"/>
				</antcall>
				<echo message="Waiting for the Farm instance to be started..."/>
				<waitfor maxwait="600" maxwaitunit="second" checkevery="5" checkeveryunit="second">
					<and>
						<socket server="${demo.host}" port="${demomachine.farmport}"/>
						<resourcecontains resource="${demos}/${demo.build}/farm/crx-quickstart/logs/stderr.log" substring="Quickstart started"/>
					</and>
				</waitfor>
				<antcall target="configure_farm"/>
			</then>
		</if>
	</target>
	<!-- Target for restarting the default AUTHOR and PUBLISH servers -->
	<target name="restart">
		<echo message="Restarting all running instances"/>
		<antcall target="stop"/>
		<antcall target="start"/>
	</target>
	<!-- Target for stopping all running servers -->
	<target name="stop">
		<echo message="Stopping all running demo instances"/>
		<antcall target="demomachine_analytics_stop"/>
		<antcall target="stop_unix"/>
		<antcall target="stop_windows"/>
	</target>
	<target name="stop_unix" if="isUnix" depends="permissions">
		<exec executable="${bin}/kill.sh" dir="${bin}" spawn="false">
			<arg line="'${demos}'"/>
		</exec>
		<sleep seconds="2"/>
	</target>
	<target name="stop_windows" if="isWindows">
		<exec executable="taskkill.exe" spawn="true">
			<arg line="/F /FI &quot;WINDOWTITLE eq Adobe Experience Manager*&quot;"/>
		</exec>
		<sleep seconds="4"/>
	</target>
	<!-- Target for starting an AEM server -->
	<target name="aem_start">
		<!-- Making sure the port is not already in use -->
		<if>
			<socket server="${demo.host}" port="${demo.port}"/>
			<then>
				<fail message="The port ${demo.port} is already in use."/>
			</then>
		</if>
		<!-- Compute the startup settings for the installer -->
		<if>
			<and>
				<isset property="demo.gui"/>
				<equals arg1="${demo.gui}" arg2="false" casesensitive="false"/>
			</and>
			<then>
				<property name="startup.options.gui" value=""/>
				<echo message="Starting without -gui mode"/>
			</then>
			<else>
				<property name="startup.options.gui" value="-gui"/>
			</else>
		</if>
		<if>
			<and>
				<equals arg1="${demo.nobrowser}" arg2="true" casesensitive="false"/>
				<isset property="demo.nobrowser"/>
			</and>
			<then>
				<property name="startup.options.nobrowser" value="-nobrowser"/>
				<echo message="Starting in -nobrowser mode"/>
			</then>
			<else>
				<property name="startup.options.nobrowser" value=""/>
			</else>
		</if>
		<if>
			<and>
				<equals arg1="${demo.nofork}" arg2="true" casesensitive="false"/>
				<isset property="demo.nofork"/>
			</and>
			<then>
				<property name="startup.options.nofork" value="-nofork"/>
				<echo message="Starting in -nofork mode"/>
			</then>
			<else>
				<property name="startup.options.nofork" value=""/>
			</else>
		</if>
		<if>
			<or>
				<equals arg1="${cq.version}" arg2="6.3" casesensitive="false"/>
				<equals arg1="${cq.version}" arg2="6.4" casesensitive="false"/>
			</or>
			<then>
				<!-- This ensures the crypto keys are loaded up from the repo during the first startup -->
				<property name="demomachine.jvmargs.startupmode" value="-Dcom.adobe.granite.crypto.file.disable=true"/>
				<echo message="Using key materials from the repo"/>
			</then>
			<else>
				<property name="demomachine.jvmargs.startupmode" value=""/>
			</else>
		</if>
		<property name="startup.options" value="${startup.options.nobrowser} ${startup.options.gui} ${startup.options.nofork}"/>
		<!-- Compute the JVM debug settings when necessary -->
		<if>
			<equals arg1="${demomachine.jvmdebug}" arg2="true" casesensitive="false"/>
			<then>
				<property name="jvmdebug" value="-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=${demo.portdebug}"/>
				<echo message="Setting JVM debug settings on port ${demo.portdebug}"/>
			</then>
			<else>
				<property name="jvmdebug" value="-Dadobe.aem.demo=nodebug"/>
			</else>
		</if>
		<!-- Calculate dynamicmedia runmode for 6.2 and beyond, on Author only -->
		<if>
			<and>
				<equals arg1="${demomachine.dynamicmedia}" arg2="true" casesensitive="false"/>
				<equals arg1="${demo.mode}" arg2="author" casesensitive="false"/>
				<or>
					<equals arg1="${cq.version}" arg2="6.2" casesensitive="false"/>
					<equals arg1="${cq.version}" arg2="6.3" casesensitive="false"/>
				</or>
			</and>
			<then>
				<property name="dynamicmedia.runmode" value=",dynamicmedia"/>
				<echo message="Setting dynamic media runmode"/>
			</then>
			<else>
				<property name="dynamicmedia.runmode" value=""/>
			</else>
		</if>
		<!-- Calculate if we need the nosamples runmode -->
		<if>
			<equals arg1="${demo.nosamples}" arg2="true" casesensitive="false"/>
			<then>
				<property name="nosamples.runmode" value=",nosamples"/>
				<echo message="Setting no samples runmode"/>
			</then>
			<else>
				<property name="nosamples.runmode" value=""/>
			</else>
		</if>
		<if>
			<equals arg1="${demomachine.store}" arg2="crx3,crx3mongo" casesensitive="false"/>
			<!-- AEM6.x MongoMK use case -->
			<then>
				<echo message="Starting in ${demo.mode} run mode, on port ${demo.port} using Mongo DB..."/>
				<antcall target="aem_start_java">
					<param name="aem.start.jvmargs" value="-Doak.mongo.db=${demo.mode} -Doak.mongo.uri=mongodb://${demo.mongo.host}:${demo.mongo.port} ${demomachine.jvmargs} ${demomachine.jvmargs.startupmode}"/>
					<param name="aem.start.args" value="-r ${demo.mode},${demomachine.store}${nosamples.runmode}${dynamicmedia.runmode} ${startup.options}"/>
				</antcall>
			</then>
			<else>
				<if>
					<equals arg1="${demo.license}" arg2="aem6" casesensitive="false"/>
					<then>
						<!-- AEM6.x use case -->
						<echo message="Starting in ${demo.mode} run mode, on port ${demo.port} using ${demo.store}..."/>
						<antcall target="aem_start_java">
							<param name="aem.start.jvmargs" value="${demomachine.jvmargs} ${demomachine.jvmargs.startupmode}"/>
							<param name="aem.start.args" value="-r ${demo.mode},${demomachine.store}${nosamples.runmode}${dynamicmedia.runmode} ${startup.options}"/>
						</antcall>
					</then>
					<else>
						<!-- CQ5.x or AEM6.0 use case-->
						<echo message="Starting in ${demo.mode} run mode, on port ${demo.port} using CRX2..."/>
						<antcall target="aem_start_java">
							<param name="aem.start.jvmargs" value="${demomachine.jvmargs} ${demomachine.jvmargs.startupmode}"/>
							<param name="aem.start.args" value="-r ${demo.mode} ${startup.options}"/>
						</antcall>
					</else>
				</if>
			</else>
		</if>
	</target>
	<target name="aem_start_java">
		<java dir="${demos}/${demo.build}/${demo.instance}" jar="${demos}/${demo.build}/${demo.instance}/aem-${demo.mode}-p${demo.port}.jar" fork="true" spawn="true">
			<jvmarg value="-Xms${AdobeAEM.memorymin}"/>
			<jvmarg value="-Xmx${AdobeAEM.memorymax}"/>
			<jvmarg value="-XX:MaxPermSize=256m"/>
			<jvmarg value="${jvmdebug}"/>
			<jvmarg line="${aem.start.jvmargs}"/>
			<arg line="${aem.start.args}"/>
		</java>
	</target>
	<!-- Target for starting the JAMES smtp server -->
	<target name="james_start" depends="os_detect">
		<echo message="Starting the James SMTP/POP server..."/>
		<chmod dir="${james}/bin" perm="ugo+rx" includes="*.sh"/>
		<if>
			<and>
				<resourceexists>
					<file file="${james}/bin/run.${os.cmd}"/>
				</resourceexists>
				<not>
					<or>
						<socket server="${demo.emailserver.hostname}" port="${demo.emailserver.smtp}"/>
						<socket server="${demo.emailserver.hostname}" port="${demo.emailserver.jmx}"/>
						<socket server="${demo.emailserver.hostname}" port="${demo.emailserver.pop}"/>
					</or>
				</not>
			</and>
			<then>
				<exec executable="${james}/bin/run.${os.cmd}" dir="${james}/bin" spawn="true"/>
				<sleep seconds="2"/>
				<waitfor maxwait="300" maxwaitunit="second" checkevery="2" checkeveryunit="second">
					<and>
						<socket server="${demo.emailserver.hostname}" port="${demo.emailserver.smtp}"/>
						<socket server="${demo.emailserver.hostname}" port="${demo.emailserver.jmx}"/>
						<socket server="${demo.emailserver.hostname}" port="${demo.emailserver.pop}"/>
					</and>
				</waitfor>
			</then>
		</if>
	</target>
	<!-- Target for listing the JAMES smtp server configuration -->
	<target name="james_config" depends="os_detect">
		<if>
			<resourceexists>
				<file file="${james}/bin/james-cli.${os.cmd}"/>
			</resourceexists>
			<then>
				<echo message="Listing the registered domains..."/>
				<exec executable="${james}/bin/james-cli.${os.cmd}" dir="${james}/bin" spawn="false">
					<arg line="-h ${demo.emailserver.hostname} -p ${demo.emailserver.jmx} listdomains"/>
				</exec>
				<echo message="Listing the registered users..."/>
				<exec executable="${james}/bin/james-cli.${os.cmd}" dir="${james}/bin" spawn="false">
					<arg line="-h ${demo.emailserver.hostname} -p ${demo.emailserver.jmx} listusers"/>
				</exec>
				<echo message="Listing the registered mappings..."/>
				<exec executable="${james}/bin/james-cli.${os.cmd}" dir="${james}/bin" spawn="false">
					<arg line="-h ${demo.emailserver.hostname} -p ${demo.emailserver.jmx} listmappings"/>
				</exec>
			</then>
		</if>
	</target>
	<!-- Target for installing and configuring the JAMES smtp server  -->
	<target name="install_james" depends="james_stop">
		<if>
			<and>
				<not>
					<socket server="${demo.emailserver.hostname}" port="${demo.emailserver.smtp}"/>
				</not>
				<not>
					<socket server="${demo.emailserver.hostname}" port="${demo.emailserver.pop}"/>
				</not>
				<not>
					<socket server="${demo.emailserver.hostname}" port="${demo.emailserver.jmx}"/>
				</not>
			</and>
			<then>
				<delete dir="${james}"/>
				<unzip src="${dist}/downloads/james.zip" dest="."/>
				<move file="./apache-james-3.0-${demo.emailserver.version}" tofile="${james}"/>
				<chmod dir="${james}/bin" perm="ugo+rx" includes="*"/>
				<copy todir="${james}/conf" overwrite="true">
					<fileset dir="${dist}/james">
						<include name="*.conf"/>
						<include name="*.properties"/>
					</fileset>
				</copy>
				<copy todir="${james}/conf/lib" overwrite="true">
					<fileset dir="${dist}/james">
						<include name="*.jar"/>
					</fileset>
				</copy>
				<replace file="${james}/conf/smtpserver.conf" token="@@PORT_SMTP@@" value="${demo.emailserver.smtp}"/>
				<replace file="${james}/conf/pop3server.conf" token="@@PORT_POP@@" value="${demo.emailserver.pop}"/>
				<replace file="${james}/conf/jmx.properties" token="@@PORT_JMX@@" value="${demo.emailserver.jmx}"/>
				<replace file="${james}/conf/imapserver.conf" token="@@PORT_IMAP@@" value="${demo.emailserver.imap}"/>
				<antcall target="james_setup"/>
			</then>
		</if>
	</target>
	<target name="james_setup" depends="os_detect">
		<if>
			<resourceexists>
				<file file="${james}/bin/james-cli.${os.cmd}"/>
			</resourceexists>
			<then>
				<antcall target="james_start"/>
				<echo message="Loading up domains..."/>
				<propertyselector property="constituents" match="demo.emailserver.domains.([^\.]*)" select="\1" casesensitive="false"/>
				<if>
					<and>
						<isset property="constituents"/>
						<not>
							<equals arg1="${constituents}" arg2=""/>
						</not>
					</and>
					<then>
						<foreach list="${constituents}" target="james_install_domain" param="domain.id"/>
					</then>
				</if>
				<echo message="Loading up users..."/>
				<propertyselector property="users" match="demo.emailserver.users.([^\.]*)" select="\1" casesensitive="false"/>
				<if>
					<and>
						<isset property="users"/>
						<not>
							<equals arg1="${users}" arg2=""/>
						</not>
					</and>
					<then>
						<foreach list="${users}" target="james_install_user" param="user.id"/>
					</then>
				</if>
			</then>
		</if>
		<antcall target="james_stop"/>
	</target>
	<!-- Target for detecting OS extension -->
	<target name="os_detect">
		<if>
			<os family="unix"/>
			<then>
				<property name="os.cmd" value="sh"/>
			</then>
			<else>
				<property name="os.cmd" value="bat"/>
			</else>
		</if>
	</target>
	<!-- Target for registering a new domain -->
	<target name="james_install_domain" depends="os_detect">
		<propertycopy property="domain.value" from="demo.emailserver.domains.${domain.id}"/>
		<echo message="Loading up domain ${domain.value}..."/>
		<exec executable="${james}/bin/james-cli.${os.cmd}" dir="${james}/bin" spawn="false">
			<arg line="-h ${demo.emailserver.hostname} -p ${demo.emailserver.jmx} adddomain ${domain.value}"/>
		</exec>
	</target>
	<!-- Target for registering a new user -->
	<target name="james_install_user" depends="os_detect">
		<propertycopy property="user.value" from="demo.emailserver.users.${user.id}"/>
		<echo message="Loading up user ${user.value}..."/>
		<exec executable="${james}/bin/james-cli.${os.cmd}" dir="${james}/bin" spawn="false">
			<arg line="-h ${demo.emailserver.hostname} -p ${demo.emailserver.jmx} adduser ${user.value} ${demo.emailserver.password}"/>
		</exec>
	</target>
	<!-- Target for killing the JAMES smtp server, if needed -->
	<target name="james_stop_unix" if="isUnix" depends="permissions">
		<exec executable="${bin}/kill.sh" dir="${bin}" spawn="false">
			<arg line="james"/>
		</exec>
	</target>
	<target name="james_stop_win" if="isWindows" depends="permissions">
		<echo message="Stopping James on Windows is not implemented yet..."/>
	</target>
	<!-- Target for downloading the SOLR software -->
	<target name="download_solr">
		<echo message="Downloading Apache SOLR (from Apache Archives, might be slow...)"/>
		<mkdir dir="${dist}/downloads"/>
		<echo message="Downloading http://archive.apache.org/dist/lucene/solr/${demo.solr}/solr-${demo.solr}.tgz"/>
		<exec executable="curl">
			<arg line="-s -o '${dist}/downloads/solr.tgz' http://archive.apache.org/dist/lucene/solr/${demo.solr}/solr-${demo.solr}.tgz"/>
		</exec>
	</target>
	<!-- Target for installing the SOLR software -->
	<target name="install_solr" depends="solr_stop">
		<echo message="Installing Apache SOLR"/>
		<delete dir="${solr}"/>
		<mkdir dir="${solr}"/>
		<gunzip src="${dist}/downloads/solr.tgz" dest="${dist}/downloads/solr.tar"/>
		<untar src="${dist}/downloads/solr.tar" dest="."/>
		<move file="./solr-${demo.solr}" tofile="${solr}"/>
		<chmod dir="${solr}/bin" perm="ugo+rx" includes="*"/>
		<copy todir="${solr}/example/solr/collection1/conf" overwrite="true">
			<fileset dir="${dist}/community/solr">
				<include name="*"/>
			</fileset>
		</copy>
	</target>
	<!-- Target for starting the SOLR server -->
	<target name="solr_start">
		<if>
			<socket server="${demo.solr.hostname}" port="${demo.solr.port}"/>
			<then>
				<echo message="The SOLR server is already started..."/>
			</then>
			<else>
				<if>
					<and>
						<resourceexists>
							<file file="${solr}/bin/solr"/>
						</resourceexists>
						<os family="unix"/>
					</and>
					<then>
						<echo message="Starting the SOLR server (Unix)..."/>
						<exec executable="${solr}/bin/solr" dir="${solr}/bin" spawn="true">
							<arg line="start"/>
						</exec>
					</then>
				</if>
				<if>
					<and>
						<resourceexists>
							<file file="${solr}/bin/solr.cmd"/>
						</resourceexists>
						<os family="windows"/>
					</and>
					<then>
						<echo message="Starting the SOLR server (Windows)..."/>
						<exec executable="${solr}/bin/solr.cmd" dir="${solr}/bin" spawn="true">
							<arg line="start"/>
						</exec>
					</then>
				</if>
				<sleep seconds="2"/>
				<waitfor maxwait="300" maxwaitunit="second" checkevery="2" checkeveryunit="second">
					<socket server="${demo.solr.hostname}" port="${demo.solr.port}"/>
				</waitfor>
			</else>
		</if>
	</target>
	<!-- Target for stopping the SOLR server -->
	<target name="solr_stop">
		<if>
			<and>
				<socket server="${demo.solr.hostname}" port="${demo.solr.port}"/>
				<resourceexists>
					<file file="${solr}/bin/solr"/>
				</resourceexists>
			</and>
			<then>
				<echo message="Stopping the SOLR server..."/>
				<if>
					<os family="unix"/>
					<then>
						<exec executable="${solr}/bin/solr" dir="${solr}/bin" failonerror="false" failifexecutionfails="false" spawn="true">
							<arg line="stop -all"/>
						</exec>
					</then>
				</if>
				<if>
					<os family="windows"/>
					<then>
						<exec executable="${solr}/bin/solr.cmd" dir="${solr}/bin" failonerror="false" failifexecutionfails="false" spawn="true">
							<arg line="stop -all"/>
						</exec>
					</then>
				</if>
				<sleep seconds="2"/>
				<waitfor maxwait="300" maxwaitunit="second" checkevery="2" checkeveryunit="second">
					<not>
						<socket server="${demo.solr.hostname}" port="${demo.solr.port}"/>
					</not>
				</waitfor>
				<antcall target="solr_stop_unix"/>
			</then>
		</if>
	</target>
	<!-- Target for killing the SOLR server, if needed -->
	<target name="solr_stop_unix" if="isUnix" depends="permissions">
		<exec executable="${bin}/kill.sh" dir="${bin}" spawn="false">
			<arg line="solr"/>
		</exec>
	</target>
	<!-- Target for downloading the SOLR configuration files locally -->
	<target name="solr_schemas" depends="version,configuration">
		<echo message="Downloading the SOLR schema from /libs/social/config/datastore/msrp"/>
		<exec executable="curl">
			<arg line="-u admin:${demo.admin.password}"/>
			<arg line="-s -o '${dist}/community/solr/schema.xml' http://${demo.host}:${demomachine.authorport}/libs/social/config/datastore/msrp/solr4/schema.xml"/>
		</exec>
		<exec executable="curl">
			<arg line="-u admin:${demo.admin.password}"/>
			<arg line="-s -o '${dist}/community/solr/solrconfig.xml' http://${demo.host}:${demomachine.authorport}/libs/social/config/datastore/msrp/solr4/solrconfig.xml"/>
		</exec>
	</target>
	<!-- Target for stopping the JAMES smtp server -->
	<target name="james_stop" depends="os_detect">
		<if>
			<and>
				<resourceexists>
					<file file="${james}/bin/run.${os.cmd}"/>
				</resourceexists>
				<socket server="${demo.emailserver.hostname}" port="${demo.emailserver.smtp}"/>
			</and>
			<then>
				<echo message="Stopping the James SMTP/POP server..."/>
				<antcall target="james_stop_unix"/>
				<antcall target="james_stop_win"/>
			</then>
		</if>
	</target>
	<!-- Target for starting the MYSQL server -->
	<target name="mysql_start">
		<if>
			<and>
				<equals arg1="${demo.mysql.external}" arg2="false" casesensitive="false"/>
				<resourceexists>
					<file file="${mysql}/bin/mysql"/>
				</resourceexists>
			</and>
			<then>
				<if>
					<socket server="${demo.mysql.host}" port="${demo.mysql.port}"/>
					<then>
						<echo message="The MySQL server is already started..."/>
					</then>
					<else>
						<echo message="Starting the MySQL server..."/>
						<exec executable="./bin/mysqld" dir="${mysql}" spawn="true">
							<arg line="--basedir='${mysql}' --datadir='${mysql}/data/'"/>
						</exec>
						<sleep seconds="2"/>
						<waitfor maxwait="300" maxwaitunit="second" checkevery="2" checkeveryunit="second">
							<socket server="${demo.mysql.host}" port="${demo.mysql.port}"/>
						</waitfor>
					</else>
				</if>
			</then>
		</if>
	</target>
	<!-- Target for stopping the MySQL server -->
	<target name="mysql_stop">
		<if>
			<and>
				<equals arg1="${demo.mysql.external}" arg2="false" casesensitive="false"/>
				<resourceexists>
					<file file="${mysql}/bin/mysql"/>
				</resourceexists>
			</and>
			<then>
				<if>
					<!-- Only try to stop if really running -->
					<socket server="${demo.host}" port="${demo.mysql.port}"/>
					<then>
						<echo message="Stopping the MySQL server..."/>
						<exec executable="./bin/mysqladmin" dir="${mysql}" failonerror="false" failifexecutionfails="false" spawn="true">
							<arg line="-u ${demo.mysql.user} --host=${demo.mysql.host} --port=${demo.mysql.port} --password=${demo.mysql.password} shutdown"/>
						</exec>
						<sleep seconds="2"/>
						<waitfor maxwait="300" maxwaitunit="second" checkevery="2" checkeveryunit="second">
							<not>
								<socket server="${demo.mysql.host}" port="${demo.mysql.port}"/>
							</not>
						</waitfor>
						<antcall target="mysql_stop_unix"/>
					</then>
				</if>
			</then>
		</if>
	</target>
	<!-- Target for killing the MySQL server, if needed for some reason -->
	<target name="mysql_stop_unix" if="isUnix" depends="permissions">
		<exec executable="${bin}/kill.sh" dir="${bin}" spawn="false">
			<arg line="mysql"/>
		</exec>
	</target>
	<!-- Target for configuring the MYSQL server -->
	<target name="community_mysql_schema">
		<antcall target="mysql_start"/>
		<if>
			<socket server="${demo.mysql.host}" port="${demo.mysql.port}"/>
			<then>
				<if>
					<and>
						<equals arg1="${demo.mysql.external}" arg2="false" casesensitive="false"/>
						<resourceexists>
							<file file="${mysql}/bin/mysql"/>
						</resourceexists>
					</and>
					<then>
						<property name="mysql.exec" value="${mysql}/bin/mysql"/>
					</then>
					<else>
						<property name="mysql.exec" value="${demo.mysql.path}"/>
					</else>
				</if>
				<propertyregex property="mysql.prefix" input="${demo.build}" regexp="-" replace="" global="true" defaultvalue="${demo.build}"/>
				<echo message="Configuring the MySQL server for Reporting..."/>
				<antcall target="mysql_schema_instance">
					<param name="mysql.path" value="${dist}/rdb"/>
					<param name="mysql.file" value="database_schema"/>
					<param name="mysql.schema" value="reporting"/>
					<param name="mysql.db" value=""/>
				</antcall>
				<antcall target="mysql_schema_instance">
					<param name="mysql.path" value="${dist}/rdb"/>
					<param name="mysql.file" value="database_data"/>
					<param name="mysql.schema" value="reporting"/>
					<param name="mysql.db" value="${mysql.prefix}reporting"/>
				</antcall>
				<if>
					<equals arg1="${demo.communities.scorm}" arg2="true" casesensitive="false"/>
					<then>
						<antcall target="mysql_schema_instance">
							<param name="mysql.path" value="${dist}/rdb"/>
							<param name="mysql.file" value="database_scormengine"/>
							<param name="mysql.schema" value="scorm"/>
							<param name="mysql.db" value=""/>
						</antcall>
						<antcall target="mysql_schema_instance">
							<param name="mysql.path" value="${dist}/rdb"/>
							<param name="mysql.file" value="database_scorm_integration"/>
							<param name="mysql.schema" value="scorm"/>
							<param name="mysql.db" value=""/>
						</antcall>
					</then>
				</if>
			</then>
		</if>
	</target>
	<!-- Target for schema substitution -->
	<target name="mysql_schema_instance">
		<echo message="Downloading the MySQL schema from /libs/social/config/${mysql.schema}/${mysql.file}.sql"/>
		<exec executable="curl">
			<arg line="-u admin:${demo.admin.password}"/>
			<arg line="-s -o '${mysql.path}/${mysql.file}.sql' http://${demo.host}:${demomachine.authorport}/libs/social/config/${mysql.schema}/${mysql.file}.sql"/>
		</exec>
		<replace file="${mysql.path}/${mysql.file}.sql" token="enablementdb" value="${mysql.prefix}${mysql.schema}"/>
		<replace file="${mysql.path}/${mysql.file}.sql" token="ScormEngineDB" value="${mysql.prefix}${mysql.schema}"/>
		<echo message="Loading SQL file into internal MySQL server..."/>
		<exec executable="${mysql.exec}" spawn="false">
			<arg line="-u ${demo.mysql.user} --host=${demo.mysql.host} --port=${demo.mysql.port} --port=${demo.mysql.port} --password=${demo.mysql.password} -e 'source ${mysql.path}/${mysql.file}.sql' ${mysql.db}"/>
		</exec>
		<delete file="${mysql.path}/${mysql.file}.sql"/>
	</target>
	<!-- Target for starting the MONGO server -->
	<target name="mongo_start">
		<if>
			<and>
				<equals arg1="${demo.mongo.external}" arg2="false" casesensitive="false"/>
				<resourceexists>
					<file file="${mongodb}/bin/mongod"/>
				</resourceexists>
			</and>
			<then>
				<if>
					<socket server="${demo.host}" port="${demo.mongo.port}"/>
					<then>
						<echo message="The Mongo DB server is already started..."/>
					</then>
					<else>
						<mkdir dir="${mongodb}/data/communities"/>
						<mkdir dir="${infralogs}/mongo"/>
						<echo message="Starting the Mongo DB server..."/>
						<exec executable="${mongodb}/bin/mongod" dir="${mongodb}/bin" spawn="true">
							<arg line="--dbpath ${mongodb}/data/communities"/>
							<arg line="--port ${demo.mongo.port}"/>
							<arg line="--fork"/>
							<arg line="--logpath ${infralogs}/mongo/mongo.log"/>
						</exec>
						<sleep seconds="2"/>
						<waitfor maxwait="300" maxwaitunit="second" checkevery="2" checkeveryunit="second">
							<socket server="${demo.host}" port="${demo.mongo.port}"/>
						</waitfor>
					</else>
				</if>
			</then>
			<else>
				<if>
					<equals arg1="${demo.mongo.service}" arg2="true" casesensitive="false"/>
					<then>
						<exec executable="service" spawn="false">
							<arg line="mongod start"/>
						</exec>
					</then>
				</if>
			</else>
		</if>
	</target>
	<!-- Target for stopping the MONGO server -->
	<target name="mongo_stop">
		<if>
			<and>
				<equals arg1="${demo.mongo.external}" arg2="false" casesensitive="false"/>
				<resourceexists>
					<file file="${mongodb}/bin/mongod"/>
				</resourceexists>
			</and>
			<then>
				<if>
					<!-- Only try to stop if really running -->
					<socket server="${demo.host}" port="${demo.mongo.port}"/>
					<then>
						<echo message="Stopping the Mongo DB server..."/>
						<exec executable="${mongodb}/bin/mongo" dir="${mongodb}/bin" spawn="true">
							<arg line="admin"/>
							<arg line="--eval 'db.shutdownServer()'"/>
						</exec>
						<sleep seconds="2"/>
						<waitfor maxwait="300" maxwaitunit="second" checkevery="2" checkeveryunit="second">
							<not>
								<socket server="${demo.host}" port="${demo.mongo.port}"/>
							</not>
						</waitfor>
						<antcall target="mongo_stop_unix"/>
					</then>
				</if>
			</then>
			<else>
				<if>
					<equals arg1="${demo.mongo.service}" arg2="true" casesensitive="false"/>
					<then>
						<exec executable="service" spawn="false">
							<arg line="mongod stop"/>
						</exec>
					</then>
				</if>
			</else>
		</if>
	</target>
	<!-- Target for killing the SOLR server, if needed -->
	<target name="mongo_stop_unix" if="isUnix" depends="permissions">
		<exec executable="${bin}/kill.sh" dir="${bin}" spawn="false">
			<arg line="'${mongodb}/bin'"/>
		</exec>
	</target>
	<!-- Target for deleting a specific demo build -->
	<target name="cleanup" depends="configuration">
		<antcall target="uninstall_item"/>
		<if>
			<resourceexists>
				<file file="${demos}/${demo.build}/demobuild.properties"/>
			</resourceexists>
			<then>
				<move file="${demos}/${demo.build}/demobuild.properties" todir="${demos}" overwrite="true"/>
			</then>
		</if>
		<delete dir="${demos}/${demo.build}" failonerror="false" includeemptydirs="true"/>
		<mkdir dir="${demos}/${demo.build}"/>
		<if>
			<resourceexists>
				<file file="${demos}/demobuild.properties"/>
			</resourceexists>
			<then>
				<move file="${demos}/demobuild.properties" todir="${demos}/${demo.build}" overwrite="true"/>
			</then>
		</if>
		<delete dir="${logs}" failonerror="false"/>
	</target>
	<!-- Target for uninstalling a specific demo build -->
	<target name="uninstall" depends="configuration">
		<antcall target="uninstall_item"/>
		<delete dir="${demos}/${demo.build}" failonerror="false" includeemptydirs="true"/>
		<delete dir="${logs}" failonerror="false"/>
		<delete dir="./logs/build" failonerror="false"/>
	</target>
	<!-- Target for stopping and cleaning up bits -->
	<target name="uninstall_item">
		<echo message="Stopping and removing demo instance for ${demo.build}"/>
		<antcall target="stop"/>
		<!-- check if we need to clean up the associated Mongo DB -->
		<if>
			<or>
				<equals arg1="${demomachine.store}" arg2="crx3,crx3mongo" casesensitive="false"/>
				<equals arg1="${demomachine.srp}" arg2="MSRP" casesensitive="false"/>
			</or>
			<then>
				<!-- Let's make sure Mongo is started properly so that we can drop the database if already in there -->
				<antcall target="mongo_start"/>
				<propertyregex property="mongo.prefix" input="${demo.build}" regexp="-" replace="" global="true" defaultvalue="${demo.build}"/>
				<if>
					<equals arg1="${demo.mongo.external}" arg2="false" casesensitive="false"/>
					<then>
						<exec executable="${mongodb}/bin/mongo" dir="${mongodb}/bin" spawn="true">
							<arg line="${mongo.prefix} --eval &quot;db.dropDatabase()&quot;"/>
						</exec>
					</then>
					<else>
						<exec executable="${demo.mongo.path}" spawn="true">
							<arg line="${mongo.prefix} --eval &quot;db.dropDatabase()&quot;"/>
						</exec>
					</else>
				</if>
				<sleep seconds="1"/>
				<antcall target="mongo_stop"/>
			</then>
		</if>
		<!-- check if we need to clean up the associated SOLR index -->
		<if>
			<or>
				<equals arg1="${demomachine.srp}" arg2="msrp" casesensitive="false"/>
				<equals arg1="${demomachine.srp}" arg2="dsrp" casesensitive="false"/>
			</or>
			<then>
				<antcall target="solr_stop"/>
				<delete dir="${solr}/example/solr/${demo.build}/data"/>
			</then>
		</if>
		<!-- check if we need to clean up the associated MySQL database -->
		<if>
			<equals arg1="${demomachine.communities.enablement}" arg2="true" casesensitive="false"/>
			<then>
				<antcall target="mysql_stop"/>
			</then>
		</if>
	</target>
	<!-- Target for installing the Assets demo -->
	<target name="assets" depends="version,configuration">
		<antcall target="demomachine_analytics_assets"/>
		<antcall target="dynamic_media">
			<param name="port" value="${demomachine.authorport}"/>
		</antcall>
		<antcall target="assets_homepage">
			<param name="port" value="${demomachine.authorport}"/>
		</antcall>
		<antcall target="assets_versions">
			<param name="port" value="${demomachine.authorport}"/>
		</antcall>
		<antcall target="assets_insights">
			<param name="port" value="${demomachine.authorport}"/>
		</antcall>
		<foreach target="package_author" param="package">
			<path id="assets.packages">
				<fileset dir="${dist}" casesensitive="yes">
					<include name="assets-packages/all/*.zip"/>
					<include name="assets-packages/${demo.packages}/*.zip"/>
				</fileset>
			</path>
		</foreach>
		<antcall target="ffmpeg">
			<param name="port" value="${demomachine.authorport}"/>
		</antcall>
		<antcall target="assets_smarttags">
			<param name="port" value="${demomachine.authorport}"/>
		</antcall>
		<foreach target="package_author" param="package">
			<path id="assets.packages">
				<fileset dir="${dist}" casesensitive="yes">
					<include name="assets/all/*.zip"/>
					<include name="assets/${demo.packages}/*.zip"/>
				</fileset>
			</path>
		</foreach>
	</target>
	<!-- Target for installing the Forms demo -->
	<target name="forms" depends="version,configuration">
		<antcall target="demomachine_analytics_forms"/>
		<!-- set the JVM args when the Adobe Target integration is enabled -->
		<if>
			<equals arg1="${AdobeTarget.install}" arg2="true" casesensitive="false"/>
			<then>
				<propertyfile file="${demos}/${demo.build}/demomachine.properties">
					<entry key="demomachine.jvmargs" value="${demo.forms.jvmargs}"/>
				</propertyfile>
			</then>
		</if>
		<!-- make sure we install the add-on first -->
		<foreach target="package_author" param="package">
			<path id="forms.packages">
				<fileset dir="${dist}" casesensitive="yes">
					<include name="forms-packages/${demo.packages}/*.zip"/>
				</fileset>
			</path>
		</foreach>
		<echo message="Waiting 1 minute for Forms bundles to be fully started"/>
		<sleep seconds="60"/>
		<!-- restarting the AEM instances -->
		<antcall target="restart"/>
		<!-- then the reference sites and the demo packages -->
		<foreach target="package_author" param="package">
			<path id="forms.packages">
				<fileset dir="${dist}" casesensitive="yes">
					<include name="forms/all/*.zip"/>
					<include name="forms/${demo.packages}/*.zip"/>
					<include name="forms-demo/all/*.zip"/>
					<include name="forms-demo/${demo.packages}/*.zip"/>
				</fileset>
			</path>
		</foreach>
		<!-- then configure the Adobe Target URL -->
		<if>
			<equals arg1="${AdobeTarget.install}" arg2="true" casesensitive="false"/>
			<then>
				<exec executable="curl">
					<arg line="--output '${logs}/${demomachine.authorport}_targetforms.html'"/>
					<arg line="-u admin:${demo.admin.password}"/>
					<arg line="-X POST"/>
					<arg line="--globoff"/>
					<arg line="-d apply=true"/>
					<arg line="-d action=ajaxConfigManager"/>
					<arg line="-d $location="/>
					<arg line="-d formsmanagerconfig.targetframework=/etc/cloudservices/testandtarget/demomachine/demomachine/jcr:content/public/mappings"/>
					<arg line="-d formsmanagerconfig.targetURLs=http://${demo.host}:${demomachine.authorport}"/>
					<arg line="-d propertylist=formsmanagerconfig.targetframework,formsmanagerconfig.targetURLs"/>
					<arg line="http://${demo.host}:${demomachine.authorport}/system/console/configMgr/com.adobe.aem.formsndocuments.testandtarget.config.FMTargetConfiguration"/>
				</exec>
			</then>
		</if>
		<!-- then associate the cloud services -->
		<if>
			<equals arg1="${demo.external}" arg2="false" casesensitive="false"/>
			<then>
				<antcall target="cloudservices">
					<param name="port" value="${demomachine.authorport}"/>
					<param name="path" value="/content/geometrixx-gov/en/jcr:content"/>
				</antcall>
				<antcall target="cloudservices">
					<param name="port" value="${demomachine.authorport}"/>
					<param name="path" value="/content/geometrixx-finance/global/en/jcr:content"/>
				</antcall>
			</then>
		</if>
		<waitfor maxwait="300" maxwaitunit="second" checkevery="5" checkeveryunit="second">
			<http url="http://${demo.host}:${demomachine.authorport}/libs/granite/core/content/login.html" errorsbeginat="400"/>
		</waitfor>
	</target>
	<!-- Target for installing the Packages demo -->
	<target name="packages" depends="version,configuration">
		<foreach target="package_author" param="package">
			<path id="standard.packages">
				<fileset dir="${packages}" casesensitive="yes">
					<include name="all/all/**/*.zip"/>
					<include name="all/author/**/*.zip"/>
					<include name="${demo.packages}/all/**/*.zip"/>
					<include name="${demo.packages}/author/**/*.zip"/>
				</fileset>
			</path>
		</foreach>
		<if>
			<socket server="${demo.host}" port="${demomachine.publishport}"/>
			<then>
				<foreach target="package_publish" param="package">
					<path id="publish.packages">
						<fileset dir="${packages}" casesensitive="yes">
							<include name="all/all/**/*.zip"/>
							<include name="all/publish/**/*.zip"/>
							<include name="${demo.packages}/all/**/*.zip"/>
							<include name="${demo.packages}/publish/**/*.zip"/>
						</fileset>
					</path>
				</foreach>
				<sleep seconds="30"/>
			</then>
		</if>
		<if>
			<socket server="${demo.host}" port="${demomachine.farmport}"/>
			<then>
				<foreach target="package_farm" param="package">
					<path id="farm.packages">
						<fileset dir="${packages}" casesensitive="yes">
							<include name="all/all/**/*.zip"/>
							<include name="all/farm/**/*.zip"/>
							<include name="${demo.packages}/all/**/*.zip"/>
							<include name="${demo.packages}/farm/**/*.zip"/>
						</fileset>
					</path>
				</foreach>
				<sleep seconds="30"/>
			</then>
		</if>
	</target>
	<!-- Target for installing the Sites demo -->
	<target name="sites" depends="version,configuration">
		<foreach target="package_author" param="package">
			<path id="sites.packages">
				<fileset dir="${dist}" casesensitive="yes">
					<include name="sites-packages/all/*.zip"/>
					<include name="sites-packages/${demo.packages}/*.zip"/>
					<include name="sites/all/*.zip"/>
					<include name="sites/${demo.packages}/*.zip"/>
				</fileset>
			</path>
		</foreach>
		<antcall target="globallink">
			<param name="port" value="${demomachine.authorport}"/>
		</antcall>
		<if>
			<socket server="${demo.host}" port="${demomachine.publishport}"/>
			<then>
				<foreach target="package_publish" param="package">
					<path id="sites.packages">
						<fileset dir="${dist}" casesensitive="yes">
							<include name="sites-packages/all/*.zip"/>
							<include name="sites-packages/${demo.packages}/*.zip"/>
							<include name="sites/all/*.zip"/>
							<include name="sites/${demo.packages}/*.zip"/>
						</fileset>
					</path>
				</foreach>
			</then>
		</if>
		<if>
			<socket server="${demo.host}" port="${demomachine.farmport}"/>
			<then>
				<foreach target="package_farm" param="package">
					<path id="sites.packages">
						<fileset dir="${dist}" casesensitive="yes">
							<include name="sites-packages/all/*.zip"/>
							<include name="sites-packages/${demo.packages}/*.zip"/>
							<include name="sites/all/*.zip"/>
							<include name="sites/${demo.packages}/*.zip"/>
						</fileset>
					</path>
				</foreach>
			</then>
		</if>
	</target>
	<!-- Target for installing the Commerce demo -->
	<target name="commerce" depends="version,configuration">
		<antcall target="demomachine_analytics_commerce"/>
		<foreach target="package_author" param="package">
			<path id="sites.packages">
				<fileset dir="${dist}/commerce" casesensitive="yes">
					<include name="all/*.zip"/>
					<include name="${demo.packages}/*.zip"/>
				</fileset>
			</path>
		</foreach>
		<!-- This is for WebSphere Commerce only -->
		<exec executable="curl">
			<arg line="--output '${logs}/${demomachine.authorport}_commerce_websphere.html'"/>
			<arg line="-u admin:${demo.admin.password}"/>
			<arg line="-X POST"/>
			<arg line="--globoff"/>
			<arg line="-d apply=true"/>
			<arg line="-d action=ajaxConfigManager"/>
			<arg line="-d $location="/>
			<arg line="-d wc.api.server.url=${demo.commerce.websphere.host}"/>
			<arg line="-d wc.api.wcs.rest_endpoint=/wcs/resources/store"/>
			<arg line="-d wc.api.search.rest_endpoint=/search/resources/store"/>
			<arg line="-d wc.api.ping.rest_endpoint=/wcs/resources/api"/>
			<arg line="-d wc.api.connections.max=20"/>
			<arg line="-d wc.api.connections.max.host=10"/>
			<arg line="-d wc.server.ssl.trust_all_certs=true"/>
			<arg line="-d wc.server.ssl.trust_all_certs=false"/>
			<arg line="-d propertylist=wc.api.server.url,wc.api.wcs.rest_endpoint,wc.api.search.rest_endpoint,wc.api.ping.rest_endpoint,wc.api.connections.max,wc.api.connections.max.host,wc.server.ssl.trust_all_certs"/>
			<arg line="http://${demo.host}:${demomachine.authorport}/system/console/configMgr/com.adobe.cq.commerce.websphere.connection.impl.WCAPIClientImpl"/>
		</exec>
	</target>
	<!-- Target for installing the Apps demo -->
	<target name="apps" depends="version,configuration">
		<antcall target="mobileservices">
			<param name="port" value="${demomachine.authorport}"/>
		</antcall>
		<antcall target="phonegapbuild">
			<param name="port" value="${demomachine.authorport}"/>
		</antcall>
		<antcall target="dps">
			<param name="port" value="${demomachine.authorport}"/>
		</antcall>
		<foreach target="package_author" param="package">
			<path id="apps.packages">
				<fileset dir="${dist}" casesensitive="yes">
					<include name="apps-packages/all/*.zip"/>
					<include name="apps-packages/${demo.packages}/*.zip"/>
					<include name="apps/all/*.zip"/>
					<include name="apps/${demo.packages}/*.zip"/>
				</fileset>
			</path>
		</foreach>
		<if>
			<equals arg1="${cq.version}" arg2="6.1" casesensitive="false"/>
			<then>
				<echo message="Waiting 2 minutes for the Apps packages to be fully deployed..."/>
				<sleep seconds="120"/>
			</then>
		</if>
	</target>
	<!-- Targets for downloading release versions of QuickStart -->
	<target name="download_aem62" depends="download_prereqs">
		<echo message="Downloading AEM 6.2"/>
		<mkdir dir="${dist}/downloads"/>
		<exec executable="curl">
			<arg line="-s -L -o '${dist}/downloads/aem62.jar' ${demo.download.aem.artifactory}${demo.download.aem.62}"/>
		</exec>
		<echo message="AEM 6.2 successfully downloaded in /dist/bin"/>
		<move file="${dist}/downloads/aem62.jar" todir="${dist}/bin"/>
	</target>
	<target name="download_aem61" depends="download_prereqs">
		<echo message="Downloading AEM 6.1"/>
		<mkdir dir="${dist}/downloads"/>
		<exec executable="curl">
			<arg line="-s -L -o '${dist}/downloads/aem61.jar' ${demo.download.aem.artifactory}${demo.download.aem.61}"/>
		</exec>
		<echo message="AEM 6.1 successfully downloaded in /dist/bin"/>
		<move file="${dist}/downloads/aem61.jar" todir="${dist}/bin"/>
	</target>
	<target name="download_aem60" depends="download_prereqs">
		<echo message="Downloading AEM 6.0"/>
		<mkdir dir="${dist}/downloads"/>
		<exec executable="curl">
			<arg line="-s -L -o '${dist}/downloads/aem60.jar' ${demo.download.aem.artifactory}${demo.download.aem.60}"/>
		</exec>
		<echo message="AEM 6.0 successfully downloaded in /dist/bin"/>
		<move file="${dist}/downloads/aem60.jar" todir="${dist}/bin"/>
	</target>
	<target name="download_cq561" depends="download_prereqs">
		<echo message="Downloading CQ 5.6.1"/>
		<mkdir dir="${dist}/downloads"/>
		<exec executable="curl">
			<arg line="-s -L -o '${dist}/downloads/cq561.jar' ${demo.download.aem.artifactory}${demo.download.aem.561}"/>
		</exec>
		<echo message="CQ 5.6.1 successfully downloaded in /dist/bin"/>
		<move file="${dist}/downloads/cq561.jar" todir="${dist}/bin"/>
	</target>
	<target name="download_cq56" depends="download_prereqs">
		<echo message="Downloading CQ 5.6"/>
		<mkdir dir="${dist}/downloads"/>
		<exec executable="curl">
			<arg line="-s -L -o '${dist}/downloads/cq56.jar' ${demo.download.aem.artifactory}${demo.download.aem.56}"/>
		</exec>
		<echo message="CQ 5.6 successfully downloaded in /dist/bin"/>
		<move file="${dist}/downloads/cq56.jar" todir="${dist}/bin"/>
	</target>
	<!-- Download demo extensions -->
	<target name="download_all">
		<antcall target="download_hotfixes_packages"/>
		<antcall target="download_sites"/>
		<antcall target="download_sites_packages"/>
		<antcall target="download_assets"/>
		<antcall target="download_assets_packages"/>
		<antcall target="download_apps"/>
		<antcall target="download_apps_packages"/>
		<antcall target="download_forms"/>
		<antcall target="download_forms_packages"/>
		<antcall target="download_communities_packages"/>
	</target>
	<target name="download_sites">
		<echo message="Downloading Latest AEM Sites Demo Add-on in /dist/downloads"/>
		<mkdir dir="${dist}/downloads"/>
		<antcall target="download_google">
			<param name="google.file" value="aem-demomachine-sites"/>
			<param name="google.id" value="${demo.download.demomachine.sites}"/>
		</antcall>
		<echo message="Extracting Latest AEM Sites Demo Add-on in /dist/sites"/>
		<delete dir="${dist}/sites"/>
		<unzip src="${dist}/downloads/aem-demomachine-sites.zip" dest="."/>
	</target>
	<target name="download_apps">
		<echo message="Downloading Latest AEM Apps Demo Add-on in /dist/downloads"/>
		<mkdir dir="${dist}/downloads"/>
		<antcall target="download_google">
			<param name="google.file" value="aem-demomachine-apps"/>
			<param name="google.id" value="${demo.download.demomachine.apps}"/>
		</antcall>
		<echo message="Extracting Latest AEM Apps Demo Add-on in /dist/apps"/>
		<delete dir="${dist}/apps"/>
		<unzip src="${dist}/downloads/aem-demomachine-apps.zip" dest="."/>
	</target>
	<target name="download_assets">
		<echo message="Downloading Latest AEM Assets Demo Add-on in /dist/downloads"/>
		<mkdir dir="${dist}/downloads"/>
		<antcall target="download_google">
			<param name="google.file" value="aem-demomachine-assets"/>
			<param name="google.id" value="${demo.download.demomachine.assets}"/>
		</antcall>
		<echo message="Extracting Latest AEM Assets Demo Add-on in /dist/assets"/>
		<delete dir="${dist}/assets"/>
		<unzip src="${dist}/downloads/aem-demomachine-assets.zip" dest="."/>
	</target>
	<target name="download_forms">
		<echo message="Downloading Latest AEM Forms Demo Add-on in /dist/downloads"/>
		<mkdir dir="${dist}/downloads"/>
		<antcall target="download_google">
			<param name="google.file" value="aem-demomachine-forms"/>
			<param name="google.id" value="${demo.download.demomachine.forms}"/>
		</antcall>
		<echo message="Extracting Latest AEM Forms Demo Add-on in /dist/forms"/>
		<delete dir="${dist}/forms"/>
		<unzip src="${dist}/downloads/aem-demomachine-forms.zip" dest="."/>
	</target>
	<target name="download_google">
		<exec executable="curl">
			<arg line="--cookie-jar '${dist}/downloads/google.txt' -s -k -o '${dist}/downloads/google.html' https://drive.google.com/uc?export=download&amp;id=${google.id}"/>
		</exec>
		<loadfile property="googleFile" srcFile="${dist}/downloads/google.html"/>
		<propertyregex property="confirmCode" input="${googleFile}" regexp="confirm=([-a-zA-Z0-9_]*)" select="\1"/>
		<echo message="Download in progress, please wait until build is successful"/>
		<exec executable="curl">
			<arg line="--cookie '${dist}/downloads/google.txt' -L -s -k -o '${dist}/downloads/${google.file}.zip' https://drive.google.com/uc?export=download&amp;confirm=${confirmCode}&amp;id=${google.id}"/>
		</exec>
		<delete file="${dist}/downloads/google.txt"/>
		<delete file="${dist}/downloads/google.html"/>
	</target>
	<target name="download_weretail">
		<echo message="Downloading Latest AEM We.Retail 6.2 packages from GitHub"/>
		<delete dir="${dist}/we-retail"/>
		<mkdir dir="${dist}/downloads"/>
		<mkdir dir="${dist}/we-retail/aem62"/>
		<exec executable="curl">
			<arg line="-L -s -k -o '${dist}/downloads/we.retail.all-${demo.download.weretail.all}.zip' https://github.com/Adobe-Marketing-Cloud/aem-sample-we-retail/releases/download/we.retail-${demo.download.weretail.all}/we.retail.all-${demo.download.weretail.all}.zip"/>
		</exec>
		<move todir="${dist}/we-retail/aem62">
			<fileset dir="${dist}/downloads">
				<include name="**/we.retail.*.zip"/>
			</fileset>
		</move>
		<echo message="Downloading Latest AEM We.Retail 6.3 packages from GitHub"/>
		<mkdir dir="${dist}/we-retail/aem63"/>
		<exec executable="curl">
			<arg line="-L -s -k -o '${dist}/downloads/we.retail.communities.ui.apps-${demo.download.weretail.source}.zip' https://github.com/Adobe-Marketing-Cloud/aem-sample-we-retail-communities/releases/download/v${demo.download.weretail.source}/we.retail.communities.ui.apps-${demo.download.weretail.source}.zip"/>
		</exec>
		<exec executable="curl">
			<arg line="-L -s -k -o '${dist}/downloads/we.retail.communities.ui.content-${demo.download.weretail.source}.zip' https://github.com/Adobe-Marketing-Cloud/aem-sample-we-retail-communities/releases/download/v${demo.download.weretail.source}/we.retail.communities.ui.content-${demo.download.weretail.source}.zip"/>
		</exec>
		<move todir="${dist}/we-retail/aem63">
			<fileset dir="${dist}/downloads">
				<include name="we.retail.communities.ui.apps-${demo.download.weretail.source}.zip"/>
				<include name="we.retail.communities.ui.content-${demo.download.weretail.source}.zip"/>
			</fileset>
		</move>
	</target>
	<!-- Target for downloading all packages for a given area -->
	<target name="download_packageshare">
		<echo message="Downloading latest AEM ${packageshare.capability} packages from PackageShare"/>
		<delete dir="${packageshare.target}"/>
		<propertyselector property="constituents" match="demo.download.${packageshare.capability}.([^\.]*).core" select="\1" casesensitive="false"/>
		<if>
			<and>
				<isset property="constituents"/>
				<not>
					<equals arg1="${constituents}" arg2=""/>
				</not>
			</and>
			<then>
				<foreach list="${constituents}" target="download_packageshare_item" param="packageshare.id"/>
			</then>
			<else>
				<echo message="No matching packages for ${packageshare.capability}"/>
			</else>
		</if>
	</target>
	<target name="download_packageshare_item">
		<antcall target="download_packageshare_file">
			<param name="packageshare.filepath" value="demo.download.${packageshare.capability}.${packageshare.id}.core"/>
			<param name="packageshare.version" value="demo.download.${packageshare.capability}.${packageshare.id}.version"/>
			<param name="packageshare.filename" value="demo.download.${packageshare.capability}.${packageshare.id}.name"/>
		</antcall>
	</target>
	<target name="download_packageshare_file">
		<if>
			<or>
				<equals arg1="${AdobeID.user}" arg2="" casesensitive="false"/>
				<equals arg1="${AdobeID.user}" arg2="replaceWithYourOwnValue" casesensitive="false"/>
				<equals arg1="${AdobeID.password}" arg2="replaceWithYourOwnValue" casesensitive="false"/>
				<equals arg1="${AdobeID.password}" arg2="" casesensitive="false"/>
			</or>
			<then>
				<fail message="Please configure your Adobe ID and password to download from Package Share (AdobeID.user and AdobeID.password properties)"/>
			</then>
			<else>
				<echo message="Connecting to Adobe Package Share with ID: ${AdobeID.user}"/>
				<mkdir dir="${logs}"/>
				<delete file="${logs}/download_packageshare.html"/>
				<exec executable="curl">
					<arg line="--output '${logs}/download_packageshare.html'"/>
					<arg line="--cookie-jar '${logs}/packageshare.txt'"/>
					<arg line="-k"/>
					<arg line="-X POST"/>
					<arg line="-d j_validate=true"/>
					<arg line="-d j_username=${AdobeID.user}"/>
					<arg line="--data-urlencode j_password='${AdobeID.password}'"/>
					<arg line="https://www.adobeaemcloud.com/content/login/j_security_check"/>
				</exec>
				<if>
					<and>
						<resourceexists>
							<file file="${logs}/download_packageshare.html"/>
						</resourceexists>
						<resourcecontains resource="${logs}/download_packageshare.html" substring="do not match"/>
					</and>
					<then>
						<fail message="There was a problem connecting to PackageShare. Please verify AdobeID.user and AdobeID.password properties."/>
					</then>
				</if>
				<propertycopy property="filepath" from="${packageshare.filepath}"/>
				<propertycopy property="fileversion" from="${packageshare.version}"/>
				<mkdir dir="${packageshare.target}/${fileversion}"/>
				<echo message="Download in progress, please wait until it is complete"/>
				<exec executable="curl">
					<arg line="--cookie '${logs}/packageshare.txt' -L -s -k -o '${logs}/packageshare.html' https://www.adobeaemcloud.com/content/marketplace/marketplaceProxy.html?packagePath=${filepath}"/>
				</exec>
				<if>
					<resourcecontains resource="${logs}/packageshare.html" substring="an error occurred while processing your request"/>
					<then>
						<echo message="There was a problem downloading a package, that is either missing or not visible to you. Please verify the download properties for ${filepath}."/>
					</then>
					<else>
						<loadfile property="packageShareFile" srcFile="${logs}/packageshare.html"/>
						<propertyregex property="packageShareFileName" input="${packageShareFile}" regexp="/file.res/([-a-zA-Z0-9_\\.]*).zip\&quot;;" select="\1"/>
						<echo message="Download ${packageShareFileName}.zip (${fileversion}) in progress, please wait until build is successful"/>
						<basename property="packagename" file="${filepath}"/>
						<!-- Automatic EULA acceptance -->
						<exec executable="curl">
							<arg line="--output '${logs}/download_packageshare_eula.html'"/>
							<arg line="--cookie '${logs}/packageshare.txt'"/>
							<arg line="-k"/>
							<arg line="-X POST"/>
							<arg line="-d acceptEula=on"/>
							<arg line="-d cmd=eula"/>
							<arg line="-d package=${packagename}"/>
							<arg line="https://www.adobeaemcloud.com/apps/cloudmgr/content/packages/user.json"/>
						</exec>
						<mkdir dir="${dist}/downloads"/>
						<exec executable="curl">
							<arg line="--cookie '${logs}/packageshare.txt' -L -s -k -o '${dist}/downloads/${packageShareFileName}.zip' https://www.adobeaemcloud.com${filepath}/jcr:content/package/file.res/${packageShareFileName}.zip"/>
						</exec>
						<if>
							<and>
								<isset property="${packageshare.filename}"/>
								<not>
									<equals arg1="${packageshare.filename}" arg2=""/>
								</not>
							</and>
							<then>
								<propertycopy property="filename" from="${packageshare.filename}"/>
								<move file="${dist}/downloads/${packageShareFileName}.zip" tofile="${packageshare.target}/${fileversion}/${filename}" overwrite="true"/>
							</then>
							<else>
								<move file="${dist}/downloads/${packageShareFileName}.zip" tofile="${packageshare.target}/${fileversion}/${packageShareFileName}.zip" overwrite="true"/>
							</else>
						</if>
					</else>
				</if>
			</else>
		</if>
	</target>
	<!-- Target for downloading the latest AEM load  -->
	<target name="download_load" depends="download_prereqs">
		<mkdir dir="${dist}/downloads"/>
		<echo message="Downloading cq-quickstart-${demo.load}.jar"/>
		<exec executable="curl">
			<arg line="-s -k -o '${dist}/downloads/${demo.load}.jar' ${demo.download.aem.artifactory}/artifactory/maven-aem-release-local/com/day/cq/cq-quickstart/${demo.load}/cq-quickstart-${demo.load}.jar"/>
		</exec>
		<echo message="AEM Load downloaded as ${demo.load}.jar in /dist/bin"/>
		<move file="${dist}/downloads/${demo.load}.jar" todir="${dist}/bin" overwrite="true"/>
	</target>
	<!-- Target for downloading the latest QuickStart snapshot -->
	<target name="download_snapshot" depends="download_prereqs">
		<echo message="Downloading a AEM QuickStart snapshot build ${demo.snapshot}"/>
		<mkdir dir="${dist}/downloads"/>
		<exec executable="curl">
			<arg line="-s -o '${dist}/downloads/maven-metadata.xml' ${demo.download.aem.artifactory}/artifactory/maven-aem-snapshot-local/com/day/cq/cq-quickstart/maven-metadata.xml"/>
		</exec>
		<xmlproperty file="${dist}/downloads/maven-metadata.xml"/>
		<if>
			<equals arg1="${demo.snapshot}" arg2="latest" casesensitive="false"/>
			<then>
				<exec executable="curl">
					<arg line="-s -k -o '${dist}/downloads/maven-metadata-snapshot.xml' ${demo.download.aem.artifactory}/artifactory/maven-aem-snapshot-local/com/day/cq/cq-quickstart/${metadata.versioning.latest}/maven-metadata.xml"/>
				</exec>
			</then>
			<else>
				<exec executable="curl">
					<arg line="-s -k -o '${dist}/downloads/maven-metadata-snapshot.xml' ${demo.download.aem.artifactory}/artifactory/maven-aem-snapshot-local/com/day/cq/cq-quickstart/${demo.snapshot}/maven-metadata.xml"/>
				</exec>
			</else>
		</if>
		<if>
			<resourcecontains resource="${dist}/downloads/maven-metadata-snapshot.xml" substring="404 - Path /com/day/cq"/>
			<then>
				<echo message="Downloading cq-quickstart-${demo.snapshot}.jar"/>
				<exec executable="curl">
					<arg line="-s -k -o '${dist}/downloads/snapshot.jar' ${demo.download.aem.artifactory}/artifactory/maven-aem-snapshot-local/com/day/cq/cq-quickstart/${demo.snapshot}/cq-quickstart-${demo.snapshot}.jar"/>
				</exec>
			</then>
			<else>
				<xmlproperty file="${dist}/downloads/maven-metadata-snapshot.xml"/>
				<propertyregex property="snapshotfile" input="${metadata.versioning.snapshotVersions.snapshotVersion.value}" regexp="(^\b.*?)," select="\1" casesensitive="false"/>
				<echo message="Downloading cq-quickstart-${snapshotfile}.jar"/>
				<exec executable="curl">
					<arg line="-s -k -o '${dist}/downloads/snapshot.jar' ${demo.download.aem.artifactory}/artifactory/maven-aem-snapshot-local/com/day/cq/cq-quickstart/${demo.snapshot}/cq-quickstart-${snapshotfile}.jar"/>
				</exec>
			</else>
		</if>
		<echo message="AEM Snapshot downloaded as snapshot.jar in /dist/bin"/>
		<move file="${dist}/downloads/snapshot.jar" todir="${dist}/bin" overwrite="true"/>
		<delete>
			<fileset dir="${dist}/downloads" includes="*.xml"/>
		</delete>
	</target>
	<!-- Target for installing the infrastructure (MongoDB and SOLR) from scratch -->
	<target name="infrastructure">
		<antcall target="infrastructure_stop"/>
		<antcall target="infrastructure_download"/>
		<antcall target="infrastructure_install"/>
	</target>
	<target name="infrastructure_stop">
		<antcall target="mongo_stop"/>
		<antcall target="solr_stop"/>
		<antcall target="mysql_stop"/>
		<antcall target="james_stop"/>
	</target>
	<target name="infrastructure_download">
		<antcall target="download_mongo"/>
		<antcall target="download_solr"/>
		<antcall target="download_mysql"/>
		<antcall target="download_james"/>
		<antcall target="download_ffmpeg"/>
	</target>
	<target name="infrastructure_install">
		<antcall target="install_mongo"/>
		<antcall target="install_solr"/>
		<antcall target="install_mysql"/>
		<antcall target="install_james"/>
		<antcall target="install_ffmpeg"/>
	</target>
	<!-- Target for downloading the MongoDB software -->
	<target name="download_mongo">
		<mkdir dir="${dist}/downloads"/>
		<if>
			<os family="mac"/>
			<then>
				<echo message="Downloading Mongo DB for MacOS"/>
				<echo message="Downloading https://fastdl.mongodb.org/osx/${demo.mongo}.tgz"/>
				<exec executable="curl">
					<arg line="-s -o '${dist}/downloads/mongodb.tgz' https://fastdl.mongodb.org/osx/${demo.mongo}.tgz"/>
				</exec>
			</then>
			<else>
				<echo message="IMPORTANT: On Windows and Unix, you need to setup MongoDB separately then set demo.mongo.external=true"/>
			</else>
		</if>
	</target>
	<!-- Target for downloading the James SMTP software -->
	<target name="download_james">
		<echo message="Downloading Apache James SMTP"/>
		<mkdir dir="${dist}/downloads"/>
		<echo message="Downloading  http://archive.apache.org/dist/james/apache-james/3.0${demo.emailserver.version}/apache-james-3.0-${demo.emailserver.version}-app.zip"/>
		<exec executable="curl">
			<arg line="-s -o '${dist}/downloads/james.zip' http://archive.apache.org/dist/james/apache-james/3.0${demo.emailserver.version}/apache-james-3.0-${demo.emailserver.version}-app.zip"/>
		</exec>
	</target>
	<!-- Target for downloading the MySQL software -->
	<target name="download_mysql">
		<mkdir dir="${dist}/downloads"/>
		<if>
			<os family="mac"/>
			<then>
				<echo message="Downloading MySQL DB for MacOS"/>
				<echo message="Downloading http://cdn.mysql.com/Downloads/MySQL-5.6/mysql-${demo.mysql}.tar.gz"/>
				<exec executable="curl">
					<arg line="-s -o '${dist}/downloads/mysql.tgz' http://cdn.mysql.com/Downloads/MySQL-5.6/mysql-${demo.mysql}.tar.gz"/>
				</exec>
			</then>
			<else>
				<echo message="IMPORTANT: On Windows and Unix, you need to setup MySQL separately then set demo.mysql.external=true"/>
			</else>
		</if>
	</target>
	<!-- Target for downloading FFMPEG -->
	<target name="download_ffmpeg">
		<mkdir dir="${dist}/downloads"/>
		<if>
			<os family="mac"/>
			<then>
				<echo message="Downloading FFMpeg for MacOS"/>
				<echo message="Downloading ${demo.ffmpeg}"/>
				<exec executable="curl">
					<arg line="-s -o '${dist}/downloads/ffmpeg.zip' ${demo.ffmpeg}"/>
				</exec>
			</then>
			<else>
				<echo message="IMPORTANT: On Windows and Unix, you need to setup FFPMEG separately"/>
			</else>
		</if>
	</target>
	<!-- Target for downloading latest Commerce (EP) bundles -->
	<target name="download_commerce_ep">
		<delete dir="${dist}/commerce"/>
		<antcall target="download_packageshare">
			<param name="packageshare.capability" value="commerce-ep"/>
			<param name="packageshare.target" value="${dist}/commerce"/>
		</antcall>
	</target>
	<!-- Target for downloading latest Commerce (WebSphere) bundles -->
	<target name="download_commerce_websphere">
		<delete dir="${dist}/commerce"/>
		<antcall target="download_packageshare">
			<param name="packageshare.capability" value="commerce-was"/>
			<param name="packageshare.target" value="${dist}/commerce"/>
		</antcall>
	</target>
	<!-- Target for downloading latest Forms packages -->
	<target name="download_forms_packages">
		<antcall target="download_forms_win"/>
		<antcall target="download_forms_macos"/>
		<antcall target="download_forms_demo"/>
	</target>
	<!-- Target for downloading the forms demo sites -->
	<target name="download_forms_demo">
		<antcall target="download_packageshare">
			<param name="packageshare.capability" value="formsdemo"/>
			<param name="packageshare.target" value="${dist}/forms-demo"/>
		</antcall>
	</target>
	<!-- Target for downloading the forms add-on, on MacOS then on Windows-->
	<target name="download_forms_win" if="isWindows">
		<echo message="Downloading latest AEM Forms Add-on for Windows"/>
		<antcall target="download_packageshare">
			<param name="packageshare.capability" value="formswin"/>
			<param name="packageshare.target" value="${dist}/forms-packages"/>
		</antcall>
	</target>
	<target name="download_forms_macos" if="isUnix">
		<echo message="Downloading latest AEM Forms Add-on for MacOS"/>
		<antcall target="download_packageshare">
			<param name="packageshare.capability" value="formsmac"/>
			<param name="packageshare.target" value="${dist}/forms-packages"/>
		</antcall>
	</target>
	<!-- Target for downloading the latest Sites packages -->
	<target name="download_sites_packages">
		<antcall target="download_packageshare">
			<param name="packageshare.capability" value="sites"/>
			<param name="packageshare.target" value="${dist}/sites-packages"/>
		</antcall>
	</target>
	<!-- Target for downloading the latest Apps packages -->
	<target name="download_apps_packages">
		<antcall target="download_packageshare">
			<param name="packageshare.capability" value="apps"/>
			<param name="packageshare.target" value="${dist}/apps-packages"/>
		</antcall>
	</target>
	<!-- Target for downloading the latest Assets packages -->
	<target name="download_assets_packages">
		<antcall target="download_packageshare">
			<param name="packageshare.capability" value="assets"/>
			<param name="packageshare.target" value="${dist}/assets-packages"/>
		</antcall>
	</target>
	<!-- Target for downloading the Communities Feature Packs -->
	<target name="download_communities_packages">
		<antcall target="download_packageshare">
			<param name="packageshare.capability" value="communities"/>
			<param name="packageshare.target" value="${dist}/community/featurepacks"/>
		</antcall>
		<antcall target="download_packageshare">
			<param name="packageshare.capability" value="scorm"/>
			<param name="packageshare.target" value="${dist}/community/scorm"/>
		</antcall>
		<antcall target="download_packageshare">
			<param name="packageshare.capability" value="advancedscoring"/>
			<param name="packageshare.target" value="${dist}/community/advancedscoring"/>
		</antcall>
	</target>
	<!-- Target for downloading the Hotfixes -->
	<target name="download_hotfixes_packages">
		<antcall target="download_packageshare">
			<param name="packageshare.capability" value="hotfix"/>
			<param name="packageshare.target" value="${dist}/hotfixes"/>
		</antcall>
		<antcall target="download_osgi"/>
	</target>
	<!-- Target for downloading the ACS commons and tools -->
	<target name="download_acs">
		<delete dir="${dist}/acs"/>
		<mkdir dir="${dist}/acs"/>
		<echo message="Downloading latest AEM ACS tools and commons"/>
		<propertyselector property="constituents" match="demo.download.acs.([^\.]*).core" select="\1" casesensitive="false"/>
		<if>
			<and>
				<isset property="constituents"/>
				<not>
					<equals arg1="${constituents}" arg2=""/>
				</not>
			</and>
			<then>
				<foreach list="${constituents}" target="download_acs_item" param="acs.id"/>
			</then>
		</if>
	</target>
	<target name="download_acs_item">
		<antcall target="download_acs_file">
			<param name="acs.filepath" value="demo.download.acs.${acs.id}.core"/>
			<param name="acs.version" value="demo.download.acs.${acs.id}.version"/>
		</antcall>
	</target>
	<target name="download_acs_file">
		<propertycopy property="this.filepath" from="${acs.filepath}"/>
		<propertycopy property="this.version" from="${acs.version}"/>
		<mkdir dir="${dist}/acs/${this.version}"/>
		<basename property="this.name" file="${this.filepath}"/>
		<echo message="Downloading ${this.name}"/>
		<exec executable="curl">
			<arg line="--cookie '${logs}/acs.txt' -L -s -k -o '${dist}/acs/${this.version}/${this.name}' ${this.filepath}"/>
		</exec>
	</target>
	<!-- Target for downloading the OSGI commons -->
	<target name="download_osgi">
		<delete dir="${dist}/osgi"/>
		<mkdir dir="${dist}/osgi"/>
		<echo message="Downloading latest OSGI hotfixes Apache mirrors"/>
		<propertyselector property="constituents" match="demo.download.osgi.([^\.]*).core" select="\1" casesensitive="false"/>
		<if>
			<and>
				<isset property="constituents"/>
				<not>
					<equals arg1="${constituents}" arg2=""/>
				</not>
			</and>
			<then>
				<foreach list="${constituents}" target="download_osgi_item" param="osgi.id"/>
			</then>
		</if>
	</target>
	<target name="download_osgi_item">
		<antcall target="download_osgi_file">
			<param name="osgi.filepath" value="demo.download.osgi.${osgi.id}.core"/>
			<param name="osgi.version" value="demo.download.osgi.${osgi.id}.version"/>
			<param name="osgi.startlevel" value="demo.download.osgi.${osgi.id}.startlevel"/>
		</antcall>
	</target>
	<target name="download_osgi_file">
		<propertycopy property="this.startlevel" from="${osgi.startlevel}"/>
		<propertycopy property="this.filepath" from="${osgi.filepath}"/>
		<propertycopy property="this.version" from="${osgi.version}"/>
		<mkdir dir="${dist}/osgi/${this.version}"/>
		<basename property="this.name" file="${this.filepath}"/>
		<echo message="Downloading ${this.name}"/>
		<exec executable="curl">
			<arg line="--cookie '${logs}/osgi.txt' -L -s -k -o '${dist}/osgi/${this.version}/${this.name}' ${this.filepath}"/>
		</exec>
		<echo file="${dist}/osgi/${this.version}/${this.name}.properties" append="false">startlevel=${this.startlevel}</echo>
	</target>
	<!-- Target for downloading latest Communities packages -->
	<target name="download_communities" depends="download_prereqs">
		<antcall target="download_communities_bundles"/>
		<antcall target="download_communities_advanced"/>
		<antcall target="download_communities_scorm"/>
	</target>
	<!-- Target for downloading latest Communities bundles -->
	<target name="download_communities_bundles" depends="download_prereqs">
		<echo message="Downloading latest Communities bundles for various versions (service packs and feature packs)"/>
		<mkdir dir="${dist}/downloads"/>
		<exec executable="curl">
			<arg line="-s -o '${dist}/downloads/nexus.xml' ${demo.download.aem.artifactory}/artifactory/maven-aem-dev/com/adobe/cq/social/cq-socialcommunities-pkg/maven-metadata.xml"/>
		</exec>
		<xmlproperty file="${dist}/downloads/nexus.xml"/>
		<propertyregex property="latest17" input="${metadata.versioning.versions.version}" regexp="(.*)(1\.7\.)([0-9]*)(\,1\.^7\.[0-9]*)*" select="\3"/>
		<echo message="Downloading cq-socialcommunities-pkg-1.7.${latest17}.zip"/>
		<exec executable="curl">
			<arg line="-s -o '${dist}/downloads/communities-aem61-release.zip' ${demo.download.aem.artifactory}/artifactory/maven-aem-dev/com/adobe/cq/social/cq-socialcommunities-pkg/1.7.${latest17}/cq-socialcommunities-pkg-1.7.${latest17}.zip"/>
		</exec>
		<propertyregex property="latest18" input="${metadata.versioning.versions.version}" regexp="(.*)(1\.8\.)([0-9]*)(\,1\.^8\.[0-9]*)*" select="\3"/>
		<echo message="Downloading cq-socialcommunities-pkg-1.8.${latest18}.zip"/>
		<exec executable="curl">
			<arg line="-s -o '${dist}/downloads/communities-aem61-latest.zip' ${demo.download.aem.artifactory}/artifactory/maven-aem-dev/com/adobe/cq/social/cq-socialcommunities-pkg/1.8.${latest18}/cq-socialcommunities-pkg-1.8.${latest18}.zip"/>
		</exec>
		<propertyregex property="latest19" input="${metadata.versioning.versions.version}" regexp="(.*)(1\.9\.)([0-9]*)(\,1\.^9\.[0-9]*)*" select="\3"/>
		<echo message="Downloading cq-socialcommunities-pkg-1.9.${latest19}.zip"/>
		<exec executable="curl">
			<arg line="-s -o '${dist}/downloads/communities-aem62-release.zip' ${demo.download.aem.artifactory}/artifactory/maven-aem-dev/com/adobe/cq/social/cq-socialcommunities-pkg/1.9.${latest19}/cq-socialcommunities-pkg-1.9.${latest19}.zip"/>
		</exec>
		<propertyregex property="latest110" input="${metadata.versioning.versions.version}" regexp="(.*)(1\.10\.)([0-9]*)(\,1\.^9\.[0-9]*)*" select="\3"/>
		<echo message="Downloading cq-socialcommunities-pkg-1.10.${latest110}.zip"/>
		<exec executable="curl">
			<arg line="-s -o '${dist}/downloads/communities-aem62-latest.zip' ${demo.download.aem.artifactory}/artifactory/maven-aem-dev/com/adobe/cq/social/cq-socialcommunities-pkg/1.10.${latest110}/cq-socialcommunities-pkg-1.10.${latest110}.zip"/>
		</exec>
		<propertyregex property="latest111" input="${metadata.versioning.versions.version}" regexp="(.*)(1\.11\.)([0-9]*)(\,1\.^9\.[0-9]*)*" select="\3"/>
		<echo message="Downloading cq-socialcommunities-pkg-1.11.${latest111}.zip"/>
		<exec executable="curl">
			<arg line="-s -o '${dist}/downloads/communities-aem63-release.zip' ${demo.download.aem.artifactory}/artifactory/maven-aem-dev/com/adobe/cq/social/cq-socialcommunities-pkg/1.11.${latest111}/cq-socialcommunities-pkg-1.11.${latest111}.zip"/>
		</exec>
		<propertyregex property="latest112" input="${metadata.versioning.versions.version}" regexp="(.*)(1\.12\.)([0-9]*)(\,1\.^9\.[0-9]*)*" select="\3"/>
		<echo message="Downloading cq-socialcommunities-pkg-1.12.${latest112}.zip"/>
		<exec executable="curl">
			<arg line="-s -o '${dist}/downloads/communities-aem63-latest.zip' ${demo.download.aem.artifactory}/artifactory/maven-aem-dev/com/adobe/cq/social/cq-socialcommunities-pkg/1.12.${latest112}/cq-socialcommunities-pkg-1.12.${latest112}.zip"/>
		</exec>
		<propertyregex property="latest113" input="${metadata.versioning.versions.version}" regexp="(.*)(1\.13\.)([0-9]*)(\,1\.^9\.[0-9]*)*" select="\3"/>
		<echo message="Downloading cq-socialcommunities-pkg-1.13.${latest113}.zip"/>
		<exec executable="curl">
			<arg line="-s -o '${dist}/downloads/communities-aem64-release.zip' ${demo.download.aem.artifactory}/artifactory/maven-aem-dev/com/adobe/cq/social/cq-socialcommunities-pkg/1.13.${latest113}/cq-socialcommunities-pkg-1.13.${latest113}.zip"/>
		</exec>
		<delete>
			<fileset dir="${dist}/downloads" includes="*.xml"/>
		</delete>
	</target>
	<!-- Target for downloading latest Advanced Scoring and Badging Packages -->
	<target name="download_communities_advanced" depends="download_prereqs">
		<echo message="Downloading latest advanced scoring package"/>
		<mkdir dir="${dist}/downloads"/>
		<exec executable="curl">
			<arg line="-s -o '${dist}/downloads/nexus.xml' ${demo.download.aem.artifactory}/artifactory/maven-aem-dev/com/adobe/cq/social/cq-social-expert-identification-pkg/maven-metadata.xml"/>
		</exec>
		<xmlproperty file="${dist}/downloads/nexus.xml"/>
		<echo message="Downloading cq-social-expert-identification-pkg-${metadata.versioning.release}.zip"/>
		<exec executable="curl">
			<arg line="-s -o '${dist}/downloads/cq-social-expert-identification-pkg.zip' ${demo.download.aem.artifactory}/artifactory/maven-aem-dev/com/adobe/cq/social/cq-social-expert-identification-pkg/${metadata.versioning.release}/cq-social-expert-identification-pkg-${metadata.versioning.release}.zip"/>
		</exec>
	</target>
	<!-- Target for downloading latest Scorm bundle -->
	<target name="download_communities_scorm" depends="download_prereqs">
		<echo message="Downloading latest SCORM bundle"/>
		<mkdir dir="${dist}/downloads"/>
		<exec executable="curl">
			<arg line="-s -o '${dist}/downloads/nexus.xml' ${demo.download.aem.artifactory}/artifactory/maven-aem-dev/com/adobe/cq/social/cq-social-scorm-pkg/maven-metadata.xml"/>
		</exec>
		<xmlproperty file="${dist}/downloads/nexus.xml"/>
		<propertyregex property="latest10" input="${metadata.versioning.versions.version}" regexp="(.*)(1\.0\.)([0-9]*)(\,1\.^0\.[0-9]*)*" select="\3"/>
		<echo message="Downloading cq-social-scorm-pkg-1.0.${latest10}.zip"/>
		<exec executable="curl">
			<arg line="-s -o '${dist}/downloads/cq-social-scorm-pkg-aem61.zip' ${demo.download.aem.artifactory}/artifactory/maven-aem-dev/com/adobe/cq/social/cq-social-scorm-pkg/1.0.${latest10}/cq-social-scorm-pkg-1.0.${latest10}.zip"/>
		</exec>
		<echo message="Downloading cq-social-scorm-pkg-1.0.${latest10}.zip"/>
		<exec executable="curl">
			<arg line="-s -o '${dist}/downloads/cq-social-scorm-pkg-aem62.zip' ${demo.download.aem.artifactory}/artifactory/maven-aem-dev/com/adobe/cq/social/cq-social-scorm-pkg/1.0.${latest10}/cq-social-scorm-pkg-1.0.${latest10}.zip"/>
		</exec>
		<propertyregex property="latest11" input="${metadata.versioning.versions.version}" regexp="(.*)(1\.1\.)([0-9]*)(\,1\.^1\.[0-9]*)*" select="\3"/>
		<echo message="Downloading cq-social-scorm-pkg-1.1.${latest11}.zip"/>
		<exec executable="curl">
			<arg line="-s -o '${dist}/downloads/cq-social-scorm-pkg-aem63.zip' ${demo.download.aem.artifactory}/artifactory/maven-aem-dev/com/adobe/cq/social/cq-social-scorm-pkg/1.1.${latest11}/cq-social-scorm-pkg-1.1.${latest11}.zip"/>
		</exec>
		<echo message="Downloading cq-social-scorm-pkg-1.1.${latest11}.zip"/>
		<exec executable="curl">
			<arg line="-s -o '${dist}/downloads/cq-social-scorm-pkg-aem64.zip' ${demo.download.aem.artifactory}/artifactory/maven-aem-dev/com/adobe/cq/social/cq-social-scorm-pkg/1.1.${latest11}/cq-social-scorm-pkg-1.1.${latest11}.zip"/>
		</exec>
		<delete>
			<fileset dir="${dist}/downloads" includes="*.xml"/>
		</delete>
	</target>
	<!-- Target for verifying the Adobe internal only properties are in place -->
	<target name="download_prereqs">
		<if>
			<or>
				<equals arg1="${demo.download.aem.artifactory}" arg2="AdobeOnlyValueRequired" casesensitive="false"/>
				<equals arg1="${demo.download}" arg2="AdobeOnlyValueRequired" casesensitive="false"/>
				<equals arg1="${demo.scripts}" arg2="AdobeOnlyValueRequired" casesensitive="false"/>
			</or>
			<then>
				<fail message="Please install the Adobe-only properties before using this feature (Search for AEM Demo Machine in Adobe's Wiki for further instructions)"/>
			</then>
		</if>
	</target>
	<!-- Target for installing the FFMPEG software -->
	<target name="install_ffmpeg" if="isMac">
		<if>
			<os family="mac"/>
			<then>
				<echo message="Installing FFMPEG for MacOS"/>
				<delete dir="${ffmpeg}"/>
				<mkdir dir="${ffmpeg}"/>
				<unzip src="${dist}/downloads/ffmpeg.zip" dest="${ffmpeg}"/>
				<chmod dir="${ffmpeg}" perm="ugo+rx" includes="*"/>
				<echo message="IMPORTANT: FFMPEG was installed, please add the ${ffmpeg} folder to your PATH environment variable"/>
			</then>
			<else>
				<echo message="IMPORTANT: FFMPEG is not installed by the AEM Demo Machine on Windows and Unix"/>
			</else>
		</if>
	</target>
	<!-- Target for installing the MongoDB software -->
	<target name="install_mongo" depends="mongo_stop">
		<!-- Verifying that we don't have something running on the same port -->
		<if>
			<and>
				<os family="mac"/>
				<socket server="${demo.host}" port="${demo.mongo.port}"/>
				<equals arg1="${demo.mongo.external}" arg2="false" casesensitive="false"/>
			</and>
			<then>
				<fail message="There seems to be another MongoDB instance already running on this host. Please stop the instance and retry. Alternatively, you can point the Demo Machine at this existing instance by setting demo.mongo.external=true and the associated credentials and paths"/>
			</then>
		</if>
		<if>
			<os family="mac"/>
			<then>
				<echo message="Installing Mongo DB on MacOS"/>
				<delete dir="${mongodb}"/>
				<gunzip src="${dist}/downloads/mongodb.tgz" dest="${dist}/downloads/mongodb.tar"/>
				<untar src="${dist}/downloads/mongodb.tar" dest="."/>
				<move file="./${demo.mongo}" tofile="${mongodb}"/>
				<chmod dir="${mongodb}/bin" perm="ugo+rx" includes="*"/>
			</then>
			<else>
				<echo message="IMPORTANT: MongoDB is not installed by the AEM Demo Machine on Windows"/>
			</else>
		</if>
	</target>
	<!-- Target for installing the MySQL software -->
	<target name="install_mysql" depends="mysql_stop">
		<!-- Verifying that we don't have something running on the same port -->
		<if>
			<and>
				<os family="mac"/>
				<socket server="${demo.host}" port="${demo.mysql.port}"/>
				<equals arg1="${demo.mysql.external}" arg2="false" casesensitive="false"/>
			</and>
			<then>
				<fail message="There seems to be another MySQL instance already running on this host. Please stop the instance and retry. Alternatively, you can point the Demo Machine at this existing instance by setting demo.mysql.external=true and the associated credentials and paths"/>
			</then>
		</if>
		<if>
			<os family="mac"/>
			<then>
				<echo message="Installing MySQL database on MacOS"/>
				<delete dir="${mysql}"/>
				<gunzip src="${dist}/downloads/mysql.tgz" dest="${dist}/downloads/mysql.tar"/>
				<untar src="${dist}/downloads/mysql.tar" dest="."/>
				<move file="./mysql-${demo.mysql}" tofile="${mysql}"/>
				<chmod dir="${mysql}/bin" perm="ugo+rx" includes="*"/>
				<chmod dir="${mysql}/scripts" perm="ugo+rx" includes="*"/>
				<chmod dir="${mysql}/data" perm="ugo+rx" includes="*"/>
				<echo message="Initializing schema for ${mysql}"/>
				<exec executable="./scripts/mysql_install_db" dir="${mysql}">
					<arg line="--basedir='${mysql}' --datadir='${mysql}/data/'"/>
				</exec>
				<antcall target="mysql_start"/>
				<echo message="Changing root user password to: ${demo.mysql.password}"/>
				<exec executable="./bin/mysqladmin" dir="${mysql}">
					<arg line="-u root password ${demo.mysql.password}"/>
				</exec>
				<antcall target="mysql_stop"/>
			</then>
			<else>
				<echo message="IMPORTANT: MySQL is not installed by the AEM Demo Machine on Windows and Unix"/>
			</else>
		</if>
	</target>
	<!-- Target for downloading the latest InDesign Server for Mac -->
	<target name="download_indesignserver">
		<input message="Please enter Adobe LDAP username:" addproperty="adobe.ldap.user"/>
		<input message="Please enter Adobe LDAP password (caution: will be displayed):" addproperty="adobe.ldap.password"/>
		<mkdir dir="${dist}/downloads"/>
		<ftp action="get" server="indstore.corp.adobe.com" userid="${adobe.ldap.user}" password="${adobe.ldap.password}">
			<fileset dir="builds03/InDesignServer/12.0.0/osx10-64/mul/20161005.m.081-2/Image/AdobeInDesignServer12HD-mul-ESD">
				<include name="**/*.dmg"/>
			</fileset>
		</ftp>
	</target>
	<target name="start_indesignserver" if="isUnix" depends="permissions">
		<exec executable="/bin/sh" os="Mac OS X" spawn="false">
			<arg value="-c"/>
			<arg value="&quot;${Adobe.indesignserver.path}&quot; -LogToApplicationEventLog -port ${Adobe.indesignserver.port} &amp; sleep 5"/>
		</exec>
	</target>
	<target name="stop_indesignserver" if="isUnix" depends="permissions">
		<exec executable="${bin}/kill.sh" dir="${bin}" spawn="false">
			<arg line="'InDesignServer'"/>
		</exec>
		<sleep seconds="2"/>
	</target>
	<!-- Target for installing and configuring the Livefyre feature pack -->
	<target name="livefyre" if="aem61orlater" depends="version,configuration">
		<antcall target="livefyre_instance">
			<param name="port" value="${demomachine.authorport}"/>
		</antcall>
		<antcall target="livefyre_instance">
			<param name="port" value="${demomachine.publishport}"/>
		</antcall>
		<antcall target="livefyre_instance">
			<param name="port" value="${demomachine.farmport}"/>
		</antcall>
		<sleep seconds="10"/>
	</target>
	<target name="livefyre_instance">
		<if>
			<and>
				<socket server="${demo.host}" port="${port}"/>
				<resourceexists>
					<file file="${dist}/community/livefyre/cq-demo-livefyre-1.0.zip"/>
				</resourceexists>
			</and>
			<then>
				<echo message="Adding the Livefyre components to the Component Guide"/>
				<antcall target="package">
					<param name="package" value="${dist}/community/livefyre/cq-demo-livefyre-1.0.zip"/>
				</antcall>
				<echo message="Creating Livefyre cloud service"/>
				<exec executable="curl">
					<arg line="--output '${logs}/${port}_livefyre_cloudservice.html'"/>
					<arg line="-u admin:${demo.admin.password}"/>
					<arg line="--globoff"/>
					<arg line="-X POST"/>
					<arg line="-d cmd=createPage"/>
					<arg line="-d _charset_=utf-8"/>
					<arg line="-d parentPath=/etc/cloudservices/livefyre"/>
					<arg line="-d title=DemoMachine"/>
					<arg line="-d label=DemoMachine"/>
					<arg line="-d template=/libs/social/integrations/livefyre/cloudconfig/pagetemplate"/>
					<arg line="http://${demo.host}:${port}/bin/wcmcommand"/>
				</exec>
				<echo message="Configuring Livefyre cloud service for domain ${Livefyre.networkdomain} and site ${Livefyre.siteid}"/>
				<exec executable="curl" output="${logs}/${port}_livefyre_settingscurl.html">
					<arg line="--output '${logs}/${port}_livefyre_settings.html'"/>
					<arg line="-u admin:${demo.admin.password}"/>
					<arg line="-X POST"/>
					<arg line="--data-urlencode './communities.integration.livefyre.networkkey=${Livefyre.networkkey}'"/>
					<arg line="--data-urlencode './communities.integration.livefyre.networkdomain=${Livefyre.networkdomain}'"/>
					<arg line="--data-urlencode './communities.integration.livefyre.sitekey=${Livefyre.sitekey}'"/>
					<arg line="--data-urlencode './communities.integration.livefyre.siteid=${Livefyre.siteid}'"/>
					<arg line="-d './communities.integration.livefyre.sitekey@Encrypted='"/>
					<arg line="-d './communities.integration.livefyre.networkkey@Encrypted='"/>
					<arg line="-d ./userDataFieldMapping@Delete="/>
					<arg line="-d ./sling:resourceType=/libs/social/integrations/livefyre/cloudconfig/livefyre-config"/>
					<arg line="http://${demo.host}:${port}/etc/cloudservices/livefyre/DemoMachine/jcr:content"/>
				</exec>
			</then>
		</if>
	</target>
	<target name="serialization_firewall" if="aem63orlater">
		<exec executable="curl">
			<arg line="--output '${logs}/${port}_serialization.html'"/>
			<arg line="-u admin:${demo.admin.password}"/>
			<arg line="--globoff"/>
			<arg line="-X POST"/>
			<arg line="-d apply=true"/>
			<arg line="-d action=ajaxConfigManager"/>
			<arg line="-d $location="/>
			<arg line="-d firewall.deserialization.whitelist=org.apache.http.impl."/>
			<arg line="-d firewall.deserialization.whitelist=com.day."/>
			<arg line="-d firewall.deserialization.whitelist=com.google.api.client.auth.oauth2."/>
			<arg line="-d firewall.deserialization.whitelist=com.scene7."/>
			<arg line="-d firewall.deserialization.whitelist=java."/>
			<arg line="-d firewall.deserialization.whitelist=javax."/>
			<arg line="-d firewall.deserialization.whitelist=oracle.sql."/>
			<arg line="-d firewall.deserialization.whitelist=org.apache.jackrabbit."/>
			<arg line="-d firewall.deserialization.whitelist=org.apache.sling."/>
			<arg line="-d firewall.deserialization.blacklist=org.apache.commons.collections.functors.InvokerTransformer"/>
			<arg line="-d firewall.deserialization.blacklist=org.apache.commons.collections4.functors.InvokerTransformer"/>
			<arg line="-d firewall.deserialization.blacklist=org.apache.commons.collections.functors.InstantiateTransformer"/>
			<arg line="-d firewall.deserialization.blacklist=org.apache.commons.collections4.functors.InstantiateTransformer"/>
			<arg line="-d firewall.deserialization.blacklist=org.apache.xalan.internal.xsltc.trax.TemplatesImpl"/>
			<arg line="-d firewall.deserialization.blacklist=org.codehaus.groovy.runtime.MethodClosure"/>
			<arg line="-d firewall.deserialization.blacklist=org.springframework.beans.factory.ObjectFactory"/>
			<arg line="-d firewall.deserialization.blacklist=org.springframework.core.SerializableTypeWrapper$MethodInvokeTypeProvider"/>
			<arg line="-d firewall.deserialization.blacklist=com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl"/>
			<arg line="-d firewall.deserialization.diagnostics=class-name-only"/>
			<arg line="-d propertylist=firewall.deserialization.whitelist,firewall.deserialization.blacklist,firewall.deserialization.diagnostics"/>
			<arg line="http://${demo.host}:${port}/system/console/configMgr/com.adobe.cq.deserfw.impl.DeserializationFirewallImpl"/>
		</exec>
	</target>
	<target name="externalizer">
		<if>
			<equals arg1="${demo.externalizer}" arg2="true" casesensitive="false"/>
			<then>
				<echo message="Configuring the Externalizer (30s pause)"/>
				<if>
					<equals arg1="${port}" arg2="${demomachine.authorport}" casesensitive="false"/>
					<then>
						<property name="externalizer.local" value="${demo.externalizer.author}"/>
					</then>
					<else>
						<property name="externalizer.local" value="${demo.externalizer.publish}"/>
					</else>
				</if>
				<exec executable="curl">
					<arg line="--output '${logs}/${port}_livefyre_externalizer.html'"/>
					<arg line="-u admin:${demo.admin.password}"/>
					<arg line="--globoff"/>
					<arg line="-X POST"/>
					<arg line="-d apply=true"/>
					<arg line="-d action=ajaxConfigManager"/>
					<arg line="-d $location="/>
					<arg line="-d externalizer.domains='local http://${externalizer.local}:${port}'"/>
					<arg line="-d externalizer.domains='author http://${demo.externalizer.author}:${demomachine.authorport}'"/>
					<arg line="-d externalizer.domains='publish http://${demo.externalizer.publish}:${demomachine.publishport}'"/>
					<arg line="-d externalizer.host="/>
					<arg line="-d externalizer.contextpath="/>
					<arg line="-d propertylist=externalizer.domains,externalizer.host,externalizer.contextpath"/>
					<arg line="http://${demo.host}:${port}/system/console/configMgr/com.day.cq.commons.impl.ExternalizerImpl"/>
				</exec>
				<!-- Many bundles are restarting after the Externalizer is changed -->
				<sleep seconds="30"/>
				<waitfor maxwait="300" maxwaitunit="second" checkevery="5" checkeveryunit="second">
					<http url="http://${demo.host}:${port}/libs/granite/core/content/login.html" errorsbeginat="400"/>
				</waitfor>
			</then>
		</if>
	</target>
	<!-- Target for getting version number -->
	<target name="version">
		<if>
			<resourceexists>
				<file file="${demos}/${demo.build}/demomachine.properties"/>
			</resourceexists>
			<then>
				<path id="cq.path">
					<fileset dir="${demos}/${demo.build}/author/crx-quickstart/app">
						<include name="cq-quickstart-*.jar"/>
					</fileset>
				</path>
				<property name="cq.file" refid="cq.path"/>
				<propertyregex property="cq.version" input="${cq.file}" regexp="(.*)-(.*)(\.0|\.1|\.2|\.3)-(.*).jar" select="\2"/>
			</then>
			<else>
				<property name="cq.version" value="${demo.version}"/>
			</else>
		</if>
		<!-- These conditions are used to run specitic targets only on certain releases -->
		<condition property="aem64">
			<equals arg1="${cq.version}" arg2="6.4" casesensitive="false"/>
		</condition>
		<condition property="aem63">
			<equals arg1="${cq.version}" arg2="6.3" casesensitive="false"/>
		</condition>
		<condition property="aem62">
			<equals arg1="${cq.version}" arg2="6.2" casesensitive="false"/>
		</condition>
		<condition property="aem61">
			<equals arg1="${cq.version}" arg2="6.1" casesensitive="false"/>
		</condition>
		<condition property="aem60">
			<equals arg1="${cq.version}" arg2="6.0" casesensitive="false"/>
		</condition>
		<condition property="cq56">
			<equals arg1="${cq.version}" arg2="5.6" casesensitive="false"/>
		</condition>
		<!-- This property determines where to load the demo packages from -->
		<if>
			<equals arg1="${cq.version}" arg2="6.4" casesensitive="false"/>
			<then>
				<property name="demo.packages" value="aem64"/>
			</then>
		</if>
		<if>
			<equals arg1="${cq.version}" arg2="6.3" casesensitive="false"/>
			<then>
				<property name="demo.packages" value="aem63"/>
			</then>
		</if>
		<if>
			<equals arg1="${cq.version}" arg2="6.2" casesensitive="false"/>
			<then>
				<property name="demo.packages" value="aem62"/>
			</then>
		</if>
		<if>
			<equals arg1="${cq.version}" arg2="6.1" casesensitive="false"/>
			<then>
				<property name="demo.packages" value="aem61"/>
			</then>
		</if>
		<if>
			<equals arg1="${cq.version}" arg2="6.0" casesensitive="false"/>
			<then>
				<property name="demo.packages" value="aem60"/>
			</then>
		</if>
		<if>
			<equals arg1="${cq.version}" arg2="5.6" casesensitive="false"/>
			<then>
				<property name="demo.packages" value="cq56"/>
			</then>
		</if>
		<!-- These conditions are used to run specitic targets starting with a certain release or later -->
		<condition property="aem64orlater">
			<equals arg1="${cq.version}" arg2="6.4" casesensitive="false"/>
		</condition>
		<condition property="aem63orlater">
			<or>
				<equals arg1="${cq.version}" arg2="6.4" casesensitive="false"/>
				<equals arg1="${cq.version}" arg2="6.3" casesensitive="false"/>
			</or>
		</condition>
		<condition property="aem62orlater">
			<or>
				<equals arg1="${cq.version}" arg2="6.4" casesensitive="false"/>
				<equals arg1="${cq.version}" arg2="6.3" casesensitive="false"/>
				<equals arg1="${cq.version}" arg2="6.2" casesensitive="false"/>
			</or>
		</condition>
		<condition property="aem61orlater">
			<or>
				<equals arg1="${cq.version}" arg2="6.4" casesensitive="false"/>
				<equals arg1="${cq.version}" arg2="6.3" casesensitive="false"/>
				<equals arg1="${cq.version}" arg2="6.2" casesensitive="false"/>
				<equals arg1="${cq.version}" arg2="6.1" casesensitive="false"/>
			</or>
		</condition>
		<condition property="aem60orlater">
			<or>
				<equals arg1="${cq.version}" arg2="6.4" casesensitive="false"/>
				<equals arg1="${cq.version}" arg2="6.3" casesensitive="false"/>
				<equals arg1="${cq.version}" arg2="6.2" casesensitive="false"/>
				<equals arg1="${cq.version}" arg2="6.1" casesensitive="false"/>
				<equals arg1="${cq.version}" arg2="6.0" casesensitive="false"/>
			</or>
		</condition>
		<condition property="cq56orlater">
			<or>
				<equals arg1="${cq.version}" arg2="6.4" casesensitive="false"/>
				<equals arg1="${cq.version}" arg2="6.3" casesensitive="false"/>
				<equals arg1="${cq.version}" arg2="6.2" casesensitive="false"/>
				<equals arg1="${cq.version}" arg2="6.1" casesensitive="false"/>
				<equals arg1="${cq.version}" arg2="6.0" casesensitive="false"/>
				<equals arg1="${cq.version}" arg2="5.6" casesensitive="false"/>
			</or>
		</condition>
		<!--
		<echo message="demo.packages: ${demo.packages}"/>
		-->
	</target>
	<!-- Target for loading the packages -->
	<target name="configure" depends="version,configuration">
		<echo message="Configuring the Admin password on the Author instance, ${demomachine.authorport}"/>
		<antcall target="configure_admin">
			<param name="port" value="${demomachine.authorport}"/>
		</antcall>
		<if>
			<socket server="${demo.host}" port="${demomachine.publishport}"/>
			<then>
				<echo message="Configuring the Admin password on the Publish instance, ${demomachine.publishport}"/>
				<antcall target="configure_admin">
					<param name="port" value="${demomachine.publishport}"/>
				</antcall>
			</then>
		</if>
		<if>
			<socket server="${demo.host}" port="${demomachine.farmport}"/>
			<then>
				<echo message="Configuring the Admin password on the Farm instance, ${demomachine.farmport}"/>
				<antcall target="configure_admin">
					<param name="port" value="${demomachine.farmport}"/>
				</antcall>
			</then>
		</if>
		<antcall target="configure_replication"/>
		<antcall target="configure_post">
			<param name="port" value="${demomachine.authorport}"/>
		</antcall>
		<if>
			<socket server="${demo.host}" port="${demomachine.publishport}"/>
			<then>
				<echo message="Configuring the Publish instance"/>
				<antcall target="configure_post">
					<param name="port" value="${demomachine.publishport}"/>
				</antcall>
				<if>
					<equals arg1="${demo.dispatcher}" arg2="true" casesensitive="false"/>
					<then>
						<antcall target="dispatcher"/>
					</then>
				</if>
			</then>
		</if>
		<if>
			<socket server="${demo.host}" port="${demomachine.farmport}"/>
			<then>
				<echo message="Configuring the Farm instance"/>
				<antcall target="configure_post">
					<param name="port" value="${demomachine.farmport}"/>
				</antcall>
			</then>
		</if>
		<if>
			<equals arg1="${demomachine.srp}" arg2="dsrp" casesensitive="false"/>
			<then>
				<!-- For now, DSRP requires a restart -->
				<!--
				<antcall target="restart"/>
				-->
			</then>
		</if>
	</target>
	<!-- Target for configuring the Replication agents -->
	<target name="configure_replication" if="aem60orlater">
		<exec executable="curl">
			<arg line="--output '${logs}/${demomachine.authorport}_replication1.html'"/>
			<arg line="-u admin:${demo.admin.password}"/>
			<arg line="-X POST"/>
			<arg line="-d transportUri=http://${demo.host}:${demomachine.publishport}/bin/receive?sling:authRequestLogin=1"/>
			<arg line="-d userId=admin"/>
			<arg line="-d enabled=true"/>
			<arg line="-d enabled@delete="/>
			<arg line="-d transportUser=admin"/>
			<arg line="-d transportPassword=${demo.admin.password}"/>
			<arg line="http://${demo.host}:${demomachine.authorport}/etc/replication/agents.author/publish/jcr:content"/>
		</exec>
		<exec executable="curl">
			<arg line="--output '${logs}/${demomachine.authorport}_replication2.html'"/>
			<arg line="-u admin:${demo.admin.password}"/>
			<arg line="-X POST"/>
			<arg line="-d userId=admin"/>
			<arg line="-d enabled=true"/>
			<arg line="-d enabled@delete="/>
			<arg line="-d transportUri=http://${demo.host}:${demomachine.publishport}/bin/receive?sling:authRequestLogin=1"/>
			<arg line="-d transportUser=admin"/>
			<arg line="-d transportPassword=${demo.admin.password}"/>
			<arg line="http://${demo.host}:${demomachine.authorport}/etc/replication/agents.author/publish_reverse/jcr:content"/>
		</exec>
		<if>
			<socket server="${demo.host}" port="${demomachine.publishport}"/>
			<then>
				<exec executable="curl">
					<arg line="--output '${logs}/${demomachine.publishport}_replication3.html'"/>
					<arg line="-u admin:${demo.admin.password}"/>
					<arg line="-X POST"/>
					<arg line="-d userId=admin"/>
					<arg line="-d enabled=true"/>
					<arg line="-d enabled@delete="/>
					<arg line="-d transportUri=repo://var/replication/outbox"/>
					<arg line="-d transportUser=admin"/>
					<arg line="-d transportPassword=${demo.admin.password}"/>
					<arg line="http://${demo.host}:${demomachine.publishport}/etc/replication/agents.publish/outbox/jcr:content"/>
				</exec>
			</then>
		</if>
	</target>
	<!-- Target for configuring the Admin account -->
	<target name="configure_admin" if="aem60orlater">
		<exec executable="curl">
			<arg line="--output '${logs}/${port}_admininfo.html'"/>
			<arg line="-u admin:admin"/>
			<arg line="http://${demo.host}:${port}/libs/granite/security/currentuser.json"/>
		</exec>
		<loadfile property="admin.info" srcFile="${logs}/${port}_admininfo.html"/>
		<propertyregex property="admin.path" input="${admin.info}" regexp="&quot;home&quot;:&quot;([-a-zA-Z0-9_/]*)&quot;" select="\1"/>
		<echo message="Administrator user path: ${admin.path}"/>
		<exec executable="curl">
			<arg line="--output '${logs}/${port}_adminchangepassword.html'"/>
			<arg line="-u admin:admin"/>
			<arg line="-X POST"/>
			<arg line="-d rep:password=${demo.admin.password}"/>
			<arg line="-d :currentPassword=admin"/>
			<arg line="-d './profile/givenName=${demo.admin.firstname}'"/>
			<arg line="-d './profile/familyName=${demo.admin.lastname}'"/>
			<arg line="-d './profile/aboutMe=${demo.admin.aboutme}'"/>
			<arg line="http://${demo.host}:${port}${admin.path}.rw.userprops.html"/>
		</exec>
		<if>
			<and>
				<resourceexists>
					<file file="${demo.admin.photo}"/>
				</resourceexists>
				<not>
					<equals arg1="${demo.admin.photo}" arg2=""/>
				</not>
			</and>
			<then>
				<echo message="Uploading admin profile picture with ${demo.admin.photo}"/>
				<exec executable="curl">
					<arg line="--output '${logs}/${port}_adminchangefolder1.html'"/>
					<arg line="-u admin:${demo.admin.password}"/>
					<arg line="-X POST"/>
					<arg line="-d 'jcr:primaryType=sling:Folder'"/>
					<arg line="http://${demo.host}:${port}${admin.path}/profile/photos"/>
				</exec>
				<exec executable="curl">
					<arg line="--output '${logs}/${port}_adminchangefolder2.html'"/>
					<arg line="-u admin:${demo.admin.password}"/>
					<arg line="-X POST"/>
					<arg line="-d 'jcr:primaryType=sling:Folder'"/>
					<arg line="http://${demo.host}:${port}${admin.path}/profile/photos/primary"/>
				</exec>
				<basename property="photofilename" file="${demo.admin.photo}"/>
				<exec executable="curl">
					<arg line="--output '${logs}/${port}_adminchangepicture.html'"/>
					<arg line="-u admin:${demo.admin.password}"/>
					<arg line="-T '${demo.admin.photo}'"/>
					<arg line="http://${demo.host}:${port}${admin.path}/profile/photos/primary/image"/>
				</exec>
				<exec executable="curl">
					<arg line="--output '${logs}/${port}_adminchangefolder3.html'"/>
					<arg line="-u admin:${demo.admin.password}"/>
					<arg line="-X POST"/>
					<arg line="-d 'jcr:mimeType=image/jpeg'"/>
					<arg line="http://${demo.host}:${port}${admin.path}/profile/photos/primary/image/jcr:content"/>
				</exec>
			</then>
		</if>
	</target>
	<!-- Target for configuring the replication agents for the Farm instance -->
	<target name="configure_farm">
		<echo message="Configuring replication agent on Author for Farm instance"/>
		<exec executable="curl">
			<arg line="--output '${logs}/farm_replication_create.html'"/>
			<arg line="-u admin:${demo.admin.password}"/>
			<arg line="-F cmd=copyPage"/>
			<arg line="-F srcPath=/etc/replication/agents.author/publish"/>
			<arg line="-F destParentPath=/etc/replication/agents.author"/>
			<arg line="http://${demo.host}:${demomachine.authorport}/bin/wcmcommand"/>
		</exec>
		<exec executable="curl">
			<arg line="--output '${logs}/farm_replication_port.html'"/>
			<arg line="-u admin:${demo.admin.password}"/>
			<arg line="-X POST"/>
			<arg line="-d ./transportUri=http://${demo.host}:${demomachine.farmport}/bin/receive?sling:authRequestLogin=1"/>
			<arg line="http://${demo.host}:${demomachine.authorport}/etc/replication/agents.author/publish1/jcr:content"/>
		</exec>
	</target>
	<!-- Target for post configuration steps -->
	<target name="configure_post">
		<antcall target="social_cloudstorage">
			<param name="port" value="${port}"/>
		</antcall>
		<antcall target="social_cloudpage">
			<param name="port" value="${port}"/>
		</antcall>
		<antcall target="communities_languages">
			<param name="port" value="${port}"/>
		</antcall>
		<antcall target="demo_cloudservices">
			<param name="port" value="${port}"/>
		</antcall>
		<antcall target="analytics">
			<param name="port" value="${port}"/>
		</antcall>
		<antcall target="target">
			<param name="port" value="${port}"/>
		</antcall>
		<antcall target="brightedge">
			<param name="port" value="${port}"/>
		</antcall>
		<antcall target="notifications">
			<param name="port" value="${port}"/>
		</antcall>
		<antcall target="community-moderators">
			<param name="port" value="${port}"/>
		</antcall>
		<!-- Configuration tasks on Author only -->
		<if>
			<equals arg1="${port}" arg2="${demomachine.authorport}" casesensitive="false"/>
			<then>
				<antcall target="users">
					<param name="port" value="${port}"/>
				</antcall>
				<antcall target="scene7_registration">
					<param name="port" value="${port}"/>
				</antcall>
				<antcall target="solution_switcher">
					<param name="port" value="${port}"/>
				</antcall>
			</then>
		</if>
		<antcall target="community_srp">
			<param name="port" value="${port}"/>
		</antcall>
		<antcall target="autocomplete">
			<param name="port" value="${port}"/>
		</antcall>
		<antcall target="ffmpeg">
			<param name="port" value="${port}"/>
		</antcall>
		<antcall target="translations_geomedia">
			<param name="port" value="${port}"/>
		</antcall>
		<antcall target="externalizer">
			<param name="port" value="${port}"/>
		</antcall>
		<!--
		<antcall target="serialization_firewall">
			<param name="port" value="${port}"/>
		</antcall>
		-->
	</target>
	<!-- Target for loading a package on the AUTHOR instance -->
	<target name="package_author" depends="configuration">
		<antcall target="package">
			<param name="package" value="${package}"/>
			<param name="port" value="${demomachine.authorport}"/>
		</antcall>
	</target>
	<!-- Target for loading a package on the PUBLISH instance -->
	<target name="package_publish" depends="configuration">
		<antcall target="package">
			<param name="package" value="${package}"/>
			<param name="port" value="${demomachine.publishport}"/>
		</antcall>
	</target>
	<!-- Target for loading a package on the FARM instance -->
	<target name="package_farm" depends="configuration">
		<antcall target="package">
			<param name="package" value="${package}"/>
			<param name="port" value="${demomachine.farmport}"/>
		</antcall>
	</target>
	<!-- Target for uploading and installing a package on a server instance  -->
	<target name="package">
		<basename property="packagefilename" file="${package}"/>
		<condition property="isHotFix">
			<contains substring="hotfix" string="${packagefilename}" casesensitive="false"/>
		</condition>
		<condition property="isFeaturePack">
			<or>
				<contains substring="fp" string="${packagefilename}" casesensitive="false"/>
				<contains substring="featurepack" string="${packagefilename}" casesensitive="false"/>
			</or>
		</condition>
		<!-- Making sure the instance is available for uploads -->
		<waitfor maxwait="300" maxwaitunit="second" checkevery="5" checkeveryunit="second">
			<http url="http://${demo.host}:${port}/libs/granite/core/content/login.html" errorsbeginat="400"/>
		</waitfor>
		<echo message="Uploading ${packagefilename} on port ${port}"/>
		<exec executable="curl">
			<arg line="--output '${logs}/${port}_${packagefilename}.html'"/>
			<arg line="-u admin:${demo.admin.password}"/>
			<arg line="-F force=true"/>
			<arg line="-F install=true"/>
			<arg line="-F 'file=@${package}'"/>
			<arg line="http://${demo.host}:${port}/crx/packmgr/service.jsp"/>
		</exec>
		<if>
			<resourceexists>
				<file file="${package}.txt"/>
			</resourceexists>
			<then>
				<loadfile property="packageHelp" srcFile="${package}.txt"/>
				<echo message="Uploaded: ${packageHelp}"/>
			</then>
		</if>
		<antcall target="packageHotFix"/>
		<antcall target="packageFeaturePack"/>
	</target>
	<target name="packageHotFix" if="isHotFix">
		<echo message="Waiting for hotfix to be installed"/>
		<sleep seconds="3"/>
	</target>
	<target name="packageFeaturePack" if="isFeaturePack">
		<echo message="Waiting for feature pack to be installed"/>
		<sleep seconds="30"/>
	</target>
	<!-- Targets for installing the ACS tools and commons before the first startup -->
	<target name="acs_instance" depends="version,configuration">
		<if>
			<and>
				<equals arg1="${demo.acs}" arg2="true" casesensitive="false"/>
				<available file="${dist}/acs" type="dir"/>
			</and>
			<then>
				<if>
					<equals arg1="${port}" arg2="${demomachine.authorport}" casesensitive="false"/>
					<then>
						<foreach target="package" param="package">
							<path id="standard.acs">
								<fileset dir="${dist}/acs" casesensitive="yes">
									<include name="all/*.zip"/>
									<include name="${demo.packages}/*.zip"/>
								</fileset>
							</path>
						</foreach>
					</then>
					<else>
						<foreach target="package" param="package">
							<path id="standard.acs">
								<fileset dir="${dist}/acs" casesensitive="yes">
									<include name="all/*.zip"/>
									<include name="${demo.packages}/*.zip"/>
									<exclude name="**/acs-aem-tools*.zip"/>
								</fileset>
							</path>
						</foreach>
					</else>
				</if>
			</then>
		</if>
	</target>
	<target name="acs_instance_item">
		<basename property="acs.name" file="${acs}"/>
		<copy file="${acs}" todir="${demos}/${demo.build}/${demo.instance}/crx-quickstart/install" overwrite="true"/>
		<echo message="Adding ACS package ${acs.name} on instance ${demo.instance}"/>
	</target>
	<!-- Targets for installing the OSGI configuration settings before the first startup -->
	<target name="osgi_instance" depends="version,configuration">
		<if>
			<and>
				<equals arg1="${demo.osgi}" arg2="true" casesensitive="false"/>
				<available file="${dist}/config" type="dir"/>
			</and>
			<then>
				<foreach target="osgi_config_item" param="config">
					<path id="standard.config">
						<fileset dir="${dist}/config" casesensitive="yes">
							<include name="all/all/**/*.config"/>
							<include name="all/${demo.instance}/**/*.config"/>
							<include name="${demo.packages}/all/**/*.config"/>
							<include name="${demo.packages}/${demo.instance}/**/*.config"/>
						</fileset>
					</path>
				</foreach>
				<foreach target="osgi_config_package" param="package">
					<path id="standard.package">
						<fileset dir="${dist}/config" casesensitive="yes">
							<include name="all/all/**/*.zip"/>
							<include name="all/${demo.instance}/**/*.zip"/>
							<include name="${demo.packages}/all/**/*.zip"/>
							<include name="${demo.packages}/${demo.instance}/**/*.zip"/>
						</fileset>
					</path>
				</foreach>
			</then>
		</if>
	</target>
	<target name="osgi_config_package">
		<basename property="package.name" file="${package}"/>
		<copy file="${package}" todir="${demos}/${demo.build}/${demo.instance}/crx-quickstart/install" overwrite="true"/>
		<echo message="Adding configuration package ${package.name} on instance ${demo.instance}"/>
	</target>
	<target name="osgi_config_item">
		<basename property="config.name" file="${config}"/>
		<copy file="${config}" todir="${demos}/${demo.build}/${demo.instance}/crx-quickstart/install" overwrite="true"/>
		<echo message="Adding OSGI configuration ${config.name} on instance ${demo.instance}"/>
		<replace file="${demos}/${demo.build}/${demo.instance}/crx-quickstart/install/${config.name}" token="##demo.externalizer.publish##" value="${demo.externalizer.publish}"/>
		<replace file="${demos}/${demo.build}/${demo.instance}/crx-quickstart/install/${config.name}" token="##demo.externalizer.author##" value="${demo.externalizer.author}"/>
		<replace file="${demos}/${demo.build}/${demo.instance}/crx-quickstart/install/${config.name}" token="##AdobeAEM.authorport##" value="${AdobeAEM.authorport}"/>
		<replace file="${demos}/${demo.build}/${demo.instance}/crx-quickstart/install/${config.name}" token="##AdobeAEM.publishport##" value="${AdobeAEM.publishport}"/>
		<replace file="${demos}/${demo.build}/${demo.instance}/crx-quickstart/install/${config.name}" token="##AdobeAEM.farmport##" value="${AdobeAEM.farmport}"/>
		<replace file="${demos}/${demo.build}/${demo.instance}/crx-quickstart/install/${config.name}" token="##demo.loglevel##" value="${demo.loglevel}"/>
	</target>
	<!-- Targets for installing the OSGI bundles hotfixes before the first startup -->
	<target name="hotfix_osgi_instance" depends="version,configuration">
		<if>
			<and>
				<equals arg1="${demo.hotfixes}" arg2="true" casesensitive="false"/>
				<available file="${dist}/osgi" type="dir"/>
			</and>
			<then>
				<foreach target="osgi_copy_item" param="package">
					<path id="osgi.packages">
						<fileset dir="${dist}/osgi" casesensitive="yes">
							<include name="all/*.jar"/>
							<include name="${demo.packages}/*.jar"/>
						</fileset>
					</path>
				</foreach>
			</then>
		</if>
	</target>
	<target name="osgi_copy_item">
		<basename property="this.name" file="${package}"/>
		<property file="${package}.properties"/>
		<echo message="Adding OSGI hotfix ${this.name} on instance ${demo.instance} with start level ${startlevel}"/>
		<mkdir dir="${demos}/${demo.build}/${demo.instance}/crx-quickstart/install/osgi/${startlevel}"/>
		<copy file="${package}" todir="${demos}/${demo.build}/${demo.instance}/crx-quickstart/install/osgi/${startlevel}"/>
	</target>
	<!-- Adobe Social Communities - setting waiting time to 10s for notifications -->
	<target name="notifications">
		<exec executable="curl">
			<arg line="--output '${logs}/${port}_notifications.html'"/>
			<arg line="-u admin:${demo.admin.password}"/>
			<arg line="-X POST"/>
			<arg line="-d ./waiting.time=10"/>
			<arg line="-d ./waiting.time@TypeHint=Long"/>
			<arg line="http://${demo.host}:${port}/libs/wcm/notification/config/com.day.cq.wcm.notification.impl.NotificationManagerImpl"/>
		</exec>
	</target>
	<!-- Adobe Social Communities - setting waiting time to 10s for notifications -->
	<target name="user_configuration" if="aem62orlater">
		<echo message="Configuring OAK Users and Groups cache settings (30s pause)"/>
		<exec executable="curl">
			<arg line="--output '${logs}/${port}_usercache.html'"/>
			<arg line="-u admin:${demo.admin.password}"/>
			<arg line="-X POST"/>
			<arg line="--globoff"/>
			<arg line="-d apply=true"/>
			<arg line="-d action=ajaxConfigManager"/>
			<arg line="-d $location="/>
			<arg line="-d usersPath=/home/users"/>
			<arg line="-d groupsPath=/home/groups"/>
			<arg line="-d systemRelativePath=system"/>
			<arg line="-d defaultDepth=1"/>
			<arg line="-d importBehavior=besteffort"/>
			<arg line="-d passwordHashAlgorithm=unmodified"/>
			<arg line="-d passwordHashIterations=1000"/>
			<arg line="-d passwordSaltSize=8"/>
			<arg line="-d supportAutoSave=false"/>
			<arg line="-d passwordMaxAge=0"/>
			<arg line="-d initialPasswordChange=false"/>
			<arg line="-d passwordHistorySize=0"/>
			<arg line="-d cacheExpiration=${demo.oak.usercache}"/>
			<arg line="-d propertylist=usersPath,groupsPath,systemRelativePath,defaultDepth,importBehavior,passwordHashAlgorithm,passwordHashIterations,passwordSaltSize,supportAutoSave,passwordMaxAge,initialPasswordChange,passwordHistorySize,cacheExpiration"/>
			<arg line="http://${demo.host}:${port}/system/console/configMgr/org.apache.jackrabbit.oak.security.user.UserConfigurationImpl"/>
		</exec>
		<!-- Making sure the instance is available for uploads -->
		<sleep seconds="10"/>
		<waitfor maxwait="300" maxwaitunit="second" checkevery="5" checkeveryunit="second">
			<http url="http://${demo.host}:${port}/libs/granite/core/content/login.html" errorsbeginat="400"/>
		</waitfor>
	</target>
	<!-- Configure the dispatcher flush on Publish -->
	<target name="dispatcher">
		<exec executable="curl">
			<arg line="--output '${logs}/${demomachine.publishport}_dispatcher_flush.html'"/>
			<arg line="-u admin:${demo.admin.password}"/>
			<arg line="-X POST"/>
			<arg line="-d ./enabled=true"/>
			<arg line="-d ./enabled@Delete="/>
			<arg line="-d ./transportUri=http://${demo.dispatcher.host}:${demo.dispatcher.port}/dispatcher/invalidate.cache"/>
			<arg line="-d ./sling:resourceType=cq/replication/components/agent"/>
			<arg line="http://${demo.host}:${demomachine.publishport}/etc/replication/agents.publish/flush/jcr:content"/>
		</exec>
	</target>
	<!-- Adobe Social account: posting consumer and secret keys for social data store so that they are encrypted locally -->
	<target name="social_cloudstorage" if="aem60">
		<if>
			<equals arg1="${AdobeSocial.install}" arg2="true" casesensitive="false"/>
			<then>
				<echo message="Configuring ASRP cloud service"/>
				<exec executable="curl">
					<arg line="--output '${logs}/${port}_keys.html'"/>
					<arg line="-u admin:${demo.admin.password}"/>
					<arg line="-X POST"/>
					<arg line="-d ./consumerkey=${AdobeSocial.consumerkey}"/>
					<arg line="-d ./consumerkey@Encrypted="/>
					<arg line="-d ./hosturl=${AdobeSocial.hosturl}"/>
					<arg line="-d ./secret=${AdobeSocial.secretkey}"/>
					<arg line="-d ./secret@Encrypted="/>
					<arg line="-d ./reportsuite=${AdobeSocial.reportsuite}"/>
					<arg line="-d ./asipath=/content/usergenerated/asi/cloud"/>
					<arg line="-d ./sling:resourceType=social/config/datastore/cloud/components/asproviderconfigpage"/>
					<arg line="http://${demo.host}:${port}/etc/cloudservices/socialdatastore/adobe-social/jcr:content"/>
				</exec>
			</then>
		</if>
	</target>
	<!-- Adobe Scene7: posting Registration Id and Video Service URL -->
	<target name="scene7_registration">
		<if>
			<equals arg1="${AdobeScene7.install}" arg2="true" casesensitive="false"/>
			<then>
				<echo message="Creating Dynamic Media cloud service"/>
				<exec executable="curl">
					<arg line="--output '${logs}/${port}_dynamicmedia_cloudservice.html'"/>
					<arg line="-u admin:${demo.admin.password}"/>
					<arg line="--globoff"/>
					<arg line="-X POST"/>
					<arg line="-d cmd=createPage"/>
					<arg line="-d _charset_=utf-8"/>
					<arg line="-d parentPath=/etc/cloudservices/dynamicmediaservices"/>
					<arg line="-d title=DemoMachine"/>
					<arg line="-d label=DemoMachine"/>
					<arg line="-d template=/libs/dam/templates/dynamicmediaservices"/>
					<arg line="http://${demo.host}:${port}/bin/wcmcommand"/>
				</exec>
				<exec executable="curl">
					<arg line="--output '${logs}/${port}_scene7.html'"/>
					<arg line="-u admin:${demo.admin.password}"/>
					<arg line="-X POST"/>
					<arg line="-d ./serviceUrl=${AdobeScene7.videoService}"/>
					<arg line="-d ./registrationID=${AdobeScene7.registrationID}"/>
					<arg line="-d ./registrationID@Encrypted="/>
					<arg line="http://${demo.host}:${port}/etc/cloudservices/dynamicmediaservices/DemoMachine/jcr:content"/>
				</exec>
			</then>
		</if>
	</target>
	<!-- AEM Communities: configuring shared language store for UGC -->
	<target name="communities_languages" if="aem61orlater" depends="version">
		<if>
			<equals arg1="${demo.communities.languages.sharing}" arg2="true" casesensitive="false"/>
			<then>
				<exec executable="curl">
					<arg line="--output '${logs}/${port}_communities_languages.html'"/>
					<arg line="-u admin:${demo.admin.password}"/>
					<arg line="-X POST"/>
					<arg line="-d ./ugcPath='${demo.communities.languages.locale}'"/>
					<arg line="http://${demo.host}:${port}/etc/cloudservices/translation/default_geometrixx_outdoors/jcr:content"/>
				</exec>
			</then>
		</if>
	</target>
	<!-- Marketing Cloud Solution Switcher -->
	<target name="solution_switcher">
		<if>
			<equals arg1="${SolutionSwitcher.customize}" arg2="true" casesensitive="false"/>
			<then>
				<!-- primary switcher -->
				<exec executable="curl">
					<arg line="--output '${logs}/${port}_solution_switcher.html'"/>
					<arg line="-u admin:${demo.admin.password}"/>
					<arg line="-X POST"/>
					<arg line="-d ./sling:resourceType=granite/ui/components/shell/solutionswitcher"/>
					<arg line="-d ./jcr:primaryType=nt:unstructured"/>
					<arg line="http://${demo.host}:${port}/apps/granite/ui/content/shell/solutionswitcher"/>
				</exec>
				<exec executable="curl">
					<arg line="--output '${logs}/${port}_solution_switcher.html'"/>
					<arg line="-u admin:${demo.admin.password}"/>
					<arg line="-X POST"/>
					<arg line="-d ./jcr:primaryType=nt:unstructured"/>
					<arg line="http://${demo.host}:${port}/apps/granite/ui/content/shell/solutionswitcher/primary"/>
				</exec>
				<!-- secondary (rhs vertical) switcher -->
				<exec executable="curl">
					<arg line="--output '${logs}/${port}_solution_switcher.html'"/>
					<arg line="-u admin:${demo.admin.password}"/>
					<arg line="-X POST"/>
					<arg line="-d ./jcr:primaryType=nt:unstructured"/>
					<arg line="http://${demo.host}:${port}/apps/granite/ui/content/shell/solutionswitcher/secondary"/>
				</exec>
				<if>
					<length string="${SolutionSwitcher.analytics.url}" trim="true" when="greater" length="0"/>
					<then>
						<echo message="Configuring Analytics Switcher"/>
						<exec executable="curl">
							<arg line="--output '${logs}/${port}_solution_switcher.html'"/>
							<arg line="-u admin:${demo.admin.password}"/>
							<arg line="-X POST"/>
							<arg line="--data-urlencode './href_i18n=${SolutionSwitcher.analytics.url}'"/>
							<arg line="-d ./jcr:primaryType=nt:unstructured"/>
							<arg line="-d ./icon=adobeAnalyticsColor"/>
							<arg line="http://${demo.host}:${port}/apps/granite/ui/content/shell/solutionswitcher/primary/analytics"/>
						</exec>
					</then>
				</if>
				<if>
					<length string="${SolutionSwitcher.audiencemanager.url}" trim="true" when="greater" length="0"/>
					<then>
						<echo message="Configuring Audience Manager Switcher"/>
						<exec executable="curl">
							<arg line="--output '${logs}/${port}_solution_switcher.html'"/>
							<arg line="-u admin:${demo.admin.password}"/>
							<arg line="-X POST"/>
							<arg line="-d ./jcr:primaryType=nt:unstructured"/>
							<arg line="--data-urlencode './href_i18n=${SolutionSwitcher.audiencemanager.url}'"/>
							<arg line="-d ./icon=adobeAudienceManagerColor"/>
							<arg line="http://${demo.host}:${port}/apps/granite/ui/content/shell/solutionswitcher/primary/audiencemanager"/>
						</exec>
					</then>
				</if>
				<if>
					<length string="${SolutionSwitcher.campaign.url}" trim="true" when="greater" length="0"/>
					<then>
						<exec executable="curl">
							<arg line="--output '${logs}/${port}_solution_switcher.html'"/>
							<arg line="-u admin:${demo.admin.password}"/>
							<arg line="-X POST"/>
							<arg line="-d ./jcr:primaryType=nt:unstructured"/>
							<arg line="--data-urlencode './href_i18n=${SolutionSwitcher.campaign.url}'"/>
							<arg line="-d ./icon=adobeCampaignColor"/>
							<arg line="http://${demo.host}:${port}/apps/granite/ui/content/shell/solutionswitcher/primary/campaign"/>
						</exec>
					</then>
				</if>
				<if>
					<length string="${SolutionSwitcher.social.url}" trim="true" when="greater" length="0"/>
					<then>
						<exec executable="curl">
							<arg line="--output '${logs}/${port}_solution_switcher.html'"/>
							<arg line="-u admin:${demo.admin.password}"/>
							<arg line="-X POST"/>
							<arg line="-d ./jcr:primaryType=nt:unstructured"/>
							<arg line="--data-urlencode './href_i18n=${SolutionSwitcher.social.url}'"/>
							<arg line="-d ./icon=adobeSocialColor"/>
							<arg line="http://${demo.host}:${port}/apps/granite/ui/content/shell/solutionswitcher/primary/social"/>
						</exec>
					</then>
				</if>
				<if>
					<length string="${SolutionSwitcher.aem.url}" trim="true" when="greater" length="0"/>
					<then>
						<echo message="Configuring AEM Switcher"/>
						<exec executable="curl">
							<arg line="--output '${logs}/${port}_solution_switcher.html'"/>
							<arg line="-u admin:${demo.admin.password}"/>
							<arg line="-X POST"/>
							<arg line="-d ./jcr:primaryType=nt:unstructured"/>
							<arg line="--data-urlencode './href_i18n=${SolutionSwitcher.aem.url}'"/>
							<arg line="-d ./icon=adobeExperienceManagerColor"/>
							<arg line="http://${demo.host}:${port}/apps/granite/ui/content/shell/solutionswitcher/primary/aem"/>
						</exec>
					</then>
				</if>
				<if>
					<length string="${SolutionSwitcher.mediaoptimizer.url}" trim="true" when="greater" length="0"/>
					<then>
						<echo message="Configuring Media Optimizer Switcher"/>
						<exec executable="curl">
							<arg line="--output '${logs}/${port}_solution_switcher.html'"/>
							<arg line="-u admin:${demo.admin.password}"/>
							<arg line="-X POST"/>
							<arg line="-d ./jcr:primaryType=nt:unstructured"/>
							<arg line="--data-urlencode './href_i18n=${SolutionSwitcher.mediaoptimizer.url}'"/>
							<arg line="-d ./icon=adobeMediaOptimizerColor"/>
							<arg line="http://${demo.host}:${port}/apps/granite/ui/content/shell/solutionswitcher/primary/mediaoptimizer"/>
						</exec>
					</then>
				</if>
				<if>
					<length string="${SolutionSwitcher.primetime.url}" trim="true" when="greater" length="0"/>
					<then>
						<echo message="Configuring Primetime Switcher"/>
						<exec executable="curl">
							<arg line="--output '${logs}/${port}_solution_switcher.html'"/>
							<arg line="-u admin:${demo.admin.password}"/>
							<arg line="-X POST"/>
							<arg line="-d ./jcr:primaryType=nt:unstructured"/>
							<arg line="--data-urlencode './href_i18n=${SolutionSwitcher.primetime.url}'"/>
							<arg line="-d ./icon=adobePrimetimeColor"/>
							<arg line="http://${demo.host}:${port}/apps/granite/ui/content/shell/solutionswitcher/primary/primetime"/>
						</exec>
					</then>
				</if>
				<if>
					<length string="${SolutionSwitcher.target.url}" trim="true" when="greater" length="0"/>
					<then>
						<echo message="Configuring Target Switcher"/>
						<exec executable="curl">
							<arg line="--output '${logs}/${port}_solution_switcher.html'"/>
							<arg line="-u admin:${demo.admin.password}"/>
							<arg line="-X POST"/>
							<arg line="-d ./jcr:primaryType=nt:unstructured"/>
							<arg line="--data-urlencode './href_i18n=${SolutionSwitcher.target.url}'"/>
							<arg line="-d ./icon=adobeTargetColor"/>
							<arg line="http://${demo.host}:${port}/apps/granite/ui/content/shell/solutionswitcher/primary/target"/>
						</exec>
					</then>
				</if>
				<if>
					<length string="${SolutionSwitcher.activation.url}" trim="true" when="greater" length="0"/>
					<then>
						<echo message="Configuring Activation Switcher"/>
						<exec executable="curl">
							<arg line="--output '${logs}/${port}_solution_switcher.html'"/>
							<arg line="-u admin:${demo.admin.password}"/>
							<arg line="-X POST"/>
							<arg line="-d ./jcr:primaryType=nt:unstructured"/>
							<arg line="--data-urlencode './href_i18n=${SolutionSwitcher.activation.url}'"/>
							<arg line="-d ./icon=launch"/>
							<arg line="http://${demo.host}:${port}/apps/granite/ui/content/shell/solutionswitcher/secondary/activation"/>
						</exec>
					</then>
				</if>
				<if>
					<length string="${SolutionSwitcher.assets.url}" trim="true" when="greater" length="0"/>
					<then>
						<echo message="Configuring Assets Switcher"/>
						<exec executable="curl">
							<arg line="--output '${logs}/${port}_solution_switcher.html'"/>
							<arg line="-u admin:${demo.admin.password}"/>
							<arg line="-X POST"/>
							<arg line="-d ./jcr:primaryType=nt:unstructured"/>
							<arg line="--data-urlencode './href_i18n=${SolutionSwitcher.assets.url}'"/>
							<arg line="-d ./icon=asset"/>
							<arg line="http://${demo.host}:${port}/apps/granite/ui/content/shell/solutionswitcher/secondary/assets"/>
						</exec>
					</then>
				</if>
				<if>
					<length string="${SolutionSwitcher.exchange.url}" trim="true" when="greater" length="0"/>
					<then>
						<echo message="Configuring exchange Switcher"/>
						<exec executable="curl">
							<arg line="--output '${logs}/${port}_solution_switcher.html'"/>
							<arg line="-u admin:${demo.admin.password}"/>
							<arg line="-X POST"/>
							<arg line="-d ./jcr:primaryType=nt:unstructured"/>
							<arg line="--data-urlencode './href_i18n=${SolutionSwitcher.exchange.url}'"/>
							<arg line="-d ./icon=sync"/>
							<arg line="http://${demo.host}:${port}/apps/granite/ui/content/shell/solutionswitcher/secondary/exchange"/>
						</exec>
					</then>
				</if>
				<if>
					<length string="${SolutionSwitcher.mobileservices.url}" trim="true" when="greater" length="0"/>
					<then>
						<echo message="Configuring mobileservices Switcher"/>
						<exec executable="curl">
							<arg line="--output '${logs}/${port}_solution_switcher.html'"/>
							<arg line="-u admin:${demo.admin.password}"/>
							<arg line="-X POST"/>
							<arg line="-d ./jcr:primaryType=nt:unstructured"/>
							<arg line="--data-urlencode './href_i18n=${SolutionSwitcher.mobileservices.url}'"/>
							<arg line="-d ./icon=mobileServices"/>
							<arg line="http://${demo.host}:${port}/apps/granite/ui/content/shell/solutionswitcher/secondary/mobileservices"/>
						</exec>
					</then>
				</if>
				<if>
					<length string="${SolutionSwitcher.feed.url}" trim="true" when="greater" length="0"/>
					<then>
						<echo message="Configuring mobileservices Switcher"/>
						<exec executable="curl">
							<arg line="--output '${logs}/${port}_solution_switcher.html'"/>
							<arg line="-u admin:${demo.admin.password}"/>
							<arg line="-X POST"/>
							<arg line="-d ./jcr:primaryType=nt:unstructured"/>
							<arg line="--data-urlencode './href_i18n=${SolutionSwitcher.feed.url}'"/>
							<arg line="-d ./icon=feed"/>
							<arg line="http://${demo.host}:${port}/apps/granite/ui/content/shell/solutionswitcher/secondary/feed"/>
						</exec>
					</then>
				</if>
				<if>
					<length string="${SolutionSwitcher.profilesaudiences.url}" trim="true" when="greater" length="0"/>
					<then>
						<echo message="Configuring Activation Switcher"/>
						<exec executable="curl">
							<arg line="--output '${logs}/${port}_solution_switcher.html'"/>
							<arg line="-u admin:${demo.admin.password}"/>
							<arg line="-X POST"/>
							<arg line="-d ./jcr:primaryType=nt:unstructured"/>
							<arg line="--data-urlencode './href_i18n=${SolutionSwitcher.profilesaudiences.url}'"/>
							<arg line="-d ./icon=user"/>
							<arg line="http://${demo.host}:${port}/apps/granite/ui/content/shell/solutionswitcher/secondary/profilesaudiences"/>
						</exec>
					</then>
				</if>
			</then>
		</if>
	</target>
	<!-- Adobe Analytics: posting username, password and secret key for encryption wiht local instance keys -->
	<target name="analytics">
		<if>
			<equals arg1="${AdobeAnalytics.install}" arg2="true" casesensitive="false"/>
			<then>
				<echo message="Configuring Analytics cloud service"/>
				<foreach target="package" param="package">
					<path id="standard.package">
						<fileset dir="${dist}/analytics/packages" casesensitive="yes">
							<include name="all/**/*.zip"/>
							<include name="${demo.packages}/**/*.zip"/>
						</fileset>
					</path>
				</foreach>
				<antcall target="analytics_cloud"/>
			</then>
			<else>
				<exec executable="curl">
					<arg line="--output '${logs}/${port}_analytics_delete_demo.html'"/>
					<arg line="-u admin:${demo.admin.password}"/>
					<arg line="-X DELETE"/>
					<arg line="http://${demo.host}:${port}/etc/cloudservices/sitecatalyst/demomachine"/>
				</exec>
				<exec executable="curl">
					<arg line="--output '${logs}/${port}_analytics_delete_assets.html'"/>
					<arg line="-u admin:${demo.admin.password}"/>
					<arg line="-X DELETE"/>
					<arg line="http://${demo.host}:${port}/etc/cloudservices/sitecatalyst/assetinsights"/>
				</exec>
			</else>
		</if>
	</target>
	<target name="analytics_cloud">
		<exec executable="curl">
			<arg line="--output '${logs}/${port}_analytics.html'"/>
			<arg line="-u admin:${demo.admin.password}"/>
			<arg line="-X POST"/>
			<arg line="--data-urlencode './password=${AdobeAnalytics.password}'"/>
			<arg line="-d ./password@Encrypted="/>
			<arg line="--data-urlencode './secret=${AdobeAnalytics.secret}'"/>
			<arg line="-d ./secret@Encrypted="/>
			<arg line="--data-urlencode './username=${AdobeAnalytics.username}'"/>
			<arg line="-d ./server=${AdobeAnalytics.server}"/>
			<arg line="--data-urlencode './company=${AdobeAnalytics.company}'"/>
			<arg line="-d ./disableImportPageImpressionsAuthor@Delete=true"/>
			<arg line="-d ./disableImportPageImpressionsPublish@Delete=true"/>
			<arg line="http://${demo.host}:${port}/etc/cloudservices/sitecatalyst/demomachine/jcr:content"/>
		</exec>
		<exec executable="curl">
			<arg line="--output '${logs}/${port}_analytics_reportsuite.html'"/>
			<arg line="-u admin:${demo.admin.password}"/>
			<arg line="-X POST"/>
			<arg line="--data-urlencode './reportsuite=${AdobeAnalytics.reportsuite}'"/>
			<arg line="--data-urlencode './reportsuites=${AdobeAnalytics.reportsuite};publish'"/>
			<arg line="http://${demo.host}:${port}/etc/cloudservices/sitecatalyst/demomachine/demomachine/jcr:content/public"/>
		</exec>
	</target>
	<target name="assets_insights" if="aem62orlater" depends="version,configuration,community_loader_flag">
		<!-- Adds Assets Insights -->
		<if>
			<and>
				<equals arg1="${demo.assets.insights.install}" arg2="true" casesensitive="false"/>
				<equals arg1="${port}" arg2="${demomachine.authorport}" casesensitive="false"/>
			</and>
			<then>
				<echo message="Configure Assets Insights"/>
				<!-- Credentials for Cloud Service -->
				<exec executable="curl">
					<arg line="--output '${logs}/${port}_analytics_insights.html'"/>
					<arg line="-u admin:${demo.admin.password}"/>
					<arg line="-X POST"/>
					<arg line="--data-urlencode './password=${AdobeAnalytics.password}'"/>
					<arg line="-d ./password@Encrypted="/>
					<arg line="--data-urlencode './secret=${AdobeAnalytics.secret}'"/>
					<arg line="-d ./secret@Encrypted="/>
					<arg line="--data-urlencode './username=${AdobeAnalytics.username}'"/>
					<arg line="-d ./server=${AdobeAnalytics.server}"/>
					<arg line="--data-urlencode './company=${AdobeAnalytics.company}'"/>
					<arg line="-d ./disableImportPageImpressionsAuthor@Delete=true"/>
					<arg line="-d ./disableImportPageImpressionsPublish@Delete=true"/>
					<arg line="http://${demo.host}:${port}/etc/cloudservices/sitecatalyst/assetinsights/jcr:content"/>
				</exec>
				<!-- Imports every hour -->
				<exec executable="curl">
					<arg line="--output '${logs}/${port}_analytics_insights_scheduler.html'"/>
					<arg line="-u admin:${demo.admin.password}"/>
					<arg line="-X POST"/>
					<arg line="--globoff"/>
					<arg line="-d apply=true"/>
					<arg line="-d action=ajaxConfigManager"/>
					<arg line="-d $location="/>
					<arg line="--data-urlencode 'scheduler.expression=0 0 * * * ?'"/>
					<arg line="-d propertylist=scheduler.expression"/>
					<arg line="http://${demo.host}:${port}/system/console/configMgr/com.day.cq.dam.performance.internal.AssetPerformanceReportSyncJob"/>
				</exec>
				<if>
					<equals arg1="${demo.assets.insights.analytics}" arg2="true" casesensitive="false"/>
					<then>
						<java classname="com.adobe.aem.demomachine.communities.Loader">
							<classpath refid="demo.classpath"/>
							<arg line="-h ${demo.host} -p ${demomachine.authorport} -a ${demomachine.publishport} -u ${demo.admin.password} -s &quot;${demo.assets.insights.reportsuite}.d3.sc.omtrdc.net/b/ss//6&quot; -f &quot;${dist}/analytics/loader-assets-insights.csv&quot; ${demo.loader.configureflag} ${demo.loader.resetflag} -t"/>
						</java>
					</then>
				</if>
			</then>
		</if>
	</target>
	<!-- Adobe DPS: configuring Adobe Digital Publishing Solution Client -->
	<target name="dps">
		<if>
			<equals arg1="${AdobeDPS.install}" arg2="true" casesensitive="false"/>
			<then>
				<echo message="Configuring DPS client"/>
				<exec executable="curl">
					<arg line="--output '${logs}/${port}_dpsclient.html'"/>
					<arg line="-u admin:${demo.admin.password}"/>
					<arg line="-X POST"/>
					<arg line="--globoff"/>
					<arg line="-d apply=true"/>
					<arg line="-d action=ajaxConfigManager"/>
					<arg line="-d $location="/>
					<arg line="--data-urlencode 'clientId=${AdobeDPS.clientId}'"/>
					<arg line="--data-urlencode 'clientSecret=${AdobeDPS.clientSecret}'"/>
					<arg line="-d minThreadPoolSize=10"/>
					<arg line="-d maxThreadPoolSize=20"/>
					<arg line="-d accessTokenExpiryInMinutes=30"/>
					<arg line="-d environment="/>
					<arg line="-d propertylist=clientId,clientSecret,minThreadPoolSize,maxThreadPoolSize,accessTokenExpiryInMinutes,environment"/>
					<arg line="http://${demo.host}:${port}/system/console/configMgr/com.adobe.cq.mobile.dps.impl.service.AdobeDPSClient"/>
				</exec>
				<echo message="Configuring DPS cloud service"/>
				<exec executable="curl">
					<arg line="--output '${logs}/${port}_dpscloudservice.html'"/>
					<arg line="-u admin:${demo.admin.password}"/>
					<arg line="-X POST"/>
					<arg line="--data-urlencode './dpsDeviceToken=${AdobeDPS.deviceToken}'"/>
					<arg line="-d ./dpsDeviceToken@Encrypted="/>
					<arg line="--data-urlencode './dpsDeviceId=${AdobeDPS.deviceId}'"/>
					<arg line="-d ./dpsDeviceId@Encrypted="/>
					<arg line="-d ./sling:resourceType=mobileapps/dps/components/dps-cloudservice-config"/>
					<arg line="http://${demo.host}:${port}/etc/cloudservices/dps2015/demomachine/jcr:content"/>
				</exec>
			</then>
			<else>
				<exec executable="curl">
					<arg line="--output '${logs}/${port}_dps_delete_demo.html'"/>
					<arg line="-u admin:${demo.admin.password}"/>
					<arg line="-X DELETE"/>
					<arg line="http://${demo.host}:${port}/etc/cloudservices/dps2015/demomachine"/>
				</exec>
			</else>
		</if>
	</target>
	<!-- Adobe Target: posting email, client code and password -->
	<target name="target">
		<if>
			<equals arg1="${AdobeTarget.install}" arg2="true" casesensitive="false"/>
			<then>
				<echo message="Configuring Target cloud service"/>
				<foreach target="package" param="package">
					<path id="standard.package">
						<fileset dir="${dist}/tt/packages" casesensitive="yes">
							<include name="all/**/*.zip"/>
							<include name="${demo.packages}/**/*.zip"/>
						</fileset>
					</path>
				</foreach>
				<exec executable="curl">
					<arg line="--output '${logs}/${port}_target.html'"/>
					<arg line="-u admin:${demo.admin.password}"/>
					<arg line="-X POST"/>
					<arg line="--data-urlencode './password=${AdobeTarget.password}'"/>
					<arg line="-d ./password@Encrypted="/>
					<arg line="--data-urlencode './email=${AdobeTarget.email}'"/>
					<arg line="--data-urlencode './public/clientcode=${AdobeTarget.clientcode}'"/>
					<arg line="http://${demo.host}:${port}/etc/cloudservices/testandtarget/demomachine/jcr:content"/>
				</exec>
			</then>
		</if>
	</target>
	<!-- Adobe Mobile Services: posting username, password and secret key for encryption wiht local instance keys -->
	<target name="mobileservices" if="aem61orlater" depends="version">
		<if>
			<equals arg1="${AdobeMobileServices.install}" arg2="true" casesensitive="false"/>
			<then>
				<echo message="Configuring Mobile Analytics cloud service"/>
				<exec executable="curl">
					<arg line="--output '${logs}/${port}_mobileservices.html'"/>
					<arg line="-u admin:${demo.admin.password}"/>
					<arg line="-X POST"/>
					<arg line="--data-urlencode './password=${AdobeMobileServices.password}'"/>
					<arg line="-d ./password@Encrypted="/>
					<arg line="-d ./secret=${AdobeMobileServices.secret}"/>
					<arg line="-d ./secret@Encrypted="/>
					<arg line="-d ./username=${AdobeMobileServices.username}"/>
					<arg line="-d ./server=${AdobeMobileServices.server}"/>
					<arg line="-d ./company=${AdobeMobileServices.company}"/>
					<arg line="http://${demo.host}:${port}/etc/cloudservices/mobileservices/amsconfig/jcr:content"/>
				</exec>
				<echo message="Associating Mobile Analytics cloud service to Geometrixx Outdoors app"/>
				<if>
					<equals arg1="${demo.packages}" arg2="aem61" casesensitive="false"/>
					<then>
						<exec executable="curl">
							<arg line="--output '${logs}/${port}_mobileservices_shell_aem61.html'"/>
							<arg line="-u admin:${demo.admin.password}"/>
							<arg line="-X POST"/>
							<arg line="-d appInstance=/content/phonegap/geometrixx-outdoors/shell"/>
							<arg line="-d mobileServiceConfig=/etc/cloudservices/mobileservices/amsconfig/geometrixx-outdoors"/>
							<arg line="-d :operation=mobileapps:appMetrics"/>
							<arg line="http://${demo.host}:${port}/libs/mobileapps/admin/content/dashboard.html/content/phonegap/geometrixx-outdoors/shell"/>
						</exec>
					</then>
					<else>
						<exec executable="curl">
							<arg line="--output '${logs}/${port}_mobileservices_shell.html'"/>
							<arg line="-u admin:${demo.admin.password}"/>
							<arg line="-X POST"/>
							<arg line="-d mac.provisioning.automatic=false"/>
							<arg line="-d cloudConfig=/etc/cloudservices/mobileservices/amsconfig/geometrixx-outdoors"/>
							<arg line="-d cloudConfigField=mobileServiceConfig"/>
							<arg line="-d targetPaths=/content/phonegap/geometrixx-outdoors/shell"/>
							<arg line="-d cloudServiceName=mobileservices"/>
							<arg line="-d cloudConfigCreate=false"/>
							<arg line="-d :operation=mobileapps:cloudService"/>
							<arg line="http://${demo.host}:${port}/content/phonegap/geometrixx-outdoors/shell.html"/>
						</exec>
					</else>
				</if>
			</then>
		</if>
	</target>
	<!-- Adobe PhoneGap Build: posting username, password for encryption wiht local instance keys -->
	<target name="phonegapbuild" if="aem61orlater" depends="version">
		<if>
			<equals arg1="${AdobePhoneGapBuild.install}" arg2="true" casesensitive="false"/>
			<then>
				<echo message="Configuring PhoneGap Build cloud service"/>
				<exec executable="curl">
					<arg line="--output '${logs}/${port}_phonegapbuild.html'"/>
					<arg line="-u admin:${demo.admin.password}"/>
					<arg line="-X POST"/>
					<arg line="--data-urlencode './pgBuildPassword=${AdobePhoneGapBuild.password}'"/>
					<arg line="-d ./pgBuildPassword@Encrypted="/>
					<arg line="-d ./pgBuildUserId=${AdobePhoneGapBuild.user}"/>
					<arg line="http://${demo.host}:${port}/etc/cloudservices/phonegap-build/phonegap-build/jcr:content"/>
				</exec>
				<echo message="Associating PhoneGap Build cloud service to Geometrixx Outdoors app"/>
				<if>
					<equals arg1="${demo.packages}" arg2="aem61" casesensitive="false"/>
					<then>
						<exec executable="curl">
							<arg line="--output '${logs}/${port}_phonegapbuild_shell_aem61.html'"/>
							<arg line="-u admin:${demo.admin.password}"/>
							<arg line="-X POST"/>
							<arg line="-d appInstance=/content/phonegap/geometrixx-outdoors/shell"/>
							<arg line="-d phonegapConfig=/etc/cloudservices/phonegap-build/phonegap-build"/>
							<arg line="-d :operation=mobileapps:phoneGapBuildSettings"/>
							<arg line="http://${demo.host}:${port}/libs/mobileapps/admin/content/dashboard.html/content/phonegap/geometrixx-outdoors/shell"/>
						</exec>
					</then>
					<else>
						<exec executable="curl">
							<arg line="--output '${logs}/${port}_phonegapbuild_shell.html'"/>
							<arg line="-u admin:${demo.admin.password}"/>
							<arg line="-X POST"/>
							<arg line="-d mac.provisioning.automatic=false"/>
							<arg line="-d cloudConfig=/etc/cloudservices/phonegap-build/phonegap-build"/>
							<arg line="-d cloudConfigField=phonegapConfig"/>
							<arg line="-d targetPaths=/content/phonegap/geometrixx-outdoors/shell"/>
							<arg line="-d cloudServiceName=phonegap-build"/>
							<arg line="-d cloudConfigCreate=false"/>
							<arg line="-d :operation=mobileapps:cloudService"/>
							<arg line="http://${demo.host}:${port}/content/phonegap/geometrixx-outdoors/shell.html"/>
						</exec>
					</else>
				</if>
			</then>
		</if>
	</target>
	<!-- Adobe AEM Assets: enabling the Home page feature -->
	<target name="assets_homepage" if="aem61orlater">
		<if>
			<equals arg1="${demo.assets.homepage}" arg2="true" casesensitive="false"/>
			<then>
				<exec executable="curl">
					<arg line="--output '${logs}/${port}_assetshomepage.html'"/>
					<arg line="-u admin:${demo.admin.password}"/>
					<arg line="-X POST"/>
					<arg line="--globoff"/>
					<arg line="-d apply=true"/>
					<arg line="-d action=ajaxConfigManager"/>
					<arg line="-d $location="/>
					<arg line="-d isEnabled=true"/>
					<arg line="-d isEnabled=false"/>
					<arg line="-d propertylist=isEnabled"/>
					<arg line="http://${demo.host}:${port}/system/console/configMgr/com.day.cq.dam.core.impl.assethome.AssetHomePageConfiguration"/>
				</exec>
				<exec executable="curl">
					<arg line="--output '${logs}/${port}_assetsrecorder.html'"/>
					<arg line="-u admin:${demo.admin.password}"/>
					<arg line="-X POST"/>
					<arg line="--globoff"/>
					<arg line="-d apply=true"/>
					<arg line="-d action=ajaxConfigManager"/>
					<arg line="-d $location="/>
					<arg line="-d event.filter=(!(event.application=*))"/>
					<arg line="-d eventrecorder.enabled=true"/>
					<arg line="-d eventrecorder.enabled=false"/>
					<arg line="-d eventrecorder.blacklist="/>
					<arg line="-d eventrecorder.eventtypes=ASSET_CREATED"/>
					<arg line="-d eventrecorder.eventtypes=DOWNLOADED"/>
					<arg line="-d eventrecorder.eventtypes=VERSIONED"/>
					<arg line="-d eventrecorder.eventtypes=ASSET_VIEWED"/>
					<arg line="-d eventrecorder.eventtypes=ASSET_SHARED"/>
					<arg line="-d eventrecorder.eventtypes=ASSET_PUBLISHED"/>
					<arg line="-d eventrecorder.eventtypes=PROJECT_VIEWED"/>
					<arg line="-d eventrecorder.eventtypes=COLLECTION_VIEWED"/>
					<arg line="-d eventrecorder.eventtypes=ADDED_COMMENT"/>
					<arg line="-d propertylist=event.filter,eventrecorder.enabled,eventrecorder.blacklist,eventrecorder.eventtypes"/>
					<arg line="http://${demo.host}:${port}/system/console/configMgr/com.day.cq.dam.core.impl.DamEventRecorderImpl"/>
				</exec>
			</then>
		</if>
	</target>
	<!-- Adobe AEM Assets: enabling version linking on save via WebDav -->
	<target name="assets_versions" if="aem61orlater">
		<exec executable="curl">
			<arg line="--output '${logs}/${port}_assetsversions.html'"/>
			<arg line="-u admin:${demo.admin.password}"/>
			<arg line="-X POST"/>
			<arg line="--globoff"/>
			<arg line="-d apply=true"/>
			<arg line="-d action=ajaxConfigManager"/>
			<arg line="-d $location="/>
			<arg line="-d cq.dam.webdav.version.linking.enable=true"/>
			<arg line="-d cq.dam.webdav.version.linking.enable=false"/>
			<arg line="-d cq.dam.webdav.version.linking.scheduler.period=5"/>
			<arg line="-d cq.dam.webdav.version.linking.staging.timeout=10"/>
			<arg line="-d propertylist=cq.dam.webdav.version.linking.enable,cq.dam.webdav.version.linking.scheduler.period,cq.dam.webdav.version.linking.staging.timeout"/>
			<arg line="http://${demo.host}:${port}/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.DamWebdavVersionLinkingJob"/>
		</exec>
	</target>
	<!-- Adobe AEM Assets: enabling smart tags -->
	<target name="assets_smarttags" if="aem62orlater" depends="version,configuration">
		<if>
			<equals arg1="${demo.assets.smarttags.install}" arg2="true" casesensitive="false"/>
			<then>
				<echo message="Configuring AEM Assets Smart Tags"/>
				<exec executable="curl">
					<arg line="--output '${logs}/${port}_assetsfeatureflag.html'"/>
					<arg line="-u admin:${demo.admin.password}"/>
					<arg line="-X POST"/>
					<arg line="--globoff"/>
					<arg line="-d apply=true"/>
					<arg line="-d action=ajaxConfigManager"/>
					<arg line="-d $location="/>
					<arg line="-d feature.flag.active.status=true"/>
					<arg line="-d feature.flag.active.status=false"/>
					<arg line="-d propertylist=feature.flag.active.status"/>
					<arg line="http://${demo.host}:${port}/system/console/configMgr/com.day.cq.dam.similaritysearch.internal.impl.AutoTagAssetFeatureFlag"/>
				</exec>
				<echo message="Creating Smart Tagging cloud service"/>
				<exec executable="curl">
					<arg line="--output '${logs}/${port}_smarttag_cloudservice.html'"/>
					<arg line="-u admin:${demo.admin.password}"/>
					<arg line="--globoff"/>
					<arg line="-X POST"/>
					<arg line="-d cmd=createPage"/>
					<arg line="-d _charset_=utf-8"/>
					<arg line="-d parentPath=/etc/cloudservices/smarttagging"/>
					<arg line="-d title=DemoMachine"/>
					<arg line="-d label=DemoMachine"/>
					<arg line="-d template=/libs/dam/templates/smarttagging"/>
					<arg line="http://${demo.host}:${port}/bin/wcmcommand"/>
				</exec>
				<echo message="Configuring Smart Tagging cloud service"/>
				<exec executable="curl" output="${logs}/${port}_smarttag_settingscurl.html">
					<arg line="--output '${logs}/${port}_smarttag_settings.html'"/>
					<arg line="-u admin:${demo.admin.password}"/>
					<arg line="-X POST"/>
					<arg line="--data-urlencode './serviceUrl=${demo.assets.smarttags.url}'"/>
					<arg line="--data-urlencode './authServerUrl=none'"/>
					<arg line="--data-urlencode './apiKey=none'"/>
					<arg line="--data-urlencode './techAcctId=none'"/>
					<arg line="--data-urlencode './orgId=none'"/>
					<arg line="--data-urlencode './clientSecret=none'"/>
					<arg line="--data-urlencode './clientSecret@Encrypted='"/>
					<arg line="-d ./sling:resourceType=dam/components/smarttaggingservicepage"/>
					<arg line="http://${demo.host}:${port}/etc/cloudservices/smarttagging/DemoMachine/jcr:content"/>
				</exec>
				<exec executable="curl">
					<arg line="--output '${logs}/${port}_assetstaggingservice.html'"/>
					<arg line="-u admin:${demo.admin.password}"/>
					<arg line="-X POST"/>
					<arg line="--globoff"/>
					<arg line="-d apply=true"/>
					<arg line="-d action=ajaxConfigManager"/>
					<arg line="-d $location="/>
					<arg line="-d bypass.auth=true"/>
					<arg line="-d indexed.rendition=cq5dam.thumbnail.319.319.png"/>
					<arg line="-d max.tags=${demo.assets.smarttags.maxtags}"/>
					<arg line="-d min.tag.confidence=${demo.assets.smarttags.minconfidence}"/>
					<arg line="-d propertylist=bypass.auth,indexed.rendition,max.tags,min.tag.confidence"/>
					<arg line="http://${demo.host}:${port}/system/console/configMgr/com.day.cq.dam.similaritysearch.internal.impl.SimilaritySearchServiceImpl"/>
				</exec>
				<!-- Inserting the Smart Tag extraction task to the DAM update workflow -->
				<exec executable="curl">
					<arg line="--output '${logs}/${port}_assetsworkflowinserttask.html'"/>
					<arg line="-u admin:${demo.admin.password}"/>
					<arg line="-X POST"/>
					<arg line="--globoff"/>
					<arg line="-d ./jcr:description='This process will add smart tags to assets.'"/>
					<arg line="-d ./jcr:title='Smart Tag Asset Process'"/>
					<arg line="-d ./PROCESS_AUTO_ADVANCE=true"/>
					<arg line="-d ./PROCESS=com.day.cq.dam.similaritysearch.internal.workflow.process.AutoTagAssetProcess"/>
					<arg line="-d _charset_=utf-8"/>
					<arg line="-d ./sling:resourceType=dam/components/workflow/autotagassetprocess"/>
					<arg line="-d :nameHint=autotagassetprocess"/>
					<arg line="-d parentResourceType=cq/flow/components/parsys"/>
					<arg line="-d :order='before commandlineprocess'"/>
					<arg line="http://${demo.host}:${port}/etc/workflow/models/dam/update_asset/jcr:content/flow/"/>
				</exec>
				<exec executable="curl">
					<arg line="--output '${logs}/${port}_assetsworkflowupdatetask.html'"/>
					<arg line="-u admin:${demo.admin.password}"/>
					<arg line="-X POST"/>
					<arg line="--globoff"/>
					<arg line="-d _charset_=utf-8"/>
					<arg line="-d ./PROCESS_AUTO_ADVANCE@Delete="/>
					<arg line="-d ./metaData/PROCESS_AUTO_ADVANCE=true"/>
					<arg line="-d ./PROCESS@Delete="/>
					<arg line="-d ./metaData/PROCESS=com.day.cq.dam.similaritysearch.internal.workflow.process.AutoTagAssetProcess"/>
					<arg line="http://${demo.host}:${port}/etc/workflow/models/dam/update_asset/jcr:content/flow/autotagassetprocess"/>
				</exec>
				<!-- Saving the workflow model -->
				<exec executable="curl">
					<arg line="--output '${logs}/${port}_assetsworkflowsave.html'"/>
					<arg line="-u admin:${demo.admin.password}"/>
					<arg line="-X POST"/>
					<arg line="http://${demo.host}:${port}/etc/workflow/models/dam/update_asset/jcr:content.generate.json"/>
				</exec>
				<!-- For each folder where we need to set the Smart Tag property -->
				<propertyselector property="folders" match="demo.assets.smarttags.folders\.([^\.]*)" select="\1" casesensitive="false"/>
				<foreach list="${folders}" target="assetsfolder" param="myparam"/>
			</then>
		</if>
	</target>
	<target name="assetsfolder">
		<propertycopy property="folder" from="demo.assets.smarttags.folders.${myparam}"/>
		<echo message="Enabling Smart Tagging on folder ${folder}"/>
		<exec executable="curl">
			<arg line="--output '${logs}/${port}_assetsfolder_${myparam}'"/>
			<arg line="-u admin:${demo.admin.password}"/>
			<arg line="-X POST"/>
			<arg line="-d autotag=true"/>
			<arg line="http://${demo.host}:${port}${folder}/jcr:content"/>
		</exec>
	</target>
	<!-- Brightedge Content Optimizer: posting password for encryption wiht local instance keys -->
	<target name="brightedge" if="aem60orlater">
		<if>
			<equals arg1="${BrightEdge.install}" arg2="true" casesensitive="false"/>
			<then>
				<echo message="Creating Brightedge cloud service"/>
				<exec executable="curl">
					<arg line="--output '${logs}/${port}_brightedge_create.html'"/>
					<arg line="-u admin:${demo.admin.password}"/>
					<arg line="--globoff"/>
					<arg line="-X POST"/>
					<arg line="-d cmd=createPage"/>
					<arg line="-d _charset_=utf-8"/>
					<arg line="-d parentPath=/etc/cloudservices/brightedge"/>
					<arg line="-d title=DemoMachine"/>
					<arg line="-d label=DemoMachine"/>
					<arg line="-d template=/libs/cq/contentinsight/templates/brightedge-cloudservice-config"/>
					<arg line="http://${demo.host}:${port}/bin/wcmcommand"/>
				</exec>
				<echo message="Configuring BrightEdge cloud service"/>
				<exec executable="curl">
					<arg line="--output '${logs}/${port}_brightedge_configure.html'"/>
					<arg line="-u admin:${demo.admin.password}"/>
					<arg line="-X POST"/>
					<arg line="-d ./password=${BrightEdge.password}"/>
					<arg line="-d ./password@Encrypted="/>
					<arg line="-d ./username=${BrightEdge.username}"/>
					<arg line="http://${demo.host}:${port}/etc/cloudservices/brightedge/DemoMachine/jcr:content"/>
				</exec>
			</then>
		</if>
	</target>
	<!-- GlobalLink Translation connector: posting password for encryption wiht local instance keys -->
	<target name="globallink" if="aem61orlater">
		<if>
			<equals arg1="${GlobalLink.install}" arg2="true" casesensitive="false"/>
			<then>
				<exec executable="curl">
					<arg line="--output '${logs}/${port}_globallink.html'"/>
					<arg line="-u admin:${demo.admin.password}"/>
					<arg line="-X POST"/>
					<arg line="-d ./pdUserPassword=${GlobalLink.password}"/>
					<arg line="http://${demo.host}:${port}/etc/cloudservices/gs4tr-translation/demo-globallink/jcr:content"/>
				</exec>
			</then>
		</if>
	</target>
	<!-- Adobe Social communities: set Read, Write and Delete permissions for the community-moderators group -->
	<target name="community-moderators" if="aem60">
		<exec executable="curl">
			<arg line="--output '${logs}/${port}_permissions-moderators.html'"/>
			<arg line="-u admin:${demo.admin.password}"/>
			<arg line="-X POST"/>
			<arg line="-d authorizableId=community-moderators"/>
			<arg line="-d changelog=path:/content/usergenerated/content,read:true,modify:true,create:true,delete:true,acl_read:true,acl_edit:true,replicate:true"/>
			<arg line="http://${demo.host}:${port}/.cqactions.html"/>
		</exec>
	</target>
	<!-- Adobe Social communities: sets the Adobe Social cloud storage for the Paladin Strikes back page -->
	<target name="social_cloudpage" if="aem60">
		<exec executable="curl">
			<arg line="--output '${logs}/${port}_social_cloudpage.html'"/>
			<arg line="-u admin:${demo.admin.password}"/>
			<arg line="-X POST"/>
			<arg line="-d :cancelInheritance=true"/>
			<arg line="-d ./cq:cloudserviceconfigs@Delete"/>
			<arg line="-d ./cq:cloudserviceconfigs=/etc/cloudservices/msft-translation/msft_trial"/>
			<arg line="-d ./cq:cloudserviceconfigs=/etc/cloudservices/socialdatastore/adobe-social"/>
			<arg line="http://${demo.host}:${port}/content/geometrixx-media/en/community/paladin-strikes-back/jcr:content"/>
		</exec>
	</target>
	<!-- FFMPEG: sets the desired list of profiles for video renditions -->
	<target name="ffmpeg">
		<if>
			<equals arg1="${demo.ffmpeg.transcoding}" arg2="false" casesensitive="false"/>
			<then>
				<!-- Locating the FFMPEG transcoding task -->
				<exec executable="curl">
					<arg line="-o '${logs}/${port}_assets_damupdateworkflow.json'"/>
					<arg line="-u admin:${demo.admin.password}"/>
					<arg line="http://${demo.host}:${port}/etc/workflow/models/dam/update_asset/_jcr_content/flow.infinity.json"/>
				</exec>
				<loadfile property="dam.update.workflow.model" srcFile="${logs}/${port}_assets_damupdateworkflow.json"/>
				<propertyregex property="process.id" input="${dam.update.workflow.model}" regexp="process([0-9])&quot;:\{&quot;jcr:primaryType&quot;:&quot;nt:unstructured&quot;,&quot;jcr:title&quot;:&quot;FFmpeg transcoding" select="\1"/>
				<exec executable="curl">
					<arg line="--output '${logs}/${port}_ffmpeg_renditions.html'"/>
					<arg line="-u admin:${demo.admin.password}"/>
					<arg line="-X POST"/>
					<arg line="-d ./PROCESS_ARGS@Delete"/>
					<arg line="http://${demo.host}:${port}/etc/workflow/models/dam/update_asset/jcr:content/flow/process${process.id}/metaData"/>
				</exec>
				<exec executable="curl">
					<arg line="--output '${logs}/${port}_ffmpeg_workflow.html'"/>
					<arg line="-u admin:${demo.admin.password}"/>
					<arg line="-X POST"/>
					<arg line="http://${demo.host}:${port}/etc/workflow/models/dam/update_asset/jcr:content.generate.json"/>
				</exec>
			</then>
		</if>
	</target>
	<!-- This target prepares the Geomedia site for future translation jobs -->
	<target name="translations_geomedia" if="aem61" depends="version,configuration">
		<antcall target="translations_page">
			<param name="translation.language" value="fr"/>
			<param name="translation.title" value="Francais"/>
			<param name="translation.root" value="/content/geometrixx-media"/>
		</antcall>
		<antcall target="translations_page">
			<param name="translation.language" value="es"/>
			<param name="translation.title" value="Espanol"/>
			<param name="translation.root" value="/content/geometrixx-media"/>
		</antcall>
		<antcall target="translations_page">
			<param name="translation.language" value="de"/>
			<param name="translation.title" value="Deutsch"/>
			<param name="translation.root" value="/content/geometrixx-media"/>
		</antcall>
		<exec executable="curl">
			<arg line="--output '${logs}/${port}_translations_page_rename_en.html'"/>
			<arg line="-u admin:${demo.admin.password}"/>
			<arg line="-X POST"/>
			<arg line="-d ./cq:cloudserviceconfigs@Delete"/>
			<arg line="-d ./cq:cloudserviceconfigs=/etc/cloudservices/msft-translation/msft_trial"/>
			<arg line="http://${demo.host}:${port}/content/geometrixx-media/en/jcr:content"/>
		</exec>
	</target>
	<target name="translations_page">
		<!-- First we copy the pages -->
		<exec executable="curl">
			<arg line="--output '${logs}/${port}_translations_page_copy_${translation.language}.html'"/>
			<arg line="-u admin:${demo.admin.password}"/>
			<arg line="-F shallowCbx=on"/>
			<arg line="-F shallow=false"/>
			<arg line="-F cmd=copyPage"/>
			<arg line="-F destName=${translation.language}"/>
			<arg line="-F srcPath=${translation.root}/en"/>
			<arg line="-F destParentPath=${translation.root}/"/>
			<arg line="http://${demo.host}:${port}/bin/wcmcommand"/>
		</exec>
		<!-- Then we rename and associate the cloud server to these pages-->
		<exec executable="curl">
			<arg line="--output '${logs}/${port}_translations_page_rename_${translation.language}.html'"/>
			<arg line="-u admin:${demo.admin.password}"/>
			<arg line="-X POST"/>
			<arg line="-d ./jcr:title='${translation.title}'"/>
			<arg line="-d ./cq:cloudserviceconfigs@Delete"/>
			<arg line="-d ./cq:cloudserviceconfigs=/etc/cloudservices/msft-translation/msft_trial"/>
			<arg line="http://${demo.host}:${port}${translation.root}/${translation.language}/jcr:content"/>
		</exec>
	</target>
	<!-- This target sets some user preferences in advance for some users -->
	<target name="users" depends="version,configuration">
		<echo message="Updating User Preferences on port ${port}..."/>
		<java classname="com.adobe.aem.demomachine.communities.Loader">
			<classpath refid="demo.classpath"/>
			<arg line="-h ${demo.host} -p ${port} -a ${demomachine.publishport} -u ${demo.admin.password} -f &quot;${dist}/users/loader-users.csv&quot; ${demo.loader.configureflag} ${demo.loader.resetflag}"/>
		</java>
	</target>
	<!-- This target loads some content fragments from a .csv file -->
	<target name="sites_fragments" depends="community_loader_flag">
		<echo message="Loading up Content Fragments..."/>
		<java classname="com.adobe.aem.demomachine.communities.Loader">
			<classpath refid="demo.classpath"/>
			<arg line="-h ${demo.host} -p ${demomachine.authorport} -a ${demomachine.authorport} -u ${demo.admin.password} -f &quot;${dist}/community/wizard/loader-fragments.csv&quot; ${demo.loader.configureflag} ${demo.loader.resetflag}"/>
		</java>
	</target>
	<!-- Adobe Dynamic Media: enables dynamic media on the AEM instance for aem61 (replaced with runmode in aem62 and later)-->
	<target name="dynamic_media" if="aem61">
		<echo message="Enabling Dynamic Media server..."/>
		<if>
			<equals arg1="${demo.dynamicmedia}" arg2="true" casesensitive="false"/>
			<then>
				<exec executable="curl">
					<arg line="--output '${logs}/${port}_dynamicmedia.html'"/>
					<arg line="-u admin:${demo.admin.password}"/>
					<arg line="-X POST"/>
					<arg line="-d dynamicMediaEnabled=true"/>
					<arg line="http://${demo.host}:${port}/etc/dam/dynamicmediaconfig"/>
				</exec>
				<!-- Need to restart the bundle for Dynamic Media -->
				<antcall target="bundle_restart">
					<param name="bundle.port" value="${port}"/>
					<param name="bundle.name" value="Adobe CQ DAM Scene7 Dynamic Imaging"/>
				</antcall>
			</then>
		</if>
	</target>
	<!-- Creates a backup file for the demo machine and scripts and other assets, wihch doesn't include the AEM loads/snaphots and license files -->
	<target name="archive" depends="permissions">
		<mkdir dir="${archives}"/>
		<tstamp>
			<format property="archive-file-name" pattern="dd-MMM-yy" locale="en,US"/>
		</tstamp>
		<echo message="Creating an archive for the Forms content..."/>
		<delete file="${archives}/demomachine-${archive-file-name}-forms.zip"/>
		<zip destfile="${archives}/demomachine-${archive-file-name}-forms.zip" basedir="." includes="dist/forms/**" excludes="dist/forms/**/aem61-forms*.zip"/>
		<copy file="${archives}/demomachine-${archive-file-name}-forms.zip" tofile="${archives}/aem-demomachine-forms.zip" overwrite="true"/>
		<echo message="Creating an archive for the Assets content..."/>
		<delete file="${archives}/demomachine-${archive-file-name}-assets.zip"/>
		<zip destfile="${archives}/demomachine-${archive-file-name}-assets.zip" basedir="." includes="dist/assets/**"/>
		<copy file="${archives}/demomachine-${archive-file-name}-assets.zip" tofile="${archives}/aem-demomachine-assets.zip" overwrite="true"/>
		<echo message="Creating an archive for the Sites content..."/>
		<delete file="${archives}/demomachine-${archive-file-name}-sites.zip"/>
		<zip destfile="${archives}/demomachine-${archive-file-name}-sites.zip" basedir="." includes="dist/sites/**" excludes="dist/sites/**/*-fp*.zip"/>
		<copy file="${archives}/demomachine-${archive-file-name}-sites.zip" tofile="${archives}/aem-demomachine-sites.zip" overwrite="true"/>
		<echo message="Creating an archive for the Apps content..."/>
		<delete file="${archives}/demomachine-${archive-file-name}-apps.zip"/>
		<zip destfile="${archives}/demomachine-${archive-file-name}-apps.zip" basedir="." includes="dist/apps/**" excludes="dist/apps/**/*-fp*.zip"/>
		<copy file="${archives}/demomachine-${archive-file-name}-apps.zip" tofile="${archives}/aem-demomachine-apps.zip" overwrite="true"/>
	</target>
	<!-- Creates a backup file for a specific demo image using an external script -->
	<target name="backup" depends="permissions,configuration">
		<antcall target="stop"/>
		<if>
			<resourceexists>
				<file file="${demos}/${demo.build}/author/aem-author-p${demomachine.authorport}.jar"/>
			</resourceexists>
			<then>
				<echo message="Creating a snapshot for AUTHOR demo ${demo.build}..."/>
				<exec executable="${bin}/demosnapshot.sh" dir="${bin}" spawn="false">
					<arg line="-c -f -p ${demos}/${demo.build}/author"/>
				</exec>
			</then>
		</if>
		<if>
			<resourceexists>
				<file file="${demos}/${demo.build}/publish/aem-publish-p${demomachine.publishport}.jar"/>
			</resourceexists>
			<then>
				<echo message="Creating a snapshot for PUBLISH demo ${demo.build}..."/>
				<exec executable="${bin}/demosnapshot.sh" dir="${bin}" spawn="false">
					<arg line="-c -f -p ${demos}/${demo.build}/publish"/>
				</exec>
			</then>
		</if>
		<if>
			<resourceexists>
				<file file="${demos}/${demo.build}/farm/aem-publish-p${demomachine.farmport}.jar"/>
			</resourceexists>
			<then>
				<echo message="Creating a snapshot for FARM demo ${demo.build}..."/>
				<exec executable="${bin}/demosnapshot.sh" dir="${bin}" spawn="false">
					<arg line="-c -f -p ${demos}/${demo.build}/farm"/>
				</exec>
			</then>
		</if>
	</target>
	<!-- Restores a backup file for a specific demo image using an external script -->
	<target name="restore" depends="permissions,configuration">
		<antcall target="stop"/>
		<if>
			<resourceexists>
				<file file="${demos}/${demo.build}/author/crx-quickstart-demo-snapshot.tar"/>
			</resourceexists>
			<then>
				<echo message="Restoring a snapshot for AUTHOR demo ${demo.build}..."/>
				<exec executable="${bin}/demosnapshot.sh" dir="${bin}" spawn="false">
					<arg line="-r -f -p ${demos}/${demo.build}/author"/>
				</exec>
			</then>
		</if>
		<if>
			<resourceexists>
				<file file="${demos}/${demo.build}/publish/crx-quickstart-demo-snapshot.tar"/>
			</resourceexists>
			<then>
				<echo message="Restoring a snapshot for PUBLISH demo ${demo.build}..."/>
				<exec executable="${bin}/demosnapshot.sh" dir="${bin}" spawn="false">
					<arg line="-r -f -p ${demos}/${demo.build}/publish"/>
				</exec>
			</then>
		</if>
		<if>
			<resourceexists>
				<file file="${demos}/${demo.build}/farm/crx-quickstart-demo-snapshot.tar"/>
			</resourceexists>
			<then>
				<echo message="Restoring a snapshot for FARM demo ${demo.build}..."/>
				<exec executable="${bin}/demosnapshot.sh" dir="${bin}" spawn="false">
					<arg line="-r -f -p ${demos}/${demo.build}/farm"/>
				</exec>
			</then>
		</if>
	</target>
	<!-- Target for compiling the Communities Reference Demo site -->
	<target name="communities_build_reference">
		<delete dir="${dist}/community/reference"/>
		<echo message="Building the core AEM Communities reference demo..."/>
		<exec dir="${dist}/community/maven/reference" executable="${demo.mvn}" spawn="false" failonerror="true">
			<arg line="clean install"/>
		</exec>
		<copy todir="${dist}/community/reference" overwrite="true">
			<fileset dir="${dist}/community/maven/reference/target">
				<include name="*.zip"/>
			</fileset>
		</copy>
	</target>
	<!-- Target for compiling the Communities Scoring Demo site -->
	<target name="communities_build_scoring">
		<delete dir="${dist}/community/scoring"/>
		<echo message="Building the core AEM Communities scoring demo..."/>
		<exec dir="${dist}/community/maven/scoring" executable="${demo.mvn}" spawn="false" failonerror="true">
			<arg line="clean install"/>
		</exec>
		<copy todir="${dist}/community/scoring" overwrite="true">
			<fileset dir="${dist}/community/maven/scoring/target">
				<include name="*.zip"/>
			</fileset>
		</copy>
	</target>
	<!-- Target for compiling the Communities Enablement Demo site -->
	<target name="communities_build_enablement">
		<delete dir="${dist}/community/enablement"/>
		<echo message="Building the core AEM Communities enablement demo..."/>
		<exec dir="${dist}/community/maven/enablement" executable="${demo.mvn}" spawn="false" failonerror="true">
			<arg line="clean install"/>
		</exec>
		<copy todir="${dist}/community/enablement" overwrite="true">
			<fileset dir="${dist}/community/maven/enablement/target">
				<include name="*.zip"/>
			</fileset>
		</copy>
	</target>
	<!-- Target for compiling the Communities Demo sites -->
	<target name="communities_build" depends="compile">
		<antcall target="communities_build_reference"/>
		<antcall target="communities_build_scoring"/>
		<antcall target="communities_build_enablement"/>
	</target>
	<!-- Target for building the AEM Demo Machine core bundle -->
	<target name="compile">
		<if>
			<and>
				<equals arg1="${demo.compile}" arg2="true" casesensitive="false"/>
				<not>
					<equals arg1="${ant.java.version}" arg2="1.6" casesensitive="false"/>
				</not>
			</and>
			<then>
				<delete dir="${java}/libs/demomachine"/>
				<echo message="Building the core AEM Demo Machine java module..."/>
				<exec dir="${java}/core" executable="${demo.mvn}" spawn="false" failonerror="true">
					<arg line="clean install"/>
				</exec>
				<copy todir="${java}/libs/demomachine" overwrite="true">
					<fileset dir="${java}/core/target">
						<include name="*.jar"/>
					</fileset>
				</copy>
			</then>
		</if>
	</target>
	<!-- Target for intepreting flags for loader routine -->
	<target name="community_loader_flag" depends="configuration">
		<if>
			<equals arg1="${demo.loader.reset}" arg2="true" casesensitive="false"/>
			<then>
				<property name="demo.loader.resetflag" value="-r"/>
			</then>
			<else>
				<property name="demo.loader.resetflag" value=""/>
			</else>
		</if>
		<if>
			<equals arg1="${demo.loader.configure}" arg2="true" casesensitive="false"/>
			<then>
				<property name="demo.loader.configureflag" value="-c"/>
			</then>
			<else>
				<property name="demo.loader.configureflag" value=""/>
			</else>
		</if>
		<if>
			<equals arg1="${demo.communities.samples.analytics}" arg2="true" casesensitive="false"/>
			<then>
				<property name="demo.loader.analytics" value="&amp;analytics=${AdobeAnalytics.reportsuite}.d3.sc.omtrdc.net/b/ss//6"/>
			</then>
			<else>
				<property name="demo.loader.analytics" value=""/>
			</else>
		</if>
		<if>
			<equals arg1="${demo.communities.samples.minimize}" arg2="true" casesensitive="false"/>
			<then>
				<property name="demo.loader.minimize" value="&amp;minimize=on"/>
			</then>
			<else>
				<property name="demo.loader.minimize" value=""/>
			</else>
		</if>
		<if>
			<equals arg1="${demo.communities.samples.noenablement}" arg2="true" casesensitive="false"/>
			<then>
				<property name="demo.loader.noenablement" value="&amp;noenablement=on"/>
			</then>
			<else>
				<property name="demo.loader.noenablement" value=""/>
			</else>
		</if>
		<if>
			<equals arg1="${demo.communities.samples.nomultilingual}" arg2="true" casesensitive="false"/>
			<then>
				<property name="demo.loader.nomultilingual" value="&amp;nomultilingual=on"/>
			</then>
			<else>
				<property name="demo.loader.nomultilingual" value=""/>
			</else>
		</if>
	</target>
	<!-- Target for loading a CSV file with UGC into the author instance -->
	<target name="community_loader_author" depends="community_loader_flag">
		<java classname="com.adobe.aem.demomachine.communities.Loader">
			<classpath refid="demo.classpath"/>
			<arg line="-h ${demo.host} -p ${demomachine.authorport} -u ${demo.admin.password} -a ${demomachine.publishport} -f &quot;${demo.loader.currentfile}&quot; ${demo.loader.configureflag} ${demo.loader.resetflag}"/>
		</java>
		<echo message="command line: -h ${demo.host} -p ${demomachine.authorport} -u ${demo.admin.password} -a ${demomachine.publishport} -f &quot;${demo.loader.currentfile}&quot; ${demo.loader.configureflag} ${demo.loader.resetflag}"/>
	</target>
	<!-- Target for loading a CSV file with UGC into a demo instance which might happen just on author (if MSRP or DSRP or ASRP), or on multiple instances -->
	<target name="community_loader" depends="community_loader_flag">
		<if>
			<socket server="${demo.host}" port="${demomachine.publishport}"/>
			<then>
				<echo message="Loading Community content on Publish ${demo.loader.currentfile}..."/>
				<java classname="com.adobe.aem.demomachine.communities.Loader">
					<classpath refid="demo.classpath"/>
					<arg line="-h ${demo.host} -p ${demomachine.publishport} -u ${demo.admin.password} -a ${demomachine.publishport} -f &quot;${demo.loader.currentfile}&quot; ${demo.loader.configureflag} ${demo.loader.resetflag}"/>
				</java>
			</then>
		</if>
	</target>
	<!-- Target for loading all available CSV files for community content into a demo instance -->
	<target name="community_loader_content" depends="community_loader_flag">
		<!-- We only process the Samples files if ASRP or MSRP or DSRP is in use (as no content will be there by default) -->
		<if>
			<and>
				<not>
					<equals arg1="${demomachine.srp}" arg2="JSRP" casesensitive="false"/>
				</not>
				<equals arg1="${demo.nosamples}" arg2="false" casesensitive="false"/>
			</and>
			<then>
				<echo message="Updating the Geometrixx Sites with Community content for ${demomachine.srp}"/>
				<foreach target="community_loader" param="demo.loader.currentfile">
					<path id="communities.loader">
						<fileset dir="${dist}/community/samples" casesensitive="yes">
							<include name="**/*.csv"/>
						</fileset>
					</path>
				</foreach>
			</then>
		</if>
		<antcall target="stepbystep"/>
	</target>
	<!-- Target for configuring the We.Retail Community subsite -->
	<target name="weretail" if="aem62orlater" depends="version,configuration">
		<!-- Then we create the We.Retail demo environment -->
		<if>
			<and>
				<equals arg1="${demo.weretail.local}" arg2="true" casesensitive="false"/>
			</and>
			<then>
				<echo message="Loading We.Retail Demo Packages on Author"/>
				<foreach target="package_author" param="package">
					<path id="weretail.packages">
						<fileset dir="${dist}" casesensitive="yes">
							<include name="we-retail/*.zip"/>
							<include name="we-retail/${demo.packages}/*.zip"/>
						</fileset>
					</path>
				</foreach>
				<antcall target="community_patch_weretail">
					<param name="port" value="${demomachine.authorport}"/>
				</antcall>
				<if>
					<socket server="${demo.host}" port="${demomachine.publishport}"/>
					<then>
						<echo message="Loading We.Retail Demo Packages on Publish"/>
						<foreach target="package_publish" param="package">
							<path id="weretail.packages">
								<fileset dir="${dist}" casesensitive="yes">
									<include name="we-retail/*.zip"/>
									<include name="we-retail/${demo.packages}/*.zip"/>
								</fileset>
							</path>
						</foreach>
						<antcall target="community_patch_weretail">
							<param name="port" value="${demomachine.publishport}"/>
						</antcall>
					</then>
				</if>
				<if>
					<socket server="${demo.host}" port="${demomachine.farmport}"/>
					<then>
						<echo message="Loading We.Retail Demo Packages on Farm"/>
						<foreach target="package_farm" param="package">
							<path id="weretail.packages">
								<fileset dir="${dist}" casesensitive="yes">
									<include name="we-retail/*.zip"/>
									<include name="we-retail/${demo.packages}/*.zip"/>
								</fileset>
							</path>
						</foreach>
						<antcall target="community_patch_weretail">
							<param name="port" value="${demomachine.farmport}"/>
						</antcall>
					</then>
				</if>
			</then>
		</if>
		<!-- Then we create the We.Retail demo environment -->
		<if>
			<and>
				<equals arg1="${demo.communities.samples.weretail}" arg2="true" casesensitive="false"/>
			</and>
			<then>
				<antcall target="community_loader_weretail"/>
			</then>
		</if>
	</target>
	<target name="community_patch_weretail" depends="version,configuration">
		<!-- If AEM 6.2 and latest feature packs, small patches needed... -->
		<if>
			<and>
				<equals arg1="${demo.communities.featurepack}" arg2="latest" casesensitive="false"/>
				<equals arg1="${cq.version}" arg2="6.2" casesensitive="false"/>
			</and>
			<then>
				<antcall target="package">
					<param name="package" value="${dist}/community/we-retail/we.retail.apps.communities-1.0.zip"/>
				</antcall>
			</then>
		</if>
	</target>
	<target name="community_loader_weretail" if="aem62orlater" depends="version,community_loader_flag">
		<echo message="Creating AEM Communities We-Retail Demo Site"/>
		<if>
			<socket server="${demo.host}" port="${demomachine.publishport}"/>
			<then>
				<property name="demo.loader.publish" value="&amp;port=${demomachine.publishport}&amp;hostname=${demo.host}"/>
			</then>
			<else>
				<property name="demo.loader.publish" value=""/>
			</else>
		</if>
		<!-- Waiting for the bundles to be available -->
		<sleep seconds="10"/>
		<echo message="Configuring AEM Communities We-Retail Demo Site"/>
		<exec executable="curl">
			<arg line="--output '${logs}/${demomachine.publishport}_weretail_site.html'"/>
			<arg line="-v -u admin:${demo.admin.password}"/>
			<arg line="http://${demo.host}:${demomachine.authorport}/bin/CreateCommunities?password=${demo.admin.password}&amp;port_author=${demomachine.authorport}${demo.loader.publish}&amp;hostname_author=${demo.host}&amp;contentPath=/etc/community/we-retail&amp;maxretries=${demo.loader.maxretries}&amp;setup-1=on&amp;setup-2=on&amp;setup-3=on&amp;setup-4=on&amp;setup-5=on&amp;setup-6=on&amp;setup-7=on&amp;setup-8=on${demo.loader.analytics}${demo.loader.minimize}${demo.loader.noenablement}${demo.loader.nomultilingual}"/>
		</exec>
	</target>
	<!-- Target for loading the reference demo site for AEM Communities -->
	<target name="community_loader_reference" depends="community_loader_flag">
		<echo message="Loading AEM Communities Reference Demo Package"/>
		<foreach target="package_author" param="package">
			<path id="community.packages">
				<fileset dir="${dist}" casesensitive="yes">
					<include name="community/reference/*.zip"/>
				</fileset>
			</path>
		</foreach>
		<!-- Waiting for the bundles to be available -->
		<sleep seconds="10"/>
		<if>
			<socket server="${demo.host}" port="${demomachine.publishport}"/>
			<then>
				<property name="demo.loader.publish" value="&amp;port=${demomachine.publishport}&amp;hostname=${demo.host}"/>
			</then>
			<else>
				<property name="demo.loader.publish" value=""/>
			</else>
		</if>
		<echo message="Configuring AEM Communities Reference Demo Site"/>
		<exec executable="curl">
			<arg line="--output '${logs}/${demomachine.authorport}_reference_site.html'"/>
			<arg line="-v -u admin:${demo.admin.password}"/>
			<arg line="http://${demo.host}:${demomachine.authorport}/bin/CreateCommunities?password=${demo.admin.password}&amp;port_author=${demomachine.authorport}${demo.loader.publish}&amp;hostname_author=${demo.host}&amp;contentPath=/etc/community/reference&amp;maxretries=${demo.loader.maxretries}&amp;setup-1=on&amp;setup-2=on&amp;setup-3=on&amp;setup-4=on&amp;setup-5=on&amp;setup-6=on&amp;setup-7=on&amp;setup-8=on${demo.loader.analytics}${demo.loader.minimize}${demo.loader.noenablement}${demo.loader.nomultilingual}"/>
		</exec>
	</target>
	<!-- Target for loading the extra demo sites for AEM Communities -->
	<target name="community_loader_extra" depends="version,configuration,community_loader_flag">
		<echo message="Loading AEM Communities Scoring Demo Package"/>
		<foreach target="package_author" param="package">
			<path id="community.packages">
				<fileset dir="${dist}" casesensitive="yes">
					<include name="extra/*.zip"/>
				</fileset>
			</path>
		</foreach>
		<if>
			<socket server="${demo.host}" port="${demomachine.publishport}"/>
			<then>
				<foreach target="package_publish" param="package">
					<path id="community.packages">
						<fileset dir="${dist}" casesensitive="yes">
							<include name="extra/*.zip"/>
						</fileset>
					</path>
				</foreach>
			</then>
		</if>
		<!-- Waiting for the bundles to be available -->
		<sleep seconds="10"/>
		<echo message="Configuring AEM Communities Extra Demo Sites"/>
		<foreach target="community_loader_extra_curl" param="extrademo">
			<path id="community.packages">
				<fileset dir="${dist}" casesensitive="yes">
					<include name="extra/*.txt"/>
				</fileset>
			</path>
		</foreach>
	</target>
	<target name="community_loader_extra_curl" depends="version,configuration">
		<if>
			<socket server="${demo.host}" port="${demomachine.publishport}"/>
			<then>
				<property name="demo.loader.publish" value="&amp;port=${demomachine.publishport}&amp;hostname=${demo.host}"/>
			</then>
			<else>
				<property name="demo.loader.publish" value=""/>
			</else>
		</if>
		<loadfile property="extrademocurl" srcFile="${extrademo}"/>
		<basename property="extrademoname" file="${extrademo}"/>
		<echo message="Configuring demo site ${extrademoname}"/>
		<exec executable="curl">
			<arg line="--output '${logs}/${demomachine.authorport}_extra_${extrademoname}.html'"/>
			<arg line="-v -u admin:${demo.admin.password}"/>
			<arg line="http://${demo.host}:${demomachine.authorport}/bin/CreateCommunities?password=${demo.admin.password}&amp;port_author=${demomachine.authorport}${demo.loader.publish}&amp;hostname_author=${demo.host}&amp;${extrademocurl}"/>
		</exec>
	</target>
	<!-- Target for loading the scoring demo site for AEM Communities -->
	<target name="community_loader_scoring" depends="community_loader_flag">
		<echo message="Loading AEM Communities Scoring Demo Package"/>
		<foreach target="package_author" param="package">
			<path id="community.packages">
				<fileset dir="${dist}" casesensitive="yes">
					<include name="community/scoring/*.zip"/>
				</fileset>
			</path>
		</foreach>
		<!-- Waiting for the bundles to be available -->
		<sleep seconds="10"/>
		<echo message="Configuring AEM Communities Scoring Demo Site"/>
		<if>
			<socket server="${demo.host}" port="${demomachine.publishport}"/>
			<then>
				<property name="demo.loader.publish" value="&amp;port=${demomachine.publishport}&amp;hostname=${demo.host}"/>
			</then>
			<else>
				<property name="demo.loader.publish" value=""/>
			</else>
		</if>
		<exec executable="curl">
			<arg line="--output '${logs}/${demomachine.authorport}_scoring_site.html'"/>
			<arg line="-v -u admin:${demo.admin.password}"/>
			<arg line="http://${demo.host}:${demomachine.authorport}/bin/CreateCommunities?password=${demo.admin.password}&amp;port_author=${demomachine.authorport}${demo.loader.publish}&amp;hostname_author=${demo.host}&amp;contentPath=/etc/community/scoringdemo&amp;maxretries=${demo.loader.maxretries}&amp;setup-1=on&amp;setup-2=on&amp;setup-3=on&amp;setup-4=on&amp;setup-5=on&amp;setup-6=on&amp;setup-7=on&amp;setup-8=on"/>
		</exec>
	</target>
	<!-- Target for loading the enablement demo site for AEM Communities -->
	<target name="community_loader_enablement" depends="community_loader_flag">
		<echo message="Loading AEM Communities Enablement Demo Package"/>
		<foreach target="package_author" param="package">
			<path id="community.packages">
				<fileset dir="${dist}" casesensitive="yes">
					<include name="community/enablement/*.zip"/>
				</fileset>
			</path>
		</foreach>
		<!-- Waiting for the bundles to be available -->
		<sleep seconds="10"/>
		<echo message="Configuring AEM Communities Enablement Demo Site"/>
		<if>
			<socket server="${demo.host}" port="${demomachine.publishport}"/>
			<then>
				<property name="demo.loader.publish" value="&amp;port=${demomachine.publishport}&amp;hostname=${demo.host}"/>
			</then>
			<else>
				<property name="demo.loader.publish" value=""/>
			</else>
		</if>
		<exec executable="curl">
			<arg line="--output '${logs}/${demomachine.authorport}_enablement_site.html'"/>
			<arg line="-v -u admin:${demo.admin.password}"/>
			<arg line="http://${demo.host}:${demomachine.authorport}/bin/CreateCommunities?password=${demo.admin.password}&amp;port_author=${demomachine.authorport}${demo.loader.publish}&amp;hostname_author=${demo.host}&amp;contentPath=/etc/community/enablement&amp;maxretries=${demo.loader.maxretries}&amp;setup-1=on&amp;setup-2=on&amp;setup-3=on&amp;setup-4=on&amp;setup-5=on&amp;setup-6=on&amp;setup-7=on&amp;setup-8=on"/>
		</exec>
	</target>
	<!-- Target for waiting for AEM to be available -->
	<target name="community_uber_wait">
		<echo message="Waiting 60 seconds..."/>
		<sleep seconds="60"/>
		<echo message="Waiting for login URL..."/>
		<waitfor maxwait="300" maxwaitunit="second" checkevery="5" checkeveryunit="second">
			<http url="http://${demo.host}:${port}/libs/granite/core/content/login.html" errorsbeginat="400"/>
		</waitfor>
		<echo message="Waiting 10 more seconds..."/>
		<sleep seconds="10"/>
	</target>
	<!-- Target for installing the Advanced scoring bundles for Communities -->
	<target name="community_advanced">
		<antcall target="community_advanced_instance">
			<param name="port" value="${demomachine.authorport}"/>
		</antcall>
		<antcall target="community_advanced_instance">
			<param name="port" value="${demomachine.publishport}"/>
		</antcall>
		<antcall target="community_advanced_instance">
			<param name="port" value="${demomachine.farmport}"/>
		</antcall>
	</target>
	<target name="community_advanced_instance">
		<if>
			<and>
				<equals arg1="${demo.communities.advancedscoring}" arg2="true" casesensitive="false"/>
				<socket server="${demo.host}" port="${port}"/>
			</and>
			<then>
				<if>
					<and>
						<equals arg1="${demo.communities.featurepack}" arg2="latest" casesensitive="false"/>
						<resourceexists>
							<file file="${dist}/downloads/cq-social-expert-identification-pkg.zip"/>
						</resourceexists>
					</and>
					<then>
						<echo message="Installing latest Advanced Scoring bundle on ${port}"/>
						<antcall target="package">
							<param name="package" value="${dist}/downloads/cq-social-expert-identification-pkg.zip"/>
						</antcall>
					</then>
				</if>
				<if>
					<and>
						<equals arg1="${demo.communities.featurepack}" arg2="none" casesensitive="false"/>
						<resourceexists>
							<file file="${dist}/community/advancedscoring/all/cq-social-expert-identification-pkg.zip"/>
						</resourceexists>
					</and>
					<then>
						<echo message="Installing released Advanced Scoring bundle on ${port}"/>
						<antcall target="package">
							<param name="package" value="${dist}/community/advancedscoring/all/cq-social-expert-identification-pkg.zip"/>
						</antcall>
					</then>
				</if>
			</then>
		</if>
	</target>
	<!-- Target for installing the Scorm bundle for Communities -->
	<target name="community_scorm_bundle">
		<sleep seconds="10"/>
		<antcall target="community_scorm_bundle_instance">
			<param name="port" value="${demomachine.authorport}"/>
		</antcall>
		<antcall target="community_scorm_bundle_instance">
			<param name="port" value="${demomachine.publishport}"/>
		</antcall>
		<antcall target="community_scorm_bundle_instance">
			<param name="port" value="${demomachine.farmport}"/>
		</antcall>
		<sleep seconds="10"/>
	</target>
	<target name="community_scorm_bundle_instance">
		<if>
			<socket server="${demo.host}" port="${port}"/>
			<then>
				<echo message="Upgrading the AEM instance on port ${port} with AEM Communities Scorm bundle"/>
				<if>
					<and>
						<or>
							<equals arg1="${demo.communities.featurepack}" arg2="latest" casesensitive="false"/>
							<equals arg1="${cq.version}" arg2="6.3" casesensitive="false"/>
						</or>
						<resourceexists>
							<file file="${dist}/downloads/cq-social-scorm-pkg-${demo.packages}.zip"/>
						</resourceexists>
					</and>
					<then>
						<antcall target="package">
							<param name="package" value="${dist}/downloads/cq-social-scorm-pkg-${demo.packages}.zip"/>
						</antcall>
					</then>
					<else>
						<if>
							<resourceexists>
								<file file="${dist}/community/scorm/all/cq-social-scorm-pkg.zip"/>
							</resourceexists>
							<then>
								<antcall target="package">
									<param name="package" value="${dist}/community/scorm/all/cq-social-scorm-pkg.zip"/>
								</antcall>
							</then>
							<else>
								<echo message="WARNING: Scorm Bundle has not been installed"/>
							</else>
						</if>
					</else>
				</if>
			</then>
		</if>
	</target>
	<!-- Target for bootstrapping AEM with the email settings -->
	<target name="email_instance">
		<if>
			<equals arg1="${demo.emailserver}" arg2="true" casesensitive="false"/>
			<then>
				<echo message="Configuring connectivity to the email server on ${demo.mode}"/>
				<copy todir="${demos}/${demo.build}/${demo.instance}/crx-quickstart/install" overwrite="true">
					<fileset dir="${dist}/email/${demo.mode}">
						<include name="**/*"/>
					</fileset>
				</copy>
				<replace dir="${demos}/${demo.build}/${demo.instance}/crx-quickstart/install" token="##DEMO.EMAILSERVER.HOSTNAME##" value="${demo.emailserver.hostname}">
					<include name="*.config"/>
				</replace>
				<replace dir="${demos}/${demo.build}/${demo.instance}/crx-quickstart/install" token="##DEMO.EMAILSERVER.PASSWORD##" value="${demo.emailserver.password}">
					<include name="*.config"/>
				</replace>
				<replace dir="${demos}/${demo.build}/${demo.instance}/crx-quickstart/install" token="##DEMO.EMAILSERVER.SMTP##" value="${demo.emailserver.smtp}">
					<include name="*.config"/>
				</replace>
				<replace dir="${demos}/${demo.build}/${demo.instance}/crx-quickstart/install" token="##DEMO.EMAILSERVER.NOREPLY##" value="${demo.emailserver.noreply}">
					<include name="*.config"/>
				</replace>
			</then>
		</if>
	</target>
	<!-- Target for bootstrapping AEM with the latest Community uber -->
	<target name="community_instance" depends="version,configuration" if="aem61orlater">
		<!-- Booting up with latest available Commnities-uber -->
		<if>
			<and>
				<equals arg1="${demo.communities.upload}" arg2="false" casesensitive="false"/>
				<equals arg1="${demo.external}" arg2="false" casesensitive="false"/>
			</and>
			<then>
				<if>
					<equals arg1="${demo.communities.featurepack}" arg2="latest" casesensitive="false"/>
					<then>
						<if>
							<and>
								<equals arg1="${demo.communities.uber}" arg2="latest" casesensitive="false"/>
								<resourceexists>
									<file file="${dist}/downloads/communities-${demo.packages}-latest.zip"/>
								</resourceexists>
							</and>
							<then>
								<echo message="Upgrading the AEM instance with AEM Communities latest product update uber"/>
								<copy file="${dist}/downloads/communities-${demo.packages}-latest.zip" todir="${demos}/${demo.build}/${demo.instance}/crx-quickstart/install"/>
							</then>
							<else>
								<if>
									<resourceexists>
										<file file="${dist}/downloads/communities-${demo.packages}-release.zip"/>
									</resourceexists>
									<then>
										<echo message="Upgrading the AEM instance with AEM Communities latest product maintenance uber"/>
										<copy file="${dist}/downloads/communities-${demo.packages}-release.zip" todir="${demos}/${demo.build}/${demo.instance}/crx-quickstart/install"/>
									</then>
								</if>
							</else>
						</if>
					</then>
					<else>
						<if>
							<and>
								<not>
									<equals arg1="${demo.communities.featurepack}" arg2="none" casesensitive="false"/>
								</not>
								<resourceexists>
									<file file="${dist}/community/featurepacks/${demo.packages}/${demo.communities.featurepack}.zip"/>
								</resourceexists>
							</and>
							<then>
								<echo message="Upgrading the AEM instance with AEM Communities a feature pack uber"/>
								<copy file="${dist}/community/featurepacks/${demo.packages}/${demo.communities.featurepack}.zip" todir="${demos}/${demo.build}/${demo.instance}/crx-quickstart/install"/>
							</then>
						</if>
					</else>
				</if>
			</then>
		</if>
	</target>
	<!-- Target for uploading the latest Communities uber -->
	<target name="community_uber">
		<if>
			<and>
				<equals arg1="${demo.external}" arg2="true" casesensitive="false"/>
				<equals arg1="${cq.version}" arg2="6.1" casesensitive="false"/>
			</and>
			<then>
				<antcall target="community_hotfix_install">
					<param name="port" value="${demomachine.authorport}"/>
				</antcall>
				<antcall target="community_hotfix_install">
					<param name="port" value="${demomachine.publishport}"/>
				</antcall>
				<antcall target="community_hotfix_install">
					<param name="port" value="${demomachine.farmport}"/>
				</antcall>
				<sleep seconds="30"/>
			</then>
		</if>
		<if>
			<or>
				<equals arg1="${demo.communities.upload}" arg2="true" casesensitive="false"/>
				<equals arg1="${demo.external}" arg2="true" casesensitive="false"/>
			</or>
			<then>
				<antcall target="community_uber_install">
					<param name="port" value="${demomachine.authorport}"/>
				</antcall>
				<antcall target="community_uber_install">
					<param name="port" value="${demomachine.publishport}"/>
				</antcall>
				<antcall target="community_uber_install">
					<param name="port" value="${demomachine.farmport}"/>
				</antcall>
			</then>
		</if>
	</target>
	<target name="community_uber_install">
		<if>
			<socket server="${demo.host}" port="${port}"/>
			<then>
				<if>
					<equals arg1="${demo.communities.featurepack}" arg2="latest" casesensitive="false"/>
					<then>
						<if>
							<and>
								<equals arg1="${demo.communities.uber}" arg2="latest" casesensitive="false"/>
								<resourceexists>
									<file file="${dist}/downloads/communities-${demo.packages}-latest.zip"/>
								</resourceexists>
							</and>
							<then>
								<echo message="Upgrading the AEM instance on port ${port} with AEM Communities latest product update uber"/>
								<antcall target="package">
									<param name="package" value="${dist}/downloads/communities-${demo.packages}-latest.zip"/>
								</antcall>
								<antcall target="community_uber_wait"/>
							</then>
							<else>
								<if>
									<resourceexists>
										<file file="${dist}/downloads/communities-${demo.packages}-release.zip"/>
									</resourceexists>
									<then>
										<echo message="Upgrading the AEM instance on port ${port} with AEM Communities latest product maintenance uber"/>
										<antcall target="package">
											<param name="package" value="${dist}/downloads/communities-${demo.packages}-release.zip"/>
										</antcall>
										<antcall target="community_uber_wait"/>
									</then>
								</if>
							</else>
						</if>
					</then>
					<else>
						<if>
							<and>
								<not>
									<equals arg1="${demo.communities.featurepack}" arg2="none" casesensitive="false"/>
								</not>
								<resourceexists>
									<file file="${dist}/community/featurepacks/${demo.packages}/${demo.communities.featurepack}.zip"/>
								</resourceexists>
							</and>
							<then>
								<echo message="Upgrading the AEM instance on port ${port} with AEM Communities feature pack"/>
								<antcall target="package">
									<param name="package" value="${dist}/community/featurepacks/${demo.packages}/${demo.communities.featurepack}.zip"/>
								</antcall>
								<antcall target="community_uber_wait"/>
							</then>
							<else>
								<echo message="Not upgrading the AEM Communities uber"/>
							</else>
						</if>
					</else>
				</if>
			</then>
		</if>
	</target>
	<target name="community_hotfix_install" if="aem61">
		<if>
			<socket server="${demo.host}" port="${port}"/>
			<then>
				<echo message="Installing AEM Communities HotFixes for AEM 6.1 for External AEM instance"/>
				<antcall target="package">
					<param name="package" value="${dist}/hotfixes/aem61/cq-6.1.0-hotfix-6640-1.2.zip"/>
				</antcall>
				<antcall target="package">
					<param name="package" value="${dist}/hotfixes/aem61/cq-6.1.0-hotfix-6680-1.2.zip"/>
				</antcall>
			</then>
		</if>
	</target>
	<target name="autocomplete">
		<!-- Turns autocomplete on or off for AEM login screens -->
		<exec executable="curl">
			<arg line="--output '${logs}/${port}_autocomplete.html'"/>
			<arg line="-u admin:${demo.admin.password}"/>
			<arg line="-X POST"/>
			<arg line="-d ./autocomplete=${demo.autocomplete}"/>
			<arg line="-d ./autocomplete@TypeHint=boolean"/>
			<arg line="http://${demo.host}:${port}/libs/granite/core/content/login/configs/cq/box"/>
		</exec>
	</target>
	<!-- Target for loading the SCF upgrade package -->
	<target name="community_upgrade">
		<foreach target="package_author" param="package">
			<path id="communities.packages">
				<fileset dir="${dist}" casesensitive="yes">
					<include name="community/packages/*.zip"/>
					<include name="community/packages/${demo.communities.featurepack}/*.zip"/>
				</fileset>
			</path>
		</foreach>
		<antcall target="analytics_cloud">
			<param name="port" value="${demomachine.authorport}"/>
		</antcall>
		<if>
			<socket server="${demo.host}" port="${demomachine.publishport}"/>
			<then>
				<foreach target="package_publish" param="package">
					<path id="communities.packages">
						<fileset dir="${dist}" casesensitive="yes">
							<include name="community/packages/*.zip"/>
							<include name="community/packages/${demo.communities.featurepack}/*.zip"/>
						</fileset>
					</path>
				</foreach>
				<antcall target="analytics_cloud">
					<param name="port" value="${demomachine.publishport}"/>
				</antcall>
			</then>
		</if>
		<if>
			<socket server="${demo.host}" port="${demomachine.farmport}"/>
			<then>
				<foreach target="package_farm" param="package">
					<path id="communities.packages">
						<fileset dir="${dist}" casesensitive="yes">
							<include name="community/packages/*.zip"/>
							<include name="community/packages/${demo.communities.featurepack}/*.zip"/>
						</fileset>
					</path>
				</foreach>
				<antcall target="analytics_cloud">
					<param name="port" value="${demomachine.farmport}"/>
				</antcall>
			</then>
		</if>
	</target>
	<!-- Target for configuring a new demo environment -->
	<target name="communities" if="aem61orlater" depends="configuration,version">
		<mkdir dir="${logs}"/>
		<antcall target="demomachine_analytics_communities"/>
		<antcall target="community_uber"/>
		<if>
			<and>
				<equals arg1="${demomachine.communities.enablement}" arg2="true" casesensitive="false"/>
				<not>
					<and>
						<equals arg1="${cq.version}" arg2="6.1" casesensitive="false"/>
						<equals arg1="${demo.communities.featurepack}" arg2="none" casesensitive="false"/>
					</and>
				</not>
			</and>
			<then>
				<antcall target="community_scorm_bundle"/>
				<antcall target="community_mysql_schema"/>
				<antcall target="community_reporting_configure"/>
				<antcall target="community_scorm_configure"/>
			</then>
		</if>
		<antcall target="community_upgrade"/>
		<antcall target="community_advanced"/>
		<antcall target="community_tunnel"/>
		<antcall target="community_email_importer"/>
		<antcall target="community_fragment"/>
		<antcall target="community_login"/>
		<antcall target="community_users"/>
		<antcall target="community_livefyre"/>
		<!-- Load all the sample content -->
		<if>
			<equals arg1="${demo.communities.samples.geometrixx}" arg2="true" casesensitive="false"/>
			<then>
				<antcall target="community_loader_content"/>
			</then>
		</if>
		<!-- Check if we need to install the reference site -->
		<if>
			<equals arg1="${demo.communities.samples.communities}" arg2="true" casesensitive="false"/>
			<then>
				<antcall target="community_loader_reference"/>
				<antcall target="community_loader_reference_cloudservices"/>
			</then>
		</if>
		<antcall target="stepbystep"/>
		<!-- Check if we need to install the enablement site -->
		<if>
			<equals arg1="${demo.communities.samples.enablement}" arg2="true" casesensitive="false"/>
			<then>
				<antcall target="community_loader_enablement"/>
				<antcall target="community_loader_enablement_cloudservices"/>
			</then>
		</if>
		<antcall target="stepbystep"/>
		<!-- Check if we need to install the enablement site -->
		<if>
			<equals arg1="${demo.communities.samples.scoring}" arg2="true" casesensitive="false"/>
			<then>
				<antcall target="community_loader_scoring"/>
				<antcall target="community_loader_scoring_cloudservices"/>
			</then>
		</if>
		<!-- Check if we need to install the extra demo sites site -->
		<if>
			<equals arg1="${demo.communities.samples.extra}" arg2="true" casesensitive="false"/>
			<then>
				<antcall target="community_loader_extra"/>
			</then>
		</if>
		<antcall target="stepbystep"/>
		<antcall target="community_analytics"/>
		<antcall target="community_warmup"/>
	</target>
	<!-- Target for configuring the Livefyre cloud service -->
	<target name="community_livefyre">
		<if>
			<equals arg1="${Livefyre.install}" arg2="true" casesensitive="false"/>
			<then>
				<antcall target="livefyre"/>
			</then>
		</if>
	</target>
	<!-- Target for configuring the Analytics import process -->
	<target name="community_analytics">
		<if>
			<and>
				<equals arg1="${AdobeAnalytics.install}" arg2="true" casesensitive="false"/>
				<socket server="${demo.host}" port="${demomachine.publishport}"/>
			</and>
			<then>
				<exec executable="curl">
					<arg line="--output '${logs}/${demomachine.publishport}_analytics_interval.html'"/>
					<arg line="--globoff"/>
					<arg line="-u admin:${demo.admin.password}"/>
					<arg line="-X POST"/>
					<arg line="-d apply=true"/>
					<arg line="-d action=ajaxConfigManager"/>
					<arg line="-d $location="/>
					<arg line="-d cq.social.reporting.analytics.polling.importer.interval=1"/>
					<arg line="-d cq.social.reporting.analytics.polling.importer.pageSize=50000"/>
					<arg line="-d propertylist=cq.social.reporting.analytics.polling.importer.interval,cq.social.reporting.analytics.polling.importer.pageSize"/>
					<arg line="http://${demo.host}:${demomachine.publishport}/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportImporterServiceImpl"/>
				</exec>
			</then>
		</if>
	</target>
	<!-- Targets for setting the Cloud Services on the Community Sites -->
	<target name="community_loader_reference_cloudservices">
		<if>
			<equals arg1="${demo.external}" arg2="false" casesensitive="false"/>
			<then>
				<antcall target="cloudservices">
					<param name="port" value="${demomachine.authorport}"/>
					<param name="path" value="/content/sites/communities/en/jcr:content"/>
				</antcall>
				<if>
					<socket server="${demo.host}" port="${demomachine.publishport}"/>
					<then>
						<antcall target="community_publish">
							<param name="path" value="/content/sites/communities/en"/>
						</antcall>
					</then>
				</if>
			</then>
		</if>
	</target>
	<target name="community_loader_enablement_cloudservices">
		<if>
			<equals arg1="${demo.external}" arg2="false" casesensitive="false"/>
			<then>
				<antcall target="cloudservices">
					<param name="port" value="${demomachine.authorport}"/>
					<param name="path" value="/content/sites/enablement/en/jcr:content"/>
				</antcall>
				<if>
					<socket server="${demo.host}" port="${demomachine.publishport}"/>
					<then>
						<antcall target="community_publish">
							<param name="path" value="/content/sites/enablement/en"/>
						</antcall>
					</then>
				</if>
			</then>
		</if>
	</target>
	<target name="community_loader_scoring_cloudservices">
		<if>
			<equals arg1="${demo.external}" arg2="false" casesensitive="false"/>
			<then>
				<antcall target="cloudservices">
					<param name="port" value="${demomachine.authorport}"/>
					<param name="path" value="/content/sites/scoring/en/jcr:content"/>
				</antcall>
				<if>
					<socket server="${demo.host}" port="${demomachine.publishport}"/>
					<then>
						<antcall target="community_publish">
							<param name="path" value="/content/sites/scoring/en"/>
						</antcall>
					</then>
				</if>
			</then>
		</if>
	</target>
	<!-- Target for publishing a community site -->
	<target name="community_publish">
		<echo message="Publishing a Community site at ${path}"/>
		<exec executable="curl">
			<arg line="--output '${logs}/${demomachine.authorport}_publish.html'"/>
			<arg line="-v -u admin:${demo.admin.password}"/>
			<arg line="-X POST"/>
			<arg line="-d path=${path}"/>
			<arg line="-d id=nobot"/>
			<arg line="-d :operation=social:publishSite"/>
			<arg line="http://${demo.host}:${demomachine.authorport}/communities/sites.html"/>
		</exec>
	</target>
	<!-- Target for configuring and preparing MySQL for reporting purposes, if a running MySQL server can be found -->
	<target name="community_reporting_configure">
		<if>
			<socket server="${demo.mysql.host}" port="${demo.mysql.port}"/>
			<then>
				<antcall target="community_jdbc">
					<param name="port" value="${demomachine.authorport}"/>
				</antcall>
				<if>
					<socket server="${demo.host}" port="${demomachine.publishport}"/>
					<then>
						<antcall target="community_jdbc">
							<param name="port" value="${demomachine.publishport}"/>
						</antcall>
					</then>
				</if>
				<if>
					<socket server="${demo.host}" port="${demomachine.farmport}"/>
					<then>
						<antcall target="community_jdbc">
							<param name="port" value="${demomachine.farmport}"/>
						</antcall>
					</then>
				</if>
			</then>
		</if>
	</target>
	<!-- Target for configuring and preparing MySQL for SCORM purposes, if a running MySQL server can be found -->
	<target name="community_scorm_configure">
		<if>
			<socket server="${demo.mysql.host}" port="${demo.mysql.port}"/>
			<then>
				<antcall target="community_scorm">
					<param name="port" value="${demomachine.authorport}"/>
				</antcall>
				<if>
					<socket server="${demo.host}" port="${demomachine.publishport}"/>
					<then>
						<antcall target="community_scorm">
							<param name="port" value="${demomachine.publishport}"/>
						</antcall>
					</then>
				</if>
				<if>
					<socket server="${demo.host}" port="${demomachine.farmport}"/>
					<then>
						<antcall target="community_scorm">
							<param name="port" value="${demomachine.farmport}"/>
						</antcall>
					</then>
				</if>
			</then>
		</if>
	</target>
	<!-- Target for adding users to the right Communities groups -->
	<target name="community_users">
		<echo message="Updating all demo users on the Author instance to be administrators"/>
		<exec executable="curl">
			<arg line="--output '${logs}/${demomachine.authorport}_roles_community_administrators.html'"/>
			<arg line="--globoff"/>
			<arg line="-u admin:${demo.admin.password}"/>
			<arg line="-X POST"/>
			<arg line="-d memberAction=members"/>
			<arg line="-d memberEntry=admin"/>
			<arg line="-d memberEntry=replication-receiver"/>
			<arg line="-d memberEntry=rebekah.larsen@trashymail.com"/>
			<arg line="-d memberEntry=andrew.schaeffer@trashymail.com"/>
			<arg line="-d memberEntry=aaron.mcdonald@mailinator.com"/>
			<arg line="-d memberEntry=jason.werner@dodgit.com"/>
			<arg line="-d memberEntry=weston.mccall@dodgit.com"/>
			<arg line="-d memberEntry=boyd.larsen@dodgit.com"/>
			<arg line="-d memberEntry=emily.andrews@mailinator.com"/>
			<arg line="-d memberEntry=josh.bradley@pookmail.com"/>
			<arg line="-d memberEntry=ryan.palmer@spambob.com"/>
			<arg line="-d memberEntry=felicia.carter@trashymail.com"/>
			<arg line="-d memberEntry=donna.billups@pookmail.com"/>
			<arg line="-d memberEntry=ashley.thompson@spambob.com"/>
			<arg line="http://${demo.host}:${demomachine.authorport}/home/groups/a/administrators.html"/>
		</exec>
		<echo message="Adding demo users to the content managers group"/>
		<exec executable="curl">
			<arg line="--output '${logs}/${demomachine.authorport}_roles_content_managers.html'"/>
			<arg line="--globoff"/>
			<arg line="-u admin:${demo.admin.password}"/>
			<arg line="-X POST"/>
			<arg line="-d memberAction=members"/>
			<arg line="-d memberEntry=author"/>
			<arg line="-d memberEntry=analytics-administrators"/>
			<arg line="-d memberEntry=andrew.schaeffer@trashymail.com"/>
			<arg line="http://${demo.host}:${demomachine.authorport}/home/groups/c/content-authors.html"/>
		</exec>
	</target>
	<!-- Target for loading the reference Community site forum with content during a demo -->
	<target name="community_wizard">
		<antcall target="community_loader">
			<param name="demo.loader.currentfile" value="${dist}/community/wizard/loader-engage.csv"/>
		</antcall>
	</target>
	<!-- Target for loading the fake stats to Geometrixx outdoors -->
	<target name="stats_wizard">
		<antcall target="community_loader">
			<param name="demo.loader.currentfile" value="${dist}/community/wizard/loader-stats.csv"/>
		</antcall>
	</target>
	<!-- Target for configuring the Communities Enablement managers -->
	<target name="community_enablement_managers">
		<echo message="Adding demo users to the enablement managers group"/>
		<exec executable="curl">
			<arg line="--output '${logs}/${demomachine.authorport}_roles_enablement_managers.html'"/>
			<arg line="--globoff"/>
			<arg line="-u admin:${demo.admin.password}"/>
			<arg line="-X POST"/>
			<arg line="-d memberAction=members"/>
			<arg line="-d memberEntry=andrew.schaeffer@trashymail.com"/>
			<arg line="-d memberEntry=jason.werner@dodgit.com"/>
			<arg line="-d memberEntry=rebekah.larsen@trashymail.com"/>
			<arg line="http://${demo.host}:${demomachine.authorport}/home/groups/community/community-enablementmanagers.html"/>
		</exec>
	</target>
	<!-- Target for configuring the Communities Default Login pages, for each site -->
	<target name="community_login">
		<if>
			<socket server="${demo.host}" port="${demomachine.publishport}"/>
			<then>
				<echo message="Configuring AEM Communities Logging Mappings service on port ${demomachine.publishport}..."/>
				<exec executable="curl">
					<arg line="--output '${logs}/${demomachine.publishport}_loginmappings.html'"/>
					<arg line="--globoff"/>
					<arg line="-u admin:${demo.admin.password}"/>
					<arg line="-X POST"/>
					<arg line="-d apply=true"/>
					<arg line="-d action=ajaxConfigManager"/>
					<arg line="-d $location="/>
					<arg line="-d auth.loginselector.mappings=/libs/granite/core/content/login:/login"/>
					<arg line="-d auth.loginselector.mappings=/content/geometrixx-media/en/toolbar/account/login:/content/geometrixx-media/en"/>
					<arg line="-d auth.loginselector.mappings=/content/sites/communities/en/signin:/content/sites/communities/en"/>
					<arg line="-d auth.loginselector.mappings=/content/sites/enablement/en/signin:/content/sites/enablement/en"/>
					<arg line="-d auth.loginselector.mappings=/content/we-retail/us/en/community/signin:/content/we-retail/us/en"/>
					<arg line="-d propertylist=auth.loginselector.mappings"/>
					<arg line="http://${demo.host}:${demomachine.publishport}/system/console/configMgr/com.day.cq.auth.impl.LoginSelectorHandler"/>
				</exec>
			</then>
		</if>
	</target>
	<!-- Target for configuring the Communities Tunnel service (allowing requests from author to publish) -->
	<target name="community_tunnel">
		<if>
			<socket server="${demo.host}" port="${demomachine.publishport}"/>
			<then>
				<echo message="Configuring AEM Communities Tunnel service on port ${demomachine.authorport}..."/>
				<exec executable="curl">
					<arg line="--output '${logs}/${demomachine.authorport}_tunnel.html'"/>
					<arg line="--globoff"/>
					<arg line="-u admin:${demo.admin.password}"/>
					<arg line="-X POST"/>
					<arg line="-d apply=true"/>
					<arg line="-d action=ajaxConfigManager"/>
					<arg line="-d $location="/>
					<arg line="-d enable=true"/>
					<arg line="-d enable=false"/>
					<arg line="-d agent.configuration=/etc/replication/agents.author/publish"/>
					<arg line="-d disabled.cipher.suites="/>
					<arg line="-d enabled.cipher.suites="/>
					<arg line="-d propertylist=enable,agent.configuration,disabled.cipher.suites,enabled.cipher.suites"/>
					<arg line="http://${demo.host}:${demomachine.authorport}/system/console/configMgr/com.adobe.cq.social.user.impl.transport.HttpToPublisher"/>
				</exec>
				<sleep seconds="5"/>
				<waitfor maxwait="300" maxwaitunit="second" checkevery="5" checkeveryunit="second">
					<http url="http://${demo.host}:${demomachine.authorport}/libs/granite/core/content/login.html" errorsbeginat="400"/>
				</waitfor>
			</then>
		</if>
	</target>
	<!-- Target for configuring the Communities Email importer for Email subscriptions -->
	<target name="community_email_importer" depends="version,configuration" if="aem62orlater">
		<if>
			<and>
				<socket server="${demo.host}" port="${demomachine.publishport}"/>
				<socket server="${demo.emailserver.hostname}" port="${demo.emailserver.imap}"/>
			</and>
			<then>
				<echo message="Configuring AEM Communities Email importer on port ${demomachine.publishport}..."/>
				<!-- Reconfiguring email importer protocol -->
				<exec executable="curl">
					<arg line="--output '${logs}/${demomachine.publishport}_importer_protocol.html'"/>
					<arg line="--globoff"/>
					<arg line="-v -u admin:${demo.admin.password}"/>
					<arg line="-X POST"/>
					<arg line="-d apply=true"/>
					<arg line="-d action=ajaxConfigManager"/>
					<arg line="-d connectProtocol=pop3"/>
					<arg line="--data-binary 'propertylist=connectProtocol'"/>
					<arg line="http://${demo.host}:${demomachine.publishport}/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailReplyImporter"/>
				</exec>
				<!-- Reconfiguring minimum importer interval -->
				<exec executable="curl">
					<arg line="--output '${logs}/${demomachine.publishport}_importer_interval.html'"/>
					<arg line="--globoff"/>
					<arg line="-v -u admin:${demo.admin.password}"/>
					<arg line="-X POST"/>
					<arg line="-d apply=true"/>
					<arg line="-d action=ajaxConfigManager"/>
					<arg line="-d importer.min.interval=10"/>
					<arg line="-d importer.user="/>
					<arg line="-d exclude.paths=/etc/workflow"/>
					<arg line="-d exclude.paths=/content/dam"/>
					<arg line="-d include.paths=/etc/"/>
					<arg line="-d include.paths=/content"/>
					<arg line="--data-binary 'propertylist=importer.min.interval%2Cimporter.user%2Cexclude.paths%2Cinclude.paths'"/>
					<arg line="http://${demo.host}:${demomachine.publishport}/system/console/configMgr/com.day.cq.polling.importer.impl.PollingImporterImpl"/>
				</exec>
				<exec executable="curl">
					<arg line="--output '${logs}/${demomachine.publishport}_email_importer.html'"/>
					<arg line="--globoff"/>
					<arg line="-v -u admin:${demo.admin.password}"/>
					<arg line="-X POST"/>
					<arg line="--data-binary 'source=emailreply://${demo.emailserver.hostname}:${demo.emailserver.pop}/INBOX?username=${demo.emailserver.subscriptions}%26password=${demo.emailserver.password}'"/>
					<arg line="-d feedType=emailreply"/>
					<arg line="--data-binary 'feedUrl=//${demo.emailserver.hostname}:${demo.emailserver.pop}/INBOX?username=${demo.emailserver.subscriptions}%26password=${demo.emailserver.password}'"/>
					<arg line="-d target=/content/usergenerated/mailFolder/postEmails"/>
					<arg line="-d interval=11"/>
					<arg line="-d login="/>
					<arg line="-d password="/>
					<arg line="-d password@encrypted="/>
					<arg line="-d connectProtocol=pop3"/>
					<arg line="-d jcr:mixinTypes=cq:PollConfig"/>
					<arg line="-d hidden=true"/>
					<arg line="http://${demo.host}:${demomachine.publishport}/etc/importers/polling/*"/>
				</exec>
				<!-- Identifying the configuration to update -->
				<exec executable="curl">
					<arg line="-u admin:${demo.admin.password}"/>
					<arg line="-o '${logs}/${demomachine.publishport}_components.json' http://${demo.host}:${demomachine.publishport}/system/console/configMgr"/>
				</exec>
				<loadfile property="subscription.list" srcFile="${logs}/${demomachine.publishport}_components.json"/>
				<propertyregex property="subscription.id" input="${subscription.list}" regexp="EmailReplyConfigurationImpl.([-a-zA-Z0-9_/]*)&quot;" select="\1"/>
				<!-- Loading up the first component configuration -->
				<echo message="First email configuration ID: ${subscription.id}"/>
				<exec executable="curl">
					<arg line="-u admin:${demo.admin.password}"/>
					<arg line="-o '${logs}/${demomachine.publishport}_components_email1.json' http://${demo.host}:${demomachine.publishport}/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailReplyConfigurationImpl.${subscription.id}.json"/>
				</exec>
				<!-- Fixing up first configuration component -->
				<if>
					<resourcecontains resource="${logs}/${demomachine.publishport}_components_email1.json" substring="&quot;value&quot;:&quot;email&quot;"/>
					<then>
						<antcall target="community_email_importer_notification">
							<param name="component.id" value="${subscription.id}"/>
						</antcall>
					</then>
					<else>
						<antcall target="community_email_importer_subscription">
							<param name="component.id" value="${subscription.id}"/>
						</antcall>
					</else>
				</if>
				<replace file="${logs}/${demomachine.publishport}_components.json" token=".${subscription.id}" value=""/>
				<loadfile property="email.list" srcFile="${logs}/${demomachine.publishport}_components.json"/>
				<propertyregex property="email.id" input="${email.list}" regexp="EmailReplyConfigurationImpl.([-a-zA-Z0-9_/]*)&quot;" select="\1"/>
				<!-- Loading up the second component configuration -->
				<echo message="Second email configuration ID: ${email.id}"/>
				<exec executable="curl">
					<arg line="-u admin:${demo.admin.password}"/>
					<arg line="-o '${logs}/${demomachine.publishport}_components_email2.json' http://${demo.host}:${demomachine.publishport}/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailReplyConfigurationImpl.${email.id}.json"/>
				</exec>
				<!-- Fixing up second configuration component -->
				<if>
					<resourcecontains resource="${logs}/${demomachine.publishport}_components_email2.json" substring="&quot;value&quot;:&quot;email&quot;"/>
					<then>
						<antcall target="community_email_importer_notification">
							<param name="component.id" value="${email.id}"/>
						</antcall>
					</then>
					<else>
						<antcall target="community_email_importer_subscription">
							<param name="component.id" value="${email.id}"/>
						</antcall>
					</else>
				</if>
			</then>
		</if>
	</target>
	<target name="community_email_importer_subscription">
		<!-- Reconfiguring email subscriptions -->
		<echo message="Configuring AEM Communities Email subscriptions on port ${demomachine.publishport}"/>
		<exec executable="curl">
			<arg line="--output '${logs}/${demomachine.publishport}_email_subcribe.html'"/>
			<arg line="--globoff"/>
			<arg line="-v -u admin:${demo.admin.password}"/>
			<arg line="-X POST"/>
			<arg line="-d apply=true"/>
			<arg line="-d factoryPid=com.adobe.cq.social.commons.emailreply.impl.EmailReplyConfigurationImpl"/>
			<arg line="-d action=ajaxConfigManager"/>
			<arg line="--data-urlencode 'email.name=subscriptions-email'"/>
			<arg line="-d email.createPostFromReply=true"/>
			<arg line="-d email.createPostFromReply=false"/>
			<arg line="-d email.addCommentIdTo=subject"/>
			<arg line="-d email.subjectMaximumLength=200"/>
			<arg line="--data-urlencode 'email.replyToAddress=${demo.emailserver.subscriptions}'"/>
			<arg line="--data-urlencode 'email.replyToDelimiter=+'"/>
			<arg line="--data-urlencode 'email.trackerIdPrefixInSubject=post#'"/>
			<arg line="-d email.asHTML=true"/>
			<arg line="-d email.asHTML=false"/>
			<arg line="--data-urlencode 'email.defaultUserName=${demo.emailserver.subscriptions}'"/>
			<arg line="--data-urlencode 'email.templates.rootPath=/etc/community/templates/subscriptions-email'"/>
			<arg line="--data-binary 'propertylist=email.name%2Cemail.createPostFromReply%2Cemail.addCommentIdTo%2Cemail.subjectMaximumLength%2Cemail.replyToAddress%2Cemail.replyToDelimiter%2Cemail.trackerIdPrefixInSubject%2Cemail.asHTML%2Cemail.defaultUserName%2Cemail.templates.rootPath'"/>
			<arg line="http://${demo.host}:${demomachine.publishport}/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailReplyConfigurationImpl.${component.id}"/>
		</exec>
	</target>
	<target name="community_email_importer_notification">
		<!-- Reconfiguring email notifications -->
		<echo message="Configuring AEM Communities Email notifications on port ${demomachine.publishport}"/>
		<exec executable="curl">
			<arg line="--output '${logs}/${demomachine.publishport}_email_notifications.html'"/>
			<arg line="--globoff"/>
			<arg line="-v -u admin:${demo.admin.password}"/>
			<arg line="-X POST"/>
			<arg line="-d apply=true"/>
			<arg line="-d factoryPid=com.adobe.cq.social.commons.emailreply.impl.EmailReplyConfigurationImpl"/>
			<arg line="-d action=ajaxConfigManager"/>
			<arg line="-d email.name=email"/>
			<arg line="-d email.createPostFromReply=false"/>
			<arg line="-d email.addCommentIdTo=replyTo"/>
			<arg line="-d email.subjectMaximumLength=200"/>
			<arg line="--data-urlencode 'email.replyToAddress=${demo.emailserver.noreply}'"/>
			<arg line="--data-urlencode 'email.replyToDelimiter=+'"/>
			<arg line="--data-urlencode 'email.trackerIdPrefixInSubject=post#'"/>
			<arg line="-d email.asHTML=true"/>
			<arg line="-d email.asHTML=false"/>
			<arg line="--data-urlencode 'email.defaultUserName=${demo.emailserver.noreply}'"/>
			<arg line="--data-urlencode 'email.templates.rootPath=/etc/community/templates/email'"/>
			<arg line="--data-binary 'propertylist=email.name%2Cemail.createPostFromReply%2Cemail.addCommentIdTo%2Cemail.subjectMaximumLength%2Cemail.replyToAddress%2Cemail.replyToDelimiter%2Cemail.trackerIdPrefixInSubject%2Cemail.asHTML%2Cemail.defaultUserName%2Cemail.templates.rootPath'"/>
			<arg line="http://${demo.host}:${demomachine.publishport}/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailReplyConfigurationImpl.${component.id}"/>
		</exec>
	</target>
	<!-- Target for configuring the Communities content fragment creation service -->
	<target name="community_fragment" if="aem62orlater">
		<antcall target="community_fragment_instance">
			<param name="port" value="${demomachine.authorport}"/>
		</antcall>
		<if>
			<socket server="${demo.host}" port="${demomachine.publishport}"/>
			<then>
				<antcall target="community_fragment_instance">
					<param name="port" value="${demomachine.publishport}"/>
				</antcall>
				<sleep seconds="5"/>
			</then>
		</if>
	</target>
	<!-- Target for configuring the Content Fragment bundle -->
	<target name="community_fragment_instance">
		<echo message="Configuring AEM Communities Content Fragment creation service on port ${port}..."/>
		<exec executable="curl">
			<arg line="--output '${logs}/${port}_fragment.html'"/>
			<arg line="--globoff"/>
			<arg line="-u admin:${demo.admin.password}"/>
			<arg line="-X POST"/>
			<arg line="-d apply=true"/>
			<arg line="-d action=ajaxConfigManager"/>
			<arg line="-d $location="/>
			<arg line="-d cq.social.content.fragments.services.enabled=true"/>
			<arg line="-d cq.social.content.fragments.services.enabled=false"/>
			<arg line="-d cq.social.content.fragments.services.waitTimeSeconds=120"/>
			<arg line="-d propertylist=cq.social.content.fragments.services.enabled,cq.social.content.fragments.services.waitTimeSeconds"/>
			<arg line="http://${demo.host}:${port}/system/console/configMgr/com.adobe.cq.social.content.fragments.services.impl.CommunitiesFragmentCreationServiceImpl"/>
		</exec>
	</target>
	<!-- Target for configuring the SCORM engine -->
	<target name="community_scorm">
		<propertyregex property="mysql.prefix" input="${demo.build}" regexp="-" replace="" global="true" defaultvalue="${demo.build}"/>
		<exec executable="curl">
			<arg line="--output '${logs}/${port}_scorm.html'"/>
			<arg line="--globoff"/>
			<arg line="-u admin:${demo.admin.password}"/>
			<arg line="-X POST"/>
			<arg line="-d apply=true"/>
			<arg line="-d action=ajaxConfigManager"/>
			<arg line="-d $location="/>
			<arg line="-d jdbc.connection.uri=jdbc:mysql://${demo.mysql.host}:${demo.mysql.port}/${mysql.prefix}scorm"/>
			<arg line="-d jdbc.username=${demo.mysql.user}"/>
			<arg line="-d jdbc.password=${demo.mysql.password}"/>
			<arg line="-d scorm.password=Sc0rm12"/>
			<arg line="-d propertylist=jdbc.connection.uri,jdbc.username,jdbc.password,scorm.password"/>
			<arg line="http://${demo.host}:${port}/system/console/configMgr/com.adobe.cq.social.scorm.impl.ScormEngineServiceImpl"/>
		</exec>
		<exec executable="curl">
			<arg line="--output '${logs}/${port}_scorm_handler.html'"/>
			<arg line="--globoff"/>
			<arg line="-u admin:${demo.admin.password}"/>
			<arg line="-X POST"/>
			<arg line="-d apply=true"/>
			<arg line="-d action=ajaxConfigManager"/>
			<arg line="-d $location="/>
			<arg line="--data-urlencode process.label='AEM Communities SCORM Content Handler'"/>
			<arg line="-d propertylist=process.label"/>
			<arg line="http://${demo.host}:${port}/system/console/configMgr/com.adobe.cq.social.scorm.dam.impl.ScormMetaDataExtractor"/>
		</exec>
	</target>
	<!-- Target for configuring the SRP according to the property configuration -->
	<target name="community_srp" depends="configuration">
		<if>
			<equals arg1="${demomachine.srp}" arg2="msrp" casesensitive="false"/>
			<!-- MongoDB storage use case for 6.1 and beyond -->
			<then>
				<echo message="Configuring MSRP on port ${port}..."/>
				<propertyregex property="mongo.prefix" input="${demo.build}" regexp="-" replace="" global="true" defaultvalue="${demo.build}"/>
				<exec executable="curl">
					<arg line="--output '${logs}/${port}_msrp.html'"/>
					<arg line="--globoff"/>
					<arg line="-u admin:${demo.admin.password}"/>
					<arg line="-X POST"/>
					<arg line="-d mongouri=mongodb://${demo.mongo.host}:${demo.mongo.port}/?maxPoolSize=10&amp;waitQueueMultiple=5&amp;readPreference=secondaryPreferred"/>
					<arg line="-d type=msrp"/>
					<arg line="-d zkhost="/>
					<arg line="-d ugc=${mongo.prefix}"/>
					<arg line="-d collection=content"/>
					<arg line="-d attachments=attachments"/>
					<arg line="-d solr.url=http://127.0.0.1:8983/solr/"/>
					<arg line="-d solr.collection=${demo.build}"/>
					<arg line="-d asipath=/content/usergenerated/asi/mongo"/>
					<arg line="-d jcr:primaryType=nt:unstructured"/>
					<arg line="http://${demo.host}:${port}/etc/socialconfig/srpc/defaultconfiguration"/>
				</exec>
			</then>
		</if>
		<if>
			<equals arg1="${demomachine.srp}" arg2="dsrp" casesensitive="false"/>
			<!-- Database storage use case for 6.1 FP6 and 6.2 FP2 and 6.3 and beyond -->
			<then>
				<echo message="Configuring DSRP on port ${port}..."/>
				<propertyregex property="database.prefix" input="${demo.build}" regexp="-" replace="" global="true" defaultvalue="${demo.build}"/>
				<!-- Downloading and configuring the schema -->
				<if>
					<and>
						<equals arg1="${demo.mysql.external}" arg2="false" casesensitive="false"/>
						<resourceexists>
							<file file="${mysql}/bin/mysql"/>
						</resourceexists>
					</and>
					<then>
						<property name="mysql.exec" value="${mysql}/bin/mysql"/>
					</then>
					<else>
						<property name="mysql.exec" value="${demo.mysql.path}"/>
					</else>
				</if>
				<propertyregex property="mysql.prefix" input="${demo.build}" regexp="-" replace="" global="true" defaultvalue="${demo.build}"/>
				<echo message="Configuring the MySQL server for DSRP..."/>
				<echo message="Downloading the MySQL schema from /libs/social/config/datastore/dsrp/schema/init-schema.sql"/>
				<exec executable="curl">
					<arg line="-u admin:${demo.admin.password}"/>
					<arg line="-s -o '${dist}/rdb/init-schema.sql' http://${demo.host}:${demomachine.authorport}/libs/social/config/datastore/dsrp/schema/init-schema.sql"/>
				</exec>
				<replace file="${dist}/rdb/init-schema.sql" token="communities" value="${mysql.prefix}dsrp"/>
				<echo message="Loading SQL file into internal MySQL server..."/>
				<exec executable="${mysql.exec}" spawn="false">
					<arg line="-u ${demo.mysql.user} --host=${demo.mysql.host} --port=${demo.mysql.port} --port=${demo.mysql.port} --password=${demo.mysql.password} -e 'source ${dist}/rdb/init-schema.sql'"/>
				</exec>
				<delete file="${dist}/rdb/init-schema.sql"/>
				<!-- Configuring the datasource -->
				<exec executable="curl">
					<arg line="--output '${logs}/${port}_jdbc_dsrp.html'"/>
					<arg line="--globoff"/>
					<arg line="-u admin:${demo.admin.password}"/>
					<arg line="-X POST"/>
					<arg line="-d apply=true"/>
					<arg line="-d factoryPid=com.day.commons.datasource.jdbcpool.JdbcPoolService"/>
					<arg line="-d action=ajaxConfigManager"/>
					<arg line="-d $location="/>
					<arg line="-d jdbc.driver.class=com.mysql.jdbc.Driver"/>
					<arg line="-d jdbc.connection.uri=jdbc:mysql://${demo.mysql.host}:${demo.mysql.port}/${mysql.prefix}dsrp"/>
					<arg line="-d jdbc.username=${demo.mysql.user}"/>
					<arg line="-d jdbc.password=${demo.mysql.password}"/>
					<arg line="-d jdbc.validation.query="/>
					<arg line="-d default.readonly=false"/>
					<arg line="-d default.autocommit=true"/>
					<arg line="-d default.autocommit=false"/>
					<arg line="-d pool.size=10"/>
					<arg line="-d pool.max.wait.msec=1000"/>
					<arg line="-d datasource.name=dsrp"/>
					<arg line="-d datasource.svc.properties="/>
					<arg line="-d propertylist=jdbc.driver.class,jdbc.connection.uri,jdbc.username,jdbc.password,jdbc.validation.query,default.readonly,default.autocommit,pool.size,pool.max.wait.msec,datasource.name,datasource.svc.properties"/>
					<arg line="http://${demo.host}:${port}/system/console/configMgr/[Temporary%20PID%20replaced%20by%20real%20PID%20upon%20save]"/>
				</exec>
				<!-- Configuring DSRP -->
				<exec executable="curl">
					<arg line="--output '${logs}/${port}_dsrp.html'"/>
					<arg line="--globoff"/>
					<arg line="-u admin:${demo.admin.password}"/>
					<arg line="-X POST"/>
					<arg line="-d type=dsrp"/>
					<arg line="-d datasource=dsrp"/>
					<arg line="-d database.name=${mysql.prefix}dsrp"/>
					<arg line="-d zkhost="/>
					<arg line="-d solr.url=http://127.0.0.1:8983/solr/"/>
					<arg line="-d solr.collection=${demo.build}"/>
					<arg line="-d asipath=/content/usergenerated/asi/rdbms"/>
					<arg line="-d jcr:primaryType=nt:unstructured"/>
					<arg line="http://${demo.host}:${port}/etc/socialconfig/srpc/defaultconfiguration"/>
				</exec>
			</then>
		</if>
		<if>
			<equals arg1="${demomachine.srp}" arg2="asrp" casesensitive="false"/>
			<!-- Cloud Storage use case for 6.1 and beyond -->
			<then>
				<echo message="Configuring ASRP on port ${port}..."/>
				<exec executable="curl">
					<arg line="--output '${logs}/${port}_asrp.html'"/>
					<arg line="--globoff"/>
					<arg line="-u admin:${demo.admin.password}"/>
					<arg line="-X POST"/>
					<arg line="-d ./type=asrp"/>
					<arg line="-d ./consumerkey=${AdobeSocial.consumerkey}"/>
					<arg line="-d ./consumerkey@Encrypted="/>
					<arg line="-d ./hosturl=${AdobeSocial.hosturl}"/>
					<arg line="-d ./secret=${AdobeSocial.secretkey}"/>
					<arg line="-d ./secret@Encrypted="/>
					<arg line="-d ./reportsuite=${AdobeSocial.reportsuite}"/>
					<arg line="-d ./asipath=/content/usergenerated/asi/cloud"/>
					<arg line="http://${demo.host}:${port}/etc/socialconfig/srpc/defaultconfiguration"/>
				</exec>
				<if>
					<socket server="${demo.host}" port="${demomachine.authorport}"/>
					<then>
						<echo message="Removing all ASRP content..."/>
						<exec executable="curl">
							<arg line="--output '${logs}/${port}_asrp_cleanup.html'"/>
							<arg line="--globoff"/>
							<arg line="-u admin:${demo.admin.password}"/>
							<arg line="-X POST"/>
							<arg line="-d path=/content/usergenerated/asi/cloud"/>
							<arg line="http://${demo.host}:${port}/services/social/srp/cleanup"/>
						</exec>
					</then>
				</if>
			</then>
		</if>
	</target>
	<!-- Target for configuring the Enablement features -->
	<target name="community_enablement">
		<echo message="Enabling the enablement module..."/>
		<exec executable="curl">
			<arg line="--output '${logs}/${demomachine.authorport}_enablement.html'"/>
			<arg line="--globoff"/>
			<arg line="-u admin:${demo.admin.password}"/>
			<arg line="-X POST"/>
			<arg line="-d apply=true"/>
			<arg line="-d action=ajaxConfigManager"/>
			<arg line="-d $location="/>
			<arg line="-d isEnablementActive=true"/>
			<arg line="-d isEnablementActive=false"/>
			<arg line="-d propertylist=isEnablementActive"/>
			<arg line="http://${demo.host}:${demomachine.authorport}/system/console/configMgr/com.adobe.cq.social.enablement.impl.site.EnablementSiteServiceImpl"/>
		</exec>
		<echo message="Configuring the Content Disposition filter..."/>
		<exec executable="curl">
			<arg line="--output '${logs}/${demomachine.publishport}_disposition.html'"/>
			<arg line="--globoff"/>
			<arg line="-u admin:${demo.admin.password}"/>
			<arg line="-X POST"/>
			<arg line="-d apply=true"/>
			<arg line="-d action=ajaxConfigManager"/>
			<arg line="-d $location="/>
			<arg line="-d sling.content.disposition.all.paths=false"/>
			<arg line="-d propertylist=sling.content.disposition.all.paths"/>
			<arg line="http://${demo.host}:${demomachine.publishport}/system/console/configMgr/org.apache.sling.security.impl.ContentDispositionFilter"/>
		</exec>
		<antcall target="community_enablement_managers"/>
		<antcall target="community_enablement_notifications"/>
		<if>
			<equals arg1="${demo.communities.samples.enablement}" arg2="true" casesensitive="false"/>
			<then>
				<antcall target="community_enablement_loader"/>
			</then>
		</if>
	</target>
	<!-- Target for enabling the Enablement notifications -->
	<target name="community_enablement_notifications">
		<if>
			<socket server="${demo.host}" port="${demomachine.publishport}"/>
			<then>
				<echo message="Enabling the enablement notifications..."/>
				<exec executable="curl">
					<arg line="--output '${logs}/${demomachine.authorport}_enablement_notifications.html'"/>
					<arg line="--globoff"/>
					<arg line="-u admin:${demo.admin.password}"/>
					<arg line="-X POST"/>
					<arg line="-d apply=true"/>
					<arg line="-d action=ajaxConfigManager"/>
					<arg line="-d $location="/>
					<arg line="-d enable.email=true"/>
					<arg line="-d enable.email=false"/>
					<arg line="-d enable.activitystream=false"/>
					<arg line="-d enable.enrollment=true"/>
					<arg line="-d enable.enrollment=false"/>
					<arg line="-d enable.unenrollment=true"/>
					<arg line="-d enable.unenrollment=false"/>
					<arg line="-d email.template=/etc/social/notification/emailtemplates/enrollment/emailtemplate.txt"/>
					<arg line="-d propertylist=enable.email,enable.activitystream,enable.enrollment,enable.unenrollment,email.template"/>
					<arg line="http://${demo.host}:${demomachine.publishport}/system/console/configMgr/com.adobe.cq.social.enablement.impl.notifications.EnablementNotificationService"/>
				</exec>
			</then>
		</if>
	</target>
	<target name="community_jdbc">
		<echo message="Enabling the JDBC driver to Reporting database on port ${port}..."/>
		<propertyregex property="mysql.prefix" input="${demo.build}" regexp="-" replace="" global="true" defaultvalue="${demo.build}"/>
		<exec executable="curl">
			<arg line="--output '${logs}/${port}_jdbc_reporting.html'"/>
			<arg line="--globoff"/>
			<arg line="-u admin:${demo.admin.password}"/>
			<arg line="-X POST"/>
			<arg line="-d apply=true"/>
			<arg line="-d factoryPid=com.day.commons.datasource.jdbcpool.JdbcPoolService"/>
			<arg line="-d action=ajaxConfigManager"/>
			<arg line="-d $location="/>
			<arg line="-d jdbc.driver.class=com.mysql.jdbc.Driver"/>
			<arg line="-d jdbc.connection.uri=jdbc:mysql://${demo.mysql.host}:${demo.mysql.port}/${mysql.prefix}reporting"/>
			<arg line="-d jdbc.username=${demo.mysql.user}"/>
			<arg line="-d jdbc.password=${demo.mysql.password}"/>
			<arg line="-d jdbc.validation.query="/>
			<arg line="-d default.readonly=false"/>
			<arg line="-d default.autocommit=true"/>
			<arg line="-d default.autocommit=false"/>
			<arg line="-d pool.size=10"/>
			<arg line="-d pool.max.wait.msec=1000"/>
			<arg line="-d datasource.name=enablement"/>
			<arg line="-d datasource.svc.properties="/>
			<arg line="-d propertylist=jdbc.driver.class,jdbc.connection.uri,jdbc.username,jdbc.password,jdbc.validation.query,default.readonly,default.autocommit,pool.size,pool.max.wait.msec,datasource.name,datasource.svc.properties"/>
			<arg line="http://${demo.host}:${port}/system/console/configMgr/[Temporary%20PID%20replaced%20by%20real%20PID%20upon%20save]"/>
		</exec>
	</target>
	<target name="community_warmup">
		<echo message="Preloading the main demo pages..."/>
		<if>
			<socket server="${demo.host}" port="${demomachine.publishport}"/>
			<then>
				<exec executable="curl">
					<arg line="--output '${logs}/${demomachine.publishport}_preload_communities.html'"/>
					<arg line="-u admin:${demo.admin.password}"/>
					<arg line="http://${demo.host}:${demomachine.publishport}/content/sites/communities.html"/>
				</exec>
				<exec executable="curl">
					<arg line="--output '${logs}/${demomachine.publishport}_preload_communities_moderation.html'"/>
					<arg line="-u admin:${demo.admin.password}"/>
					<arg line="http://${demo.host}:${demomachine.publishport}/content/sites/communities/moderation.html"/>
				</exec>
				<exec executable="curl">
					<arg line="--output '${logs}/${demomachine.publishport}_preload_communities_weretail.html'"/>
					<arg line="-u admin:${demo.admin.password}"/>
					<arg line="http://${demo.host}:${demomachine.publishport}/etc/designs/we-retail/clientlib-all.css"/>
				</exec>
				<exec executable="curl">
					<arg line="--output '${logs}/${demomachine.authorport}_preload_communities_weretail.html'"/>
					<arg line="-u admin:${demo.admin.password}"/>
					<arg line="http://${demo.host}:${demomachine.authorport}/etc/designs/we-retail/clientlib-all.css"/>
				</exec>
			</then>
		</if>
		<exec executable="curl">
			<arg line="--output '${logs}/${demomachine.authorport}_preload_communities.html'"/>
			<arg line="-u admin:${demo.admin.password}"/>
			<arg line="http://${demo.host}:${demomachine.authorport}/content/sites/communities.html"/>
		</exec>
		<exec executable="curl">
			<arg line="--output '${logs}/${demomachine.authorport}_preload_communities_sites.html'"/>
			<arg line="-u admin:${demo.admin.password}"/>
			<arg line="http://${demo.host}:${demomachine.authorport}/communities/sites"/>
		</exec>
	</target>
	<!-- These targets send specific records to Adobe Analytics related to demo machine activity -->
	<target name="demomachine_analytics_install">
		<antcall target="demomachine_analytics">
			<param name="analytics.event" value="event6"/>
			<param name="analytics.pagename" value="install"/>
		</antcall>
	</target>
	<target name="demomachine_analytics_start">
		<antcall target="demomachine_analytics">
			<param name="analytics.event" value="event5"/>
			<param name="analytics.pagename" value="start"/>
		</antcall>
	</target>
	<target name="demomachine_analytics_stop">
		<antcall target="demomachine_analytics">
			<param name="analytics.event" value="event7"/>
			<param name="analytics.pagename" value="stop"/>
		</antcall>
	</target>
	<target name="demomachine_analytics_forms">
		<antcall target="demomachine_analytics">
			<param name="analytics.event" value="event9"/>
			<param name="analytics.pagename" value="forms"/>
		</antcall>
	</target>
	<target name="demomachine_analytics_commerce">
		<antcall target="demomachine_analytics">
			<param name="analytics.event" value="event28"/>
			<param name="analytics.pagename" value="commerce"/>
		</antcall>
	</target>
	<target name="demomachine_analytics_assets">
		<antcall target="demomachine_analytics">
			<param name="analytics.event" value="event10"/>
			<param name="analytics.pagename" value="assets"/>
		</antcall>
	</target>
	<target name="demomachine_analytics_communities">
		<antcall target="demomachine_analytics">
			<param name="analytics.event" value="event8"/>
			<param name="analytics.pagename" value="communities"/>
		</antcall>
	</target>
	<!-- This target restarts a bundle -->
	<target name="bundle_restart">
		<exec executable="curl">
			<arg line="-u admin:${demo.admin.password}"/>
			<arg line="-o '${logs}/${bundle.port}_bundles.json' http://${demo.host}:${bundle.port}/system/console/bundles.json"/>
		</exec>
		<loadfile property="bundle.list" srcFile="${logs}/${bundle.port}_bundles.json"/>
		<propertyregex property="bundle.id" input="${bundle.list}" regexp="\{&quot;id&quot;:([0-9]+),&quot;name&quot;:&quot;${bundle.name}" select="\1"/>
		<echo message="Bundle ID to restart: ${bundle.id}"/>
		<exec executable="curl">
			<arg line="--output '${logs}/${bundle.port}_bundle_${bundle.id}_stop.html'"/>
			<arg line="-u admin:${demo.admin.password}"/>
			<arg line="-X POST"/>
			<arg line="-d action=stop"/>
			<arg line="http://${demo.host}:${bundle.port}/system/console/bundles/${bundle.id}"/>
		</exec>
		<sleep seconds="30"/>
		<exec executable="curl">
			<arg line="--output '${logs}/${bundle.port}_bundle_${bundle.id}_start.html'"/>
			<arg line="-u admin:${demo.admin.password}"/>
			<arg line="-X POST"/>
			<arg line="-d action=start"/>
			<arg line="http://${demo.host}:${bundle.port}/system/console/bundles/${bundle.id}"/>
		</exec>
	</target>
	<!-- This target gets the current hostname -->
	<target name="hostname">
		<if>
			<not>
				<equals arg1="${ant.java.version}" arg2="1.6" casesensitive="false"/>
			</not>
			<then>
				<java classname="com.adobe.aem.demomachine.Hostname" outputproperty="demo.hostname">
					<classpath refid="demo.classpath"/>
				</java>
			</then>
		</if>
	</target>
	<!-- This target posts a record to Adobe Analytics about a specific demo machine activity -->
	<target name="demomachine_analytics" depends="hostname">
		<if>
			<and>
				<equals arg1="${demo.analytics.track}" arg2="true" casesensitive="false"/>
				<not>
					<equals arg1="${ant.java.version}" arg2="1.6" casesensitive="false"/>
				</not>
			</and>
			<then>
				<copy file="${dist}/analytics/event.xml" tofile="${dist}/analytics/event-data.xml" overwrite="true"/>
				<replace file="${dist}/analytics/event-data.xml" token="@analytics.event@" value="${analytics.event}"/>
				<replace file="${dist}/analytics/event-data.xml" token="@analytics.user@" value="${demo.hostname}"/>
				<replace file="${dist}/analytics/event-data.xml" token="@analytics.pagename@" value="${analytics.pagename}"/>
				<replace file="${dist}/analytics/event-data.xml" token="@AdobeAnalytics.reportsuite@" value="${demo.analytics.reportsuite}"/>
				<java classname="com.adobe.aem.demomachine.Analytics">
					<classpath refid="demo.classpath"/>
					<arg line="-h ${demo.analytics.reportsuite}.d3.sc.omtrdc.net -u /b/ss//6 -f &quot;${dist}/analytics/event-data.xml&quot;"/>
				</java>
				<delete file="${dist}/analytics/event-data.xml"/>
			</then>
		</if>
	</target>
	<target name="cloudservices" depends="version,configuration,community_loader_flag">
		<propertyselector property="constituents" match="demo.cloudservices\.([^\.]*)\.enabled" select="\1" casesensitive="false"/>
		<echo message="Adding cloud services for path ${path}: ${constituents} on port ${port}"/>
		<delete file="${logs}/cloudservices.csv"/>
		<foreach list="${constituents}" target="cloudservices.process" param="myparam"/>
		<java classname="com.adobe.aem.demomachine.communities.Loader">
			<classpath refid="demo.classpath"/>
			<arg line="-h ${demo.host} -p ${port} -a ${port} -u ${demo.admin.password} -f  &quot;${logs}/cloudservices.csv&quot; ${demo.loader.configureflag} ${demo.loader.resetflag}"/>
		</java>
		<delete file="${logs}/cloudservices.csv"/>
	</target>
	<target name="cloudservices.process">
		<propertycopy property="key" from="demo.cloudservices.${myparam}.path"/>
		<propertycopy property="enabled" from="demo.cloudservices.${myparam}.enabled"/>
		<!-- Generating a .csv file to be processed by the demo machine Loader later on -->
		<if>
			<equals arg1="${enabled}" arg2="true" casesensitive="false"/>
			<then>
				<echo file="${logs}/cloudservices.csv" append="true" message="SlingPost,${path},cq:cloudserviceconfigs+,/etc/cloudservices${key}${line.separator}"/>
			</then>
		</if>
	</target>
	<!-- Sets the Cloud Services as per the configuration for the standard demo sites Geometrixx Outdoors and Geometrix Media  -->
	<target name="demo_cloudservices">
		<antcall target="cloudservices">
			<param name="path" value="/content/geometrixx-outdoors/jcr:content"/>
		</antcall>
		<antcall target="cloudservices">
			<param name="path" value="/content/geometrixx-media/jcr:content"/>
		</antcall>
		<antcall target="cloudservices">
			<param name="path" value="/content/community-components/en/jcr:content"/>
		</antcall>
	</target>
	<target name="prerequisites">
		<!-- Making sure the demo machine is not installed in folder with space characters - because of MySQL compatibility issues -->
		<if>
			<contains substring=" " string="${dist}" casesensitive="false"/>
			<then>
				<echo message="WARNING: Your Demo Machine is installed in folder containing space characters, which is causing MySQL based scenarios to break."/>
			</then>
		</if>
		<!-- Making sure the hotfixes have been downloaded -->
		<if>
			<and>
				<equals arg1="${demo.hotfixes}" arg2="true" casesensitive="false"/>
				<available file="${dist}/hotfixes" type="dir"/>
			</and>
			<then>
				<resourcecount property="count.hotfixes">
					<fileset dir="${dist}/hotfixes">
						<include name="**/*.zip"/>
						<include name="**/*.jar"/>
					</fileset>
				</resourcecount>
			</then>
			<else>
				<property name="count.hotfixes" value="0"/>
			</else>
		</if>
		<if>
			<equals arg1="${count.hotfixes}" arg2="0" casesensitive="false"/>
			<then>
				<echo message="WARNING: Hotfixes have not been downloaded yet - please do it!"/>
			</then>
			<else>
				<echo message="${count.hotfixes} Hotfixes can be installed at startup time depending on the version"/>
			</else>
		</if>
		<!-- Scenarios for AEM Communities -->
		<if>
			<and>
				<equals arg1="${count.hotfixes}" arg2="0" casesensitive="false"/>
				<equals arg1="${demo.addons.4.communities}" arg2="true" casesensitive="false"/>
				<equals arg1="${demo.packages}" arg2="aem61" casesensitive="false"/>
			</and>
			<then>
				<fail message="Demonstrating AEM Communities 6.1 requires a few hotfixes to be there. Please download the hotfixes from the GUI or with download_hotfixes_packages target"/>
			</then>
		</if>
		<if>
			<and>
				<equals arg1="${demomachine.type}" arg2="author" casesensitive="false"/>
				<equals arg1="${demo.addons.4.communities}" arg2="true" casesensitive="false"/>
			</and>
			<then>
				<echo message="Demonstrating AEM Communities should be done with a running Publish instance. Proceeding with Author only for this demo instance"/>
			</then>
		</if>
		<!-- Scenarios for which Mongo is required -->
		<if>
			<or>
				<equals arg1="${demomachine.store}" arg2="crx3,crx3mongo" casesensitive="false"/>
				<equals arg1="${demomachine.srp}" arg2="msrp" casesensitive="false"/>
			</or>
			<then>
				<if>
					<and>
						<equals arg1="${demo.mongo.external}" arg2="false" casesensitive="false"/>
						<not>
							<resourceexists>
								<file file="${mongodb}/bin/mongod"/>
							</resourceexists>
						</not>
					</and>
					<then>
						<fail message="Your demo configuration requires MongoDB and it doesn't seem to be installed. Please use the demo machine commands to download and to install MongoDB, or set the demo.mongo.external property to true for pointing at some other existing MongoDB instance"/>
					</then>
				</if>
			</then>
		</if>
		<!-- Scenarios for which SOLR is required -->
		<if>
			<or>
				<equals arg1="${demomachine.srp}" arg2="msrp" casesensitive="false"/>
				<equals arg1="${demomachine.srp}" arg2="dsrp" casesensitive="false"/>
			</or>
			<then>
				<if>
					<not>
						<resourceexists>
							<file file="${solr}/bin/solr"/>
						</resourceexists>
					</not>
					<then>
						<fail message="Your demo configuration requires SOLR and it doesn't seem to be installed. Please use the demo machine commands to download and to install SOLR"/>
					</then>
					<else>
						<if>
							<not>
								<resourcecontains resource="${solr}/example/solr/collection1/conf/schema.xml" substring="extra 23 languages"/>
							</not>
							<then>
								<fail message="A newer SOLR schema is required. Please use the demo machine commands to download and to re-install SOLR"/>
							</then>
						</if>
					</else>
				</if>
			</then>
		</if>
		<!-- Scenarios for which MySQL is required -->
		<if>
			<or>
				<equals arg1="${demomachine.store}" arg2="crx3,crx3rdb" casesensitive="false"/>
				<equals arg1="${demomachine.communities.enablement}" arg2="true" casesensitive="false"/>
			</or>
			<then>
				<if>
					<and>
						<equals arg1="${demo.mysql.external}" arg2="false" casesensitive="false"/>
						<not>
							<resourceexists>
								<file file="${mysql}/bin/mysql"/>
							</resourceexists>
						</not>
					</and>
					<then>
						<fail message="Your demo configuration requires MySQL and it doesn't seem to be installed. Please use the demo machine commands to download and to install MySQL, or set the demo.mysql.external property to true for pointing at some other existing MySQL instance"/>
					</then>
				</if>
			</then>
		</if>
	</target>
	<!-- Verifies the Java version compatibility -->
	<target name="javaversion" depends="version,configuration">
		<echo message="Java version in use: ${ant.java.version}"/>
		<if>
			<and>
				<equals arg1="${ant.java.version}" arg2="1.6" casesensitive="false"/>
				<equals arg1="${demo.packages}" arg2="aem61" casesensitive="false"/>
			</and>
			<then>
				<fail message="AEM 6.1 cannot run with Java6 - please install a Java7 or Java8 JDK"/>
			</then>
		</if>
		<if>
			<and>
				<equals arg1="${ant.java.version}" arg2="1.8" casesensitive="false"/>
				<or>
					<equals arg1="${demo.packages}" arg2="aem60" casesensitive="false"/>
					<equals arg1="${demo.packages}" arg2="cq56" casesensitive="false"/>
				</or>
			</and>
			<then>
				<fail message="CQ 5.6.x cannot run with Java8 - please install a Java6 JDK"/>
			</then>
		</if>
		<echo message="Java version ${ant.java.version} is compatible with AEM version: ${demo.packages}"/>
	</target>
	<!-- Target for building and installing GitHub projects -->
	<target name="github" depends="version,configuration">
		<echo message="Building and installing GitHub projects"/>
		<propertyselector property="gitprojects" match="demo.github.([^\.]*).install" select="\1" casesensitive="false"/>
		<if>
			<and>
				<isset property="gitprojects"/>
				<not>
					<equals arg1="${gitprojects}" arg2=""/>
				</not>
			</and>
			<then>
				<foreach list="${gitprojects}" target="github_install" param="gitproject.id"/>
			</then>
			<else>
				<echo message="No GitHub project to install"/>
			</else>
		</if>
		<sleep seconds="10"/>
	</target>
	<target name="github_install" depends="version,configuration">
		<propertycopy property="git.install" from="demo.github.${gitproject.id}.install"/>
		<propertycopy property="git.path" from="demo.github.${gitproject.id}.path"/>
		<propertycopy property="git.pull" from="demo.github.${gitproject.id}.pull"/>
		<propertycopy property="git.version" from="demo.github.${gitproject.id}.version"/>
		<if>
			<and>
				<equals arg1="${git.install}" arg2="true" casesensitive="false"/>
				<equals arg1="${git.version}" arg2="${demo.packages}" casesensitive="false"/>
			</and>
			<then>
				<echo message="Installing GitHub project ${gitproject.id} for version ${git.version}"/>
				<if>
					<equals arg1="${git.pull}" arg2="true" casesensitive="false"/>
					<then>
						<echo message="Pulling from GitHub for project ${gitproject.id}"/>
						<exec dir="${git.path}" executable="git" spawn="false" failonerror="false">
							<arg line="pull"/>
						</exec>
					</then>
				</if>
				<echo message="Building GitHub project ${gitproject.id}"/>
				<exec dir="${git.path}" executable="${demo.mvn}" spawn="false" failonerror="false">
					<arg line="clean install -PautoInstallPackage"/>
				</exec>
				<if>
					<socket server="${demo.host}" port="${demomachine.publishport}"/>
					<then>
						<exec dir="${git.path}" executable="${demo.mvn}" spawn="false" failonerror="false">
							<arg line="install -PautoInstallPackagePublish"/>
						</exec>
					</then>
				</if>
			</then>
		</if>
	</target>
	<!-- This target generates new MD5 checksums for the demo add-ons and packages -->
	<target name="demo_checksums">
		<if>
			<not>
				<equals arg1="${ant.java.version}" arg2="1.6" casesensitive="false"/>
			</not>
			<then>
				<java classname="com.adobe.aem.demomachine.Checksums">
					<classpath refid="demo.classpath"/>
					<arg line="-f &quot;${basedir}&quot;"/>
				</java>
			</then>
		</if>
	</target>
	<!-- This target checks if there are updates for the demo add-ons and packages -->
	<target name="demo_update">
		<if>
			<not>
				<equals arg1="${ant.java.version}" arg2="1.6" casesensitive="false"/>
			</not>
			<then>
				<java classname="com.adobe.aem.demomachine.Updates">
					<classpath refid="demo.classpath"/>
					<arg line="-f &quot;${basedir}&quot;"/>
				</java>
			</then>
		</if>
	</target>
	<target name="gui_build" depends="compile">
		<delete file="demomachine.jar"/>
		<jar destfile="demomachine.jar" basedir="${java}/bin" includes="**">
			<zipgroupfileset dir="${java}/libs" includes="**/*.jar"/>
			<zipgroupfileset dir="${ant}/lib" includes="**/*.jar"/>
			<manifest>
				<attribute name="Main-Class" value="com.adobe.aem.demomachine.gui.AemDemo"/>
			</manifest>
		</jar>
	</target>
	<target name="gui">
		<java dir="." jar="demomachine.jar" fork="true" spawn="true"/>
	</target>
	<target name="stepbystep">
		<if>
			<equals arg1="${demo.stepbystep}" arg2="true" casesensitive="false"/>
			<then>
				<input message="Enter any key to move one step forward"/>
			</then>
		</if>
	</target>
	<!-- Rebuild target -->
	<target name="rebuild">
		<if>
			<resourceexists>
				<file file="${demos}/${demo.build}/demobuild.properties"/>
			</resourceexists>
			<then>
				<echo message="Rebuilding ${demo.build}"/>
				<!-- Rebuilding via ANT -->
				<mkdir dir="${validation}/build"/>
				<exec executable="ant" dir="." spawn="false" output="${validation}/build/${demo.build}.log" failonerror="false">
					<arg line="-propertyfile '${demos}/${demo.build}/demobuild.properties' -Ddemo.build=${demo.build} create"/>
				</exec>
			</then>
		</if>
	</target>
	<!-- Screenshot target -->
	<target name="screenshot" depends="version,configuration">
		<antcall target="validation">
			<param name="screenshot" value="true"/>
		</antcall>
	</target>
	<!-- Reset infrastructure target -->
	<target name="install_infrastructure">
		<antcall target="stop"/>
		<antcall target="install_mongo"/>
		<antcall target="install_solr"/>
		<antcall target="install_mysql"/>
	</target>
	<!-- Validation target -->
	<target name="validation">
		<!-- Timestamp for results -->
		<tstamp>
			<format property="validation.timestamp" pattern="yyyy-MM-dd-HH-mm"/>
		</tstamp>
		<mkdir dir="${validation}/screenshots/${validation.timestamp}"/>
		<if>
			<equals arg1="${demo.validation.reset}" arg2="true" casesensitive="false"/>
			<then>
				<antcall target="install_infrastructure"/>
			</then>
		</if>
		<if>
			<equals arg1="${screenshot}" arg2="true" casesensitive="false"/>
			<then>
				<property name="results" value="results-${demo.build}-${validation.timestamp}"/>
			</then>
			<else>
				<property name="results" value="results-${validation.timestamp}"/>
			</else>
		</if>
		<mkdir dir="${validation}/screenshots/${validation.timestamp}"/>
		<mkdir dir="${validation}/benchmarks/${validation.timestamp}"/>
		<mkdir dir="${validation}/html/${validation.timestamp}"/>
		<mkdir dir="${validation}/build"/>
		<echo file="${validation}/${results}.html">
			&lt;!DOCTYPE html&gt;
			&lt;html&gt;
			&lt;head&gt;
			&lt;link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous"&gt;
			&lt;link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap-theme.min.css" integrity="sha384-rHyoN1iRsVXV4nD0JutlnGaslCJuC7uwjduW9SVrLvRYooPp2bWYgmgJQIXwl/Sp" crossorigin="anonymous"&gt;
			&lt;script src="https://code.jquery.com/jquery-3.1.0.min.js"&gt;
			&lt;script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"&gt;&lt;/script&gt;
			&lt;/head&gt;
			&lt;body&gt;
			&lt;table class="table table-striped"&gt;
		</echo>
		<propertyselector property="constituents.unsorted" match="demo.validation.([^\.]*).url" select="\1" casesensitive="false"/>
		<sortlist property="constituents" value="${constituents.unsorted}" delimiter=","/>
		<!-- Printing table headers -->
		<echo file="${validation}/${results}.html" append="true">&lt;tr&gt;&lt;th&gt;error&amp;nbsp;logs&lt;br&gt;(author)&lt;/th&gt;&lt;th&gt;error&amp;nbsp;logs&lt;br&gt;(publish)&lt;/th&gt;&lt;th&gt;demo&amp;nbsp;logs&lt;/th&gt;&lt;th&gt;demo&lt;/th&gt;&lt;th&gt;duration&lt;/th&gt;&lt;th&gt;versions&lt;/th&gt;</echo>
		<foreach list="${constituents}" target="validation_build_header" param="screenshot.id" inheritall="true"/>
		<echo file="${validation}/${results}.html" append="true">&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;</echo>
		<foreach list="${constituents}" target="validation_build_user" param="screenshot.id" inheritall="true"/>
		<echo file="${validation}/${results}.html" append="true">&lt;/tr&gt;</echo>
		<if>
			<equals arg1="${screenshot}" arg2="true" casesensitive="false"/>
			<then>
				<antcall target="validation_build">
					<param name="demopath" value="${demos}/${demo.build}"/>
				</antcall>
			</then>
			<else>
				<foreach target="validation_build" param="demopath" inheritall="true">
					<path>
						<sort>
							<dirset dir="${demos}">
								<include name="*"/>
							</dirset>
							<reverse xmlns="antlib:org.apache.tools.ant.types.resources.comparators">
								<name/>
							</reverse>
						</sort>
					</path>
				</foreach>
			</else>
		</if>
		<echo file="${validation}/${results}.html" append="true">&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;</echo>
		<!-- Taking the uber screenshot -->
		<exec executable="webkit2png" dir="${validation}" spawn="false" failonerror="false">
			<arg line="-o ${results} --fullsize -W 3200 -H 2800 '${results}.html'"/>
		</exec>
		<!-- Copying the latest screenshots and results -->
		<copy file="${validation}/${results}.html" tofile="${validation}/results.html" overwrite="true" failonerror="false"/>
		<copy file="${validation}/${results}-full.png" tofile="${validation}/results.png" overwrite="true" failonerror="false"/>
	</target>
	<target name="validation_build">
		<basename property="demo" file="${demopath}"/>
		<if>
			<or>
				<and>
					<!-- Only rebuilding if possible and desired -->
					<resourceexists>
						<file file="${demos}/${demo}/demobuild.properties"/>
					</resourceexists>
					<resourcecontains resource="${demos}/${demo}/demobuild.properties" substring="demo.validation=true"/>
				</and>
				<equals arg1="${screenshot}" arg2="true" casesensitive="false"/>
			</or>
			<then>
				<stopwatch name="timer_overall"/>
				<!-- Rebuilding via nested ANT -->
				<if>
					<not>
						<equals arg1="${screenshot}" arg2="true" casesensitive="false"/>
					</not>
					<then>
						<echo message="Rebuilding demo environment: ${demo}"/>
						<exec executable="ant" dir="." spawn="false" output="${validation}/build/${demo}.log" failonerror="false">
							<arg line="-propertyfile '${demos}/${demo}/demobuild.properties' -Ddemo.build=${demo} -Ddemo.gui=false -Ddemo.nobrowser=true create"/>
						</exec>
						<propertyfile file="${demos}/${demo}/demobuild.properties">
							<entry key="demo.gui" value="true"/>
							<entry key="demo.nobrowser" value="false"/>
						</propertyfile>
					</then>
				</if>
				<!-- Scrubbing logs -->
				<echo file="${validation}/${results}.html" append="true">&lt;tr&gt;&lt;td&gt;</echo>
				<antcall target="validation_build_logs">
					<param name="validation.log.file" value="${demos}/${demo}/author/crx-quickstart/logs/error.log"/>
					<param name="validation.log.pattern" value="ERROR"/>
					<param name="validation.log.style" value="danger"/>
					<param name="validation.log.name" value="author"/>
				</antcall>
				<antcall target="validation_build_logs">
					<param name="validation.log.file" value="${demos}/${demo}/author/crx-quickstart/logs/error.log"/>
					<param name="validation.log.pattern" value="WARN"/>
					<param name="validation.log.style" value="warning"/>
					<param name="validation.log.name" value="author"/>
				</antcall>
				<echo file="${validation}/${results}.html" append="true">&lt;/td&gt;</echo>
				<echo file="${validation}/${results}.html" append="true">&lt;td&gt;</echo>
				<antcall target="validation_build_logs">
					<param name="validation.log.file" value="${demos}/${demo}/publish/crx-quickstart/logs/error.log"/>
					<param name="validation.log.pattern" value="ERROR"/>
					<param name="validation.log.style" value="danger"/>
					<param name="validation.log.name" value="publish"/>
				</antcall>
				<antcall target="validation_build_logs">
					<param name="validation.log.file" value="${demos}/${demo}/publish/crx-quickstart/logs/error.log"/>
					<param name="validation.log.pattern" value="WARN"/>
					<param name="validation.log.style" value="warning"/>
					<param name="validation.log.name" value="publish"/>
				</antcall>
				<echo file="${validation}/${results}.html" append="true">&lt;/td&gt;</echo>
				<echo file="${validation}/${results}.html" append="true">&lt;td&gt;</echo>
				<antcall target="validation_build_logs">
					<param name="validation.log.file" value="${demos}/${demo}/author/crx-quickstart/logs/aem-demo-machine.log"/>
					<param name="validation.log.pattern" value="ERROR"/>
					<param name="validation.log.style" value="danger"/>
					<param name="validation.log.name" value="demomachine"/>
				</antcall>
				<antcall target="validation_build_logs">
					<param name="validation.log.file" value="${demos}/${demo}/author/crx-quickstart/logs/aem-demo-machine.log"/>
					<param name="validation.log.pattern" value="WARN"/>
					<param name="validation.log.style" value="warning"/>
					<param name="validation.log.name" value="demomachine"/>
				</antcall>
				<echo file="${validation}/${results}.html" append="true">&lt;/td&gt;</echo>
				<echo file="${validation}/${results}.html" append="true">&lt;td&gt;${demo}&lt;/td&gt;</echo>
				<!-- Duration -->
				<stopwatch name="timer_overall" action="total"/>
				<echo file="${validation}/${results}.html" append="true">&lt;td&gt;${timer_overall}&lt;/td&gt;</echo>
				<!-- Versions -->
				<exec executable="curl">
					<arg line="-u admin:${demo.admin.password}"/>
					<arg line="-o '${validation}/build/${AdobeAEM.publishport}_${demo}_productinfo.json' http://${demo.host}:${AdobeAEM.publishport}/system/console/status-productinfo.json"/>
				</exec>
				<java classname="com.adobe.aem.demomachine.RegExp" outputproperty="aem.version">
					<arg line="-f '${validation}/build/${AdobeAEM.publishport}_${demo}_productinfo.json'"/>
					<arg line="-r '([0-9.]+)'"/>
					<arg line="-p last"/>
					<classpath refid="demo.classpath"/>
				</java>
				<exec executable="curl">
					<arg line="-u admin:${demo.admin.password}"/>
					<arg line="-o '${validation}/build/${AdobeAEM.publishport}_${demo}_packages.json' http://${demo.host}:${AdobeAEM.publishport}/crx/packmgr/list.jsp"/>
				</exec>
				<java classname="com.adobe.aem.demomachine.RegExp" outputproperty="soco.version.zip">
					<arg line="-f '${validation}/build/${AdobeAEM.publishport}_${demo}_packages.json'"/>
					<arg line="-r 'cq-socialcommunities-pkg-([0-9.]+).zip'"/>
					<arg line="-p last"/>
					<classpath refid="demo.classpath"/>
				</java>
				<propertyregex property="soco.version" input="${soco.version.zip}" regexp="([0-9.]+)" select="\1" defaultValue="n/a"/>
				<java classname="com.adobe.aem.demomachine.RegExp" outputproperty="scorm.version.zip">
					<arg line="-f '${validation}/build/${AdobeAEM.publishport}_${demo}_packages.json'"/>
					<arg line="-r 'cq-social-scorm-pkg-([0-9.]+).zip'"/>
					<arg line="-p first"/>
					<classpath refid="demo.classpath"/>
				</java>
				<propertyregex property="scorm.version" input="${scorm.version.zip}" regexp="([0-9.]+)" select="\1" defaultValue="n/a"/>
				<exec executable="curl">
					<arg line="-u admin:${demo.admin.password}"/>
					<arg line="-o '${validation}/build/${AdobeAEM.publishport}_${demo}_bundles.html' http://${demo.host}:${AdobeAEM.publishport}/system/console/bundles"/>
				</exec>
				<loadfile property="bundles.list" srcFile="${validation}/build/${AdobeAEM.publishport}_${demo}_bundles.html"/>
				<propertyregex property="oak.version" input="${bundles.list}" regexp="version&quot;:&quot;([a-zA-Z0-9.]+)&quot;,&quot;symbolicName&quot;:&quot;org.apache.jackrabbit.oak-core" select="\1"/>
				<java classname="com.adobe.aem.demomachine.RegExp" outputproperty="srp.type">
					<arg line="-f '${demos}/${demo}/demobuild.properties'"/>
					<arg line="-r 'srp=([a-zA-Z0-9.]+)'"/>
					<arg line="-p first"/>
					<classpath refid="demo.classpath"/>
				</java>
				<echo file="${validation}/${results}.html" append="true">&lt;td&gt;AEM&amp;nbsp;${aem.version}&lt;br/&gt;OAK&amp;nbsp;${oak.version}&lt;br/&gt;SoCo&amp;nbsp;${soco.version}&lt;br/&gt;SCORM&amp;nbsp;${scorm.version}&lt;br/&gt;${srp.type}&lt;/td&gt;&lt;/td&gt;</echo>
				<!-- Taking Screenshots -->
				<foreach list="${constituents}" target="validation_build_screenshot" param="screenshot.id" inheritall="true"/>
				<echo file="${validation}/${results}.html" append="true">&lt;/tr&gt;</echo>
				<!-- Cleaning via nested ANT -->
				<if>
					<and>
						<not>
							<equals arg1="${screenshot}" arg2="true" casesensitive="false"/>
						</not>
						<resourcecontains resource="${demos}/${demo}/demobuild.properties" substring="demo.validation.wipeout=true"/>
					</and>
					<then>
						<echo message="Cleaning demo environment: ${demo}"/>
						<exec executable="ant" dir="." spawn="false" output="${validation}/build/${demo}-clean.log" failonerror="false">
							<arg line="-propertyfile '${demos}/${demo}/demobuild.properties' -Ddemo.build=${demo} cleanup"/>
						</exec>
					</then>
					<else>
						<echo message="Not cleaning up demo environment: ${demo}"/>
					</else>
				</if>
			</then>
		</if>
	</target>
	<target name="validation_build_user">
		<if>
			<not>
				<isset property="demo.validation.${screenshot.id}.user"/>
			</not>
			<then>
				<property name="demo.validation.${screenshot.id}.user" value="guest@weretail.com"/>
			</then>
		</if>
		<antcall target="validation_build_user_item">
			<param name="screenshot.user" value="demo.validation.${screenshot.id}.user"/>
		</antcall>
	</target>
	<target name="validation_build_user_item">
		<propertycopy property="this.user" from="${screenshot.user}"/>
		<echo file="${validation}/build/${AdobeAEM.publishport}_username.txt">${this.user}</echo>
		<java classname="com.adobe.aem.demomachine.RegExp" outputproperty="demo.user">
			<arg line="-f '${validation}/build/${AdobeAEM.publishport}_username.txt'"/>
			<arg line="-r '([^@]+)'"/>
			<arg line="-p first"/>
			<classpath refid="demo.classpath"/>
		</java>
		<echo file="${validation}/${results}.html" append="true">&lt;td&gt;&lt;small&gt;${demo.user}&lt;/small&gt;&lt;/td&gt;</echo>
	</target>
	<target name="validation_build_header">
		<antcall target="validation_build_header_item">
			<param name="screenshot.label" value="demo.validation.${screenshot.id}.label"/>
		</antcall>
	</target>
	<target name="validation_build_header_item">
		<propertycopy property="this.label" from="${screenshot.label}"/>
		<echo file="${validation}/${results}.html" append="true">&lt;th&gt;${this.label}&lt;/th&gt;</echo>
	</target>
	<target name="validation_build_screenshot">
		<if>
			<not>
				<isset property="demo.validation.${screenshot.id}.user"/>
			</not>
			<then>
				<property name="demo.validation.${screenshot.id}.user" value="guest"/>
			</then>
		</if>
		<antcall target="validation_build_screenshot_item">
			<param name="screenshot.url" value="demo.validation.${screenshot.id}.url"/>
			<param name="screenshot.type" value="demo.validation.${screenshot.id}.type"/>
			<param name="screenshot.user" value="demo.validation.${screenshot.id}.user"/>
		</antcall>
	</target>
	<target name="validation_build_screenshot_item">
		<propertycopy property="this.url" from="${screenshot.url}"/>
		<propertycopy property="this.type" from="${screenshot.type}"/>
		<propertycopy property="this.user" from="${screenshot.user}"/>
		<stopwatch name="timer_screenshot"/>
		<delete file="${validation}/html/${validation.timestamp}/${screenshot.id}.html" quiet="true" failonerror="false"/>
		<get src="http://${demo.host}:${AdobeAEM.publishport}${this.url}" dest="${validation}/html/${validation.timestamp}/${screenshot.id}.html" username="admin" password="${demo.admin.password}" retries="1" ignoreerrors="true"/>
		<if>
			<and>
				<resourceexists>
					<file file="${validation}/html/${validation.timestamp}/${screenshot.id}.html"/>
				</resourceexists>
				<not>
					<resourcecontains resource="${validation}/html/${validation.timestamp}/${screenshot.id}.html" substring="No Resource Found" casesensitive="false"/>
				</not>
			</and>
			<then>
				<stopwatch name="timer_screenshot" action="total"/>
				<!-- Benchmarking the page -->
				<echo message="Benchmarking the page"/>
				<if>
					<equals arg1="${demo.validation.benchmark}" arg2="true" casesensitive="false"/>
					<then>
						<if>
							<equals arg1="${this.user}" arg2="guest" casesensitive="false"/>
							<then>
								<exec executable="ab" dir="${validation}/benchmarks/${validation.timestamp}" spawn="false" failonerror="false" outputproperty="validation.bench">
									<arg line="-n 150 -c 20 -l http://${demo.host}:${AdobeAEM.publishport}${this.url}"/>
								</exec>
							</then>
							<else>
								<exec executable="ab" dir="${validation}/benchmarks/${validation.timestamp}" spawn="false" failonerror="false" outputproperty="validation.bench">
									<arg line="-A ${this.user}:password -n 150 -c 20 -l http://${demo.host}:${AdobeAEM.publishport}${this.url}"/>
								</exec>
							</else>
						</if>
					</then>
					<else>
						<property name="validation.bench.mean" value="${timer_screenshot}"/>
						<property name="validation.bench.throughput" value="n/a"/>
					</else>
				</if>
				<echo file="${validation}/benchmarks/${validation.timestamp}/${demo}-${screenshot.id}.txt" append="false">
					${validation.bench}
				</echo>
				<propertyregex property="validation.bench.throughput" input="${validation.bench}" regexp="Requests per second:(.*)\(mean\)" select="\1"/>
				<propertyregex property="validation.bench.mean" input="${validation.bench}" regexp="Time per request:(.*)\(mean\)" select="\1"/>
				<echo message="Benchmarked the page ${validation.bench.mean} and ${validation.bench.throughput}"/>
				<!-- Taking the screenshot -->
				<if>
					<equals arg1="${this.user}" arg2="guest" casesensitive="false"/>
					<then>
						<exec executable="webkit2png" dir="${validation}/screenshots/${validation.timestamp}" spawn="false" failonerror="false">
							<arg line="--delay=2 -o ${demo}-${screenshot.id} -s 0.2 -W 1280 -H 800 'http://${demo.host}:${AdobeAEM.publishport}${this.url}'"/>
						</exec>
					</then>
					<else>
						<if>
							<equals arg1="${this.user}" arg2="admin" casesensitive="false"/>
							<then>
								<java classname="com.adobe.aem.demomachine.Base64Encoder" outputproperty="screenshot.authorization">
									<arg line="-v '${this.user}:${demo.admin.password}'"/>
									<classpath refid="demo.classpath"/>
								</java>
							</then>
							<else>
								<java classname="com.adobe.aem.demomachine.Base64Encoder" outputproperty="screenshot.authorization">
									<arg line="-v '${this.user}:password'"/>
									<classpath refid="demo.classpath"/>
								</java>
							</else>
						</if>
						<exec executable="webkit2png" dir="${validation}/screenshots/${validation.timestamp}" spawn="false" failonerror="false">
							<arg line="--delay=2 --basic-auth ${screenshot.authorization} -o ${demo}-${screenshot.id} -s 0.2 -W 1280 -H 800 'http://${demo.host}:${AdobeAEM.publishport}${this.url}'"/>
						</exec>
					</else>
				</if>
				<if>
					<resourceexists>
						<file file="${validation}/screenshots/${validation.timestamp}/${demo}-${screenshot.id}-full.png"/>
					</resourceexists>
					<then>
						<echo file="${validation}/${results}.html" append="true">&lt;td&gt;&lt;div style="box-shadow: 0 1px 2px rgba(0,0,0,.075);overflow:hidden; max-height:240px"&gt;&lt;a href="screenshots/${validation.timestamp}/${demo}-${screenshot.id}-full.png" target="_blank"&gt;&lt;img src="screenshots/${validation.timestamp}/${demo}-${screenshot.id}-thumb.png" class="img-rounded" alt="${this.url}" width="200"/&gt;&lt;/a&gt;&lt;br/&gt;&lt;/div&gt;&lt;small&gt;${validation.bench.throughput}&lt;br&gt;${validation.bench.mean}&lt;br&gt;&lt;a href="http://${demo.host}:${AdobeAEM.publishport}${this.url}" target="_blank"&gt;link&lt;/a&gt;&lt;/small&gt;&lt;/td&gt;</echo>
					</then>
					<else>
						<echo file="${validation}/${results}.html" append="true">&lt;td&gt;&lt;/td&gt;</echo>
					</else>
				</if>
			</then>
			<else>
				<echo message="WARNING: page reported an error for ${this.url} and ${this.user} on ${this.type}"/>
				<echo file="${validation}/${results}.html" append="true">&lt;td&gt;&lt;/td&gt;</echo>
			</else>
		</if>
	</target>
	<target name="validation_build_logs">
		<if>
			<resourceexists>
				<file file="${validation.log.file}"/>
			</resourceexists>
			<then>
				<resourcecount property="file.lines">
					<tokens>
						<concat>
							<filterchain>
								<linecontainsregexp>
									<regexp pattern="${validation.log.pattern}"/>
								</linecontainsregexp>
							</filterchain>
							<fileset file="${validation.log.file}"/>
						</concat>
					</tokens>
				</resourcecount>
				<copy file="${validation.log.file}" tofile="${validation}/build/${demo}-${validation.log.name}.log" failonerror="false"/>
				<echo file="${validation}/${results}.html" append="true">&lt;a href="build/${demo}-${validation.log.name}.log"&gt;&lt;span class="label label-${validation.log.style}"&gt;${file.lines}&lt;/span&gt;&lt;/a&gt;&amp;nbsp;</echo>
			</then>
			<else>
				<echo file="${validation}/${results}.html" append="true">&lt;span class="label label-${validation.log.style}"&gt;n/a&lt;/span&gt;&amp;nbsp;</echo>
			</else>
		</if>
	</target>
	<!-- Target that cleanly uninstalls all built demos so far -->
	<target name="cleanslate">
		<foreach target="cleanslate_doit" param="demopath" inheritall="true">
			<path>
				<sort>
					<dirset dir="${demos}">
						<include name="*"/>
					</dirset>
					<reverse xmlns="antlib:org.apache.tools.ant.types.resources.comparators">
						<name/>
					</reverse>
				</sort>
			</path>
		</foreach>
	</target>
	<target name="cleanslate_doit">
		<basename property="demo" file="${demopath}"/>
		<echo message="Cleaning demo environment: ${demo}"/>
		<exec executable="ant" dir="." spawn="false" output="${validation}/build/${demo}-clean.log" failonerror="false">
			<arg line="-Ddemo.build=${demo} cleanup"/>
		</exec>
	</target>
	<!-- Default target when no target name is provided to ANT -->
	<target name="default">
		<antcall target="gui"/>
	</target>
</project>
